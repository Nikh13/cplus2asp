/* Generated by re2c 0.13.6 on Sun Jul 27 13:48:20 2014 */
#line 1 "Configuration.r2c"
/* Generated by re2c 0.13.6 on Thu Jul 10 21:25:20 2014 */
#line 1 "Configuration.r2c"
#include <ostream>

#include "babb/utils/memory.h"
#include "memwrappers.h"

#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>
#include <boost/filesystem/fstream.hpp>

#include "bcplus/Configuration.h"
#include "Configuration.h"

namespace u = babb::utils;
namespace fs = boost::filesystem;

namespace cplus2asp {
namespace cplus2asp_bin {

const u::ref_ptr<const ReferencedString> Configuration::s_ts_zero				= new ReferencedString("0");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_static_incr		= new ReferencedString("t");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_static_static		= new ReferencedString("ST");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_dynamic_incr		= s_ts_static_incr;
const u::ref_ptr<const ReferencedString> Configuration::s_ts_dynamic_static		= new ReferencedString("AT");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_action_incr		= new ReferencedString("t-1");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_action_static		= new ReferencedString("AT-1");
const u::ref_ptr<const ReferencedString> Configuration::s_ts_maxstep_incr		= s_ts_static_incr;
const u::ref_ptr<const ReferencedString> Configuration::s_ts_maxstep_static		= new ReferencedString("maxstep");


Configuration::Configuration(char const* bin, char const* version)
	: bcplus::Configuration(bin, version), _ostream(&std::cout), _input_lang(Input::CPLUS), _output_lang(Output::INCREMENTAL), _enforceDomain(true), _enforceAdditiveDomain(true) {
	/* Intentionally left blank */
}

Configuration::~Configuration() {
	clearOutputFile();
}

void Configuration::clearOutputFile() {
	_output_file = NULL;
	if (_ostream && _ostream != &std::cout) {
		((fs::ofstream*)_ostream)->close();
		delete _ostream;
	}
	_ostream = &std::cout;

}


bool Configuration::outputFile(ReferencedPath const* file) {
	if (!file) {
		clearOutputFile();
		return true;
	}


	fs::ofstream* new_out = new fs::ofstream(*file);
	if (new_out->good()) {
		clearOutputFile();
		_output_file = file;
		_ostream = new_out;
		return true;

	} else {
		delete new_out;
		return false;
	}
}


bool Configuration::good() {
	return true;
}

std::ostream& Configuration::outputOptions(std::ostream& out) const {
	out << "     Translator Options:"																<< std::endl
		<< "          -l=<LANGUAGE>"																<< std::endl
		<< "          --language=<LANGUAGE>"														<< std::endl
		<< "               - Sets the language that should be accepted to <LANGUAGE>:"				<< std::endl
		<< "                    <LANGUAGE>: C+, BC, BC+, MVPF [default: C+]"						<< std::endl
		<< "          -m=<MODE>"																	<< std::endl
		<< "          --mode=<MODE>"																<< std::endl
		<< "               - Sets the compilation mode to <MODE>:"									<< std::endl
		<< "                    <MODE>:"															<< std::endl
		<< "                         STATIC - Targets standard ASP solvers such as Clingo"			<< std::endl
		<< "                         INCREMENTAL - Targets incremental ASP solvers such as iClingo"	<< std::endl
		<< "          -o=<FILE>"																	<< std::endl
		<< "          --output-file=<FILE>"															<< std::endl
		<< "                - Outputs the translated program to <FILE>."							<< std::endl
		<< "          -d"																			<< std::endl
		<< "          --no-domain"																	<< std::endl
		<< "                - Suppresses domain-enforcing rules for non-additive constants in the " << std::endl
		<< "                  translated file."														<< std::endl
		<< "          -a"																			<< std::endl
		<< "          --no-additive-domain"															<< std::endl
		<< "                - Suppresses domain-enforcing rules for additive constants in the "		<< std::endl
		<< "                  translated file." 													<< std::endl
		<< std::endl;
	return bcplus::Configuration::outputOptions(out);
}

#define EXTRACT_NAME val.assign(token, (size_t)(opt - token - 1));
#define EXTRACT_NAME_VAL										\
	{															\
		size_t n;												\
		if (*(opt-1) == '=') { val2 = opt; n = 2; }				\
		else if (opt2) { val2 = opt2; n = 1; }					\
		else return Status::STAT_NEXT_ARG;						\
		val.assign(token, (size_t)(opt - token - n));			\
	}


int Configuration::parseOption(char const* opt, char const* opt2) {
	std::string val, val2;
	char const* token = opt;
	char const* marker;
	int option = 0;

	
#line 125 "<stdout>"
	{
		char yych;

		yych = *opt;
		switch (yych) {
		case '\n':	goto yy2;
		case '-':	goto yy3;
		default:	goto yy5;
		}
yy2:
		opt = marker;
		goto yy4;
yy3:
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy6;
		case 'a':	goto yy9;
		case 'd':	goto yy11;
		case 'l':	goto yy15;
		case 'm':	goto yy13;
		case 'o':	goto yy7;
		default:	goto yy4;
		}
yy4:
#line 149 "Configuration.r2c"
		{  
										goto re2c_other; }
#line 153 "<stdout>"
yy5:
		yych = *++opt;
		goto yy4;
yy6:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy20;
		case 'm':	goto yy21;
		case 'n':	goto yy22;
		case 'o':	goto yy23;
		default:	goto yy2;
		}
yy7:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy19;
		default:	goto yy8;
		}
yy8:
#line 145 "Configuration.r2c"
		{
										EXTRACT_NAME_VAL;
										option = Option::OUTPUT_FILE;
										goto re2c_finish; }
#line 178 "<stdout>"
yy9:
		++opt;
#line 141 "Configuration.r2c"
		{
										EXTRACT_NAME;
										option = Option::NO_ADD_DOMAIN_ENFORCE;
										goto re2c_finish; }
#line 186 "<stdout>"
yy11:
		++opt;
#line 137 "Configuration.r2c"
		{
										EXTRACT_NAME;
										option = Option::NO_DOMAIN_ENFORCE;
										goto re2c_finish; }
#line 194 "<stdout>"
yy13:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy18;
		default:	goto yy14;
		}
yy14:
#line 133 "Configuration.r2c"
		{
										EXTRACT_NAME_VAL;
										option = Option::OUTPUT_MODE;
										goto re2c_finish; }
#line 207 "<stdout>"
yy15:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy17;
		default:	goto yy16;
		}
yy16:
#line 128 "Configuration.r2c"
		{
										EXTRACT_NAME_VAL;
										option = Option::INPUT_MODE;
										goto re2c_finish; }
#line 220 "<stdout>"
yy17:
		yych = *++opt;
		goto yy16;
yy18:
		yych = *++opt;
		goto yy14;
yy19:
		yych = *++opt;
		goto yy8;
yy20:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy56;
		default:	goto yy2;
		}
yy21:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy54;
		default:	goto yy2;
		}
yy22:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy33;
		default:	goto yy2;
		}
yy23:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy24;
		default:	goto yy2;
		}
yy24:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy25;
		default:	goto yy2;
		}
yy25:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy26;
		default:	goto yy2;
		}
yy26:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy27;
		default:	goto yy2;
		}
yy27:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy28;
		default:	goto yy2;
		}
yy28:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy29;
		default:	goto yy2;
		}
yy29:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy30;
		default:	goto yy2;
		}
yy30:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy31;
		default:	goto yy2;
		}
yy31:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy32;
		default:	goto yy2;
		}
yy32:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy7;
		default:	goto yy2;
		}
yy33:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy34;
		default:	goto yy2;
		}
yy34:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy35;
		case 'd':	goto yy36;
		default:	goto yy2;
		}
yy35:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy41;
		default:	goto yy2;
		}
yy36:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy37;
		default:	goto yy2;
		}
yy37:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy38;
		default:	goto yy2;
		}
yy38:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy39;
		default:	goto yy2;
		}
yy39:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy40;
		default:	goto yy2;
		}
yy40:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy11;
		default:	goto yy2;
		}
yy41:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy42;
		default:	goto yy2;
		}
yy42:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy43;
		default:	goto yy2;
		}
yy43:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy44;
		default:	goto yy2;
		}
yy44:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy45;
		default:	goto yy2;
		}
yy45:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy46;
		default:	goto yy2;
		}
yy46:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy47;
		default:	goto yy2;
		}
yy47:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy48;
		default:	goto yy2;
		}
yy48:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy49;
		default:	goto yy2;
		}
yy49:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy50;
		default:	goto yy2;
		}
yy50:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy51;
		default:	goto yy2;
		}
yy51:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy52;
		default:	goto yy2;
		}
yy52:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy53;
		default:	goto yy2;
		}
yy53:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy9;
		default:	goto yy2;
		}
yy54:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy55;
		default:	goto yy2;
		}
yy55:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy13;
		default:	goto yy2;
		}
yy56:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy57;
		default:	goto yy2;
		}
yy57:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy58;
		default:	goto yy2;
		}
yy58:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy59;
		default:	goto yy2;
		}
yy59:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy60;
		default:	goto yy2;
		}
yy60:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy61;
		default:	goto yy2;
		}
yy61:
		++opt;
		switch ((yych = *opt)) {
		case 'e':	goto yy15;
		default:	goto yy2;
		}
	}
#line 151 "Configuration.r2c"

									
re2c_other:
	// It's an unrecognized argument, try the parser arguments
	int ret;
	if ((ret = bcplus::Configuration::parseOption(token,opt2)) == Status::STAT_BAD_ARG) {
		// not recognized by the parser, assume it's an input file
		if (token[0] != '-' && boost::filesystem::is_regular_file(token)) {
			_input_files.push_back(new ReferencedPath(token));
			return Status::STAT_OK;
		} else if (token[0] != '-') {
			std::cerr << "ERROR: Could not find file \"" << token << "\"." << std::endl;
			return Status::STAT_FILE_NOT_FOUND;
		} return Status::STAT_BAD_ARG;
	} else return ret;

re2c_finish:
	// Recognized the argument... Validate

	switch (option) {
	case Option::INPUT_MODE:

		if (boost::iequals(val2, "c+") || boost::iequals(val2, "cplus")) {
			_input_lang = Input::CPLUS;
			return Status::STAT_OK;
		} else if (boost::iequals(val2, "bc")) {
			_input_lang = Input::BC;
			return Status::STAT_OK;
		} else if (boost::iequals(val2, "bc+") || boost::iequals(val2, "bcplus")) {
			_input_lang = Input::BCPLUS;
			return Status::STAT_OK;
		} else if (boost::iequals(val2, "mvpf")) {
			_input_lang = Input::MVPF;
			return Status::STAT_OK;
		} else {
			std::cerr << "ERROR: Bad value provided for command line option. Expected \"c+\", \"bc\", \"bc+\", or \"mvpf\" for argument \"" + val + "\"." << std::endl;
			return Status::STAT_BAD_ARG;
		}
	case Option::OUTPUT_MODE:
		if (boost::iequals(val2, "static")) {
			_output_lang = Output::STATIC;
			return Status::STAT_OK;
		} else if (boost::iequals(val2, "incremental")) {
			_output_lang = Output::INCREMENTAL;
			return Status::STAT_OK;
		} else {
			std::cerr << "ERROR: Bad value provided for command line option. Expected \"incremental\" or \"static\" for argument \"" + val + "\"." << std::endl;
			return Status::STAT_BAD_ARG;
		}
	case Option::NO_DOMAIN_ENFORCE:
		_enforceDomain = false;
		return Status::STAT_OK;	
	case Option::NO_ADD_DOMAIN_ENFORCE:
		_enforceAdditiveDomain = false;
		return Status::STAT_OK;	

	case Option::OUTPUT_FILE:
		if (boost::filesystem::native(val2)) {
			u::ref_ptr<const ReferencedPath> file = new ReferencedPath(val2);
			if (!outputFile(file)) {
				std::cerr << "ERROR: Could not open \"" << val2 << "\" for writing." << std::endl;
				return Status::STAT_FILE_NOT_FOUND;
			} else return Status::STAT_OK;
        } else {
            std::cerr << "ERROR: \"" << val2 << "\" is not a valid file path." << std::endl;
			return Status::STAT_BAD_ARG;
		}
	default:
		// this shouldn't happen
		std::cerr << "ERROR: INTERNAL ERROR: Received unknown option from option parser." << std::endl;
		return Status::STAT_BAD_ARG;
	};

	return Status::STAT_OK;

}


ReferencedString const* Configuration::ts(TS::type ts_class) const {
	if (_output_lang == Output::STATIC) {
		switch (ts_class) {
		case TS::STATIC:	return s_ts_static_static;
		case TS::DYNAMIC:	return s_ts_dynamic_static;
		case TS::ACTION:	return s_ts_action_static;
		case TS::MAXSTEP:	return s_ts_maxstep_static;
		case TS::ZERO:
		default:			return s_ts_zero;
		};

	} else {
		switch (ts_class) {
		case TS::STATIC:	return s_ts_static_incr;
		case TS::DYNAMIC:	return s_ts_dynamic_incr;
		case TS::ACTION:	return s_ts_action_incr;
		case TS::MAXSTEP:	return s_ts_maxstep_incr;
		case TS::ZERO:
		default:			return s_ts_zero;
		};

	}

}



}}



