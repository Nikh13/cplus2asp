#line 2 "flexer.cpp"
#line 25 "flexer.ll"
#include <string>
#include "parser.h"
#include "flexertypes.h"
#include "ltsglobals.h"

#ifdef flexIN_HEADER
/**
 * @file flexer.h
 * @brief Contains rules and definitions used by flex to create a lexical analyzer.
 */

extern YYSTYPE yyxlval;
extern YYLTYPE yyxlloc;

extern int flexerLineNum;
extern int flexerCharPos;
extern std::string flexerFileName;

extern flexerValueType flexeryylvalType;

/**
 * Outputs an error message to stderr.
 * Automatically adds file and line number information to the message.
 * @param msg - The specific message to add after the error header info.
 */
void flexerError(char const *msg);

/**
 * Resets the internal state of the flexer to initial values.
 */
void flexerReset();
#endif



#line 39 "flexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer flex_create_buffer
#define yy_delete_buffer flex_delete_buffer
#define yy_flex_debug flex_flex_debug
#define yy_init_buffer flex_init_buffer
#define yy_flush_buffer flex_flush_buffer
#define yy_load_buffer_state flex_load_buffer_state
#define yy_switch_to_buffer flex_switch_to_buffer
#define yyin flexin
#define yyleng flexleng
#define yylex flexlex
#define yylineno flexlineno
#define yyout flexout
#define yyrestart flexrestart
#define yytext flextext
#define yywrap flexwrap
#define yyalloc flexalloc
#define yyrealloc flexrealloc
#define yyfree flexfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE flexrestart(flexin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int flexleng;

extern FILE *flexin, *flexout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up flextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up flextext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via flexrestart()), so that the user can continue scanning by
	 * just pointing flexin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when flextext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int flexleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow flexwrap()'s to do buffer switches
 * instead of setting up a fresh flexin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void flexrestart (FILE *input_file  );
void flex_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE flex_create_buffer (FILE *file,int size  );
void flex_delete_buffer (YY_BUFFER_STATE b  );
void flex_flush_buffer (YY_BUFFER_STATE b  );
void flexpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void flexpop_buffer_state (void );

static void flexensure_buffer_stack (void );
static void flex_load_buffer_state (void );
static void flex_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER flex_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE flex_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE flex_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE flex_scan_bytes (yyconst char *bytes,int len  );

void *flexalloc (yy_size_t  );
void *flexrealloc (void *,yy_size_t  );
void flexfree (void *  );

#define yy_new_buffer flex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        flexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            flex_create_buffer(flexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        flexensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            flex_create_buffer(flexin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define flexwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *flexin = (FILE *) 0, *flexout = (FILE *) 0;

typedef int yy_state_type;

extern int flexlineno;

int flexlineno = 1;

extern char *flextext;
#define yytext_ptr flextext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up flextext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	flexleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 155
#define YY_END_OF_BUFFER 156
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[605] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  156,  154,   48,   47,   15,  135,    2,  123,
        9,  140,  141,  136,  125,  132,  105,  127,  154,  150,
      102,  133,  110,  121,  115,  137,  151,  151,  138,  154,
      139,  154,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  134,   48,   46,  135,  102,    4,    6,    5,
        7,    8,   13,   14,   11,   12,   19,   20,   17,   18,
       23,   24,   23,   39,   40,   39,   31,   32,   31,   35,

       36,   35,   27,   28,   27,   43,   44,   43,   48,  122,
      124,  104,  126,    1,  130,  131,  150,  100,  101,  107,
      108,  109,  118,  120,  117,  112,  114,  111,    0,  116,
      151,  151,  129,  128,  153,    0,  152,  152,  152,  152,
      152,  152,  152,  152,   67,  152,  152,  152,  152,  143,
      152,  152,  152,   77,  152,  152,  152,  152,  152,  152,
      152,  152,   90,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,   48,   45,    0,  100,    4,
        3,    7,   13,   10,   19,   16,   23,   23,   39,   39,
       31,   31,   35,   35,   27,   27,   43,   43,  103,  106,

      119,  113,  151,  153,  152,  142,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  145,  146,
      152,  152,  152,  148,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,    0,    0,
        0,   23,   23,   39,   31,   31,   35,   27,   27,   43,
       49,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,    0,  152,  152,  147,  152,
      152,  152,  152,  152,   55,  152,  152,  152,  152,  149,

      152,  152,   97,  152,    0,    0,   23,   39,   31,   35,
       27,   43,  152,  152,  152,   62,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  144,  152,  152,  152,  152,
      152,  152,   81,  152,  152,  152,  152,    0,   86,  152,
      152,  152,  152,   54,   92,  152,  152,   56,  152,  152,
      152,  152,   99,    0,    0,   23,   39,   31,   35,   27,
       43,  152,   59,  152,   63,  152,  152,   68,   69,  152,
      152,  152,  152,  152,  152,  152,   66,  152,  152,  152,
      152,   52,  152,  152,  152,    0,  152,  152,  152,  152,
      152,  152,  152,  152,   96,  152,    0,    0,   23,   39,

       31,   35,   27,   43,  152,  152,  152,  152,  152,  152,
      152,   73,  152,  152,  152,  152,   51,  152,  152,  152,
      152,   85,    0,  152,  152,   53,  152,  152,  152,  152,
      152,  152,    0,    0,   23,   39,   31,   35,   27,   43,
       58,  152,   65,  152,  152,  152,  152,  152,  152,  152,
      152,  152,   79,  152,  152,    0,  152,  152,  152,   93,
      152,  152,  152,  152,    0,    0,    0,    0,   23,   38,
       31,   34,   27,   43,  152,  152,   64,   50,  152,  152,
      152,   75,   98,  152,  152,  152,  152,  152,   82,  152,
      152,    0,  152,  152,  152,   57,    0,    0,    0,    0,

        0,    0,   23,   38,   31,   34,   27,   42,  152,  152,
       71,   72,  152,  152,   70,   78,  152,   84,  152,  152,
      152,    0,  152,  152,  152,   37,    0,   33,    0,    0,
        0,   22,   30,   27,   42,  152,  152,  152,  152,  152,
       83,  152,  152,    0,  152,  152,  152,   37,   41,   33,
        0,    0,    0,   26,  152,  152,  152,  152,  152,  152,
      152,    0,   94,  152,  152,   41,   21,    0,   29,  152,
      152,  152,  152,  152,   87,   89,    0,  152,  152,   25,
       60,   61,  152,  152,   80,    0,  152,  152,  152,   76,
       91,  152,  152,  152,  152,  152,  152,   95,  152,   74,

      152,  152,   88,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   18,   19,
       18,   18,   18,   18,   18,   18,   18,   20,   21,   22,
       23,   24,    1,   25,   26,   27,   27,   27,   27,   28,
       27,   27,   27,   27,   27,   27,   27,   29,   30,   31,
       27,   27,   27,   27,   27,   32,   27,   27,   27,   27,
       33,   34,   35,    1,   36,    1,   37,   38,   39,   40,

       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       61,   47,    1,   62,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[63] =
    {   0,
        1,    1,    2,    1,    3,    1,    1,    1,    4,    1,
        1,    5,    1,    1,    1,    1,    1,    6,    6,    1,
        1,    1,    1,    1,    1,    6,    6,    6,    6,    6,
        6,    6,    1,    7,    1,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    1
    } ;

static yyconst flex_int16_t yy_base[629] =
    {   0,
        0,   61,   63,   65,  739,  738,   67,   69,   66,   77,
      737,   70,  736,   80,  735,   71,  734,   81,  733,   76,
      732,   82,  734,  743,   90,  743,  743,  743,  743,  725,
      743,  743,  743,  743,  719,  743,  707,  714,   81,   86,
       82,  743,   84,   90,   86,   94,    0,  699,  743,   72,
      743,  692,   81,  666,   87,   65,   72,   90,    0,   93,
      689,   93,   98,  108,  674,  667,  678,  107,  668,  671,
      683,  675,  743,  151,  743,  680,  113,    0,  743,  700,
        0,  743,    0,  743,  743,  707,    0,  743,  743,  710,
        0,  743,  699,    0,  743,  672,    0,  743,  697,    0,

      743,  670,    0,  743,  695,    0,  743,  668,  155,  743,
      743,  684,  743,  743,  743,  743,  142,  743,  743,  683,
      743,  743,  743,  743,  743,  743,  743,  743,  684,  682,
        0,  674,  743,  743,    0,  667,    0,  114,  646,  661,
      644,  640,  643,  641,    0,  639,  645,   92,  644,    0,
      642,  644,  643,  651,  637,  123,  650,  106,  647,  112,
      129,  640,    0,  630,  643,  640,  654,  630,  631,  625,
      119,  621,  629,  622,  634,  172,  743,  633,  176,    0,
      743,    0,    0,  743,    0,  743,    0,  179,    0,  623,
        0,  180,    0,  622,    0,  184,    0,  621,  743,  743,

      743,  743,  639,    0,  630,    0,  623,  622,  625,  628,
      607,  609,  607,  606,  606,  622,  621,  614,  601,  607,
      603,  602,  123,  598,  610,  596,  146,  645,    0,    0,
      607,  596,  605,    0,  604,  589,  589,  597,  593,  581,
      587,  582,  581,  585,  594,  593,  588,  137,  589,  188,
      590,  191,  580,  589,  192,  578,  587,  195,  576,  585,
        0,  568,  572,  566,  567,  559,  570,  573,  576,  560,
      574,  557,  564,  571,  570,  559,  559,  553,  550,  565,
      549,  556,  552,  170,  546,  562,  546,  549,  538,  558,
      551,  534,  554,  536,    0,  544,  536,  545,  539,    0,

      533,  550,    0,  545,  540,  541,  543,  546,  541,  544,
      539,  542,  532,  526,  530,    0,  519,  528,  534,  149,
      163,  522,  522,  524,  518,    0,  508,  511,  510,  524,
      514,  517,    0,  506,  528,  519,  517,  520,    0,  517,
      514,  498,  515,    0,    0,  511,  510,    0,  511,  506,
      493,  509,    0,  496,  500,  508,  506,  506,  493,  504,
      497,  487,    0,  479,    0,  486,  478,    0,    0,  484,
      496,  491,  475,  491,  478,  483,    0,  482,  485,  484,
      487,    0,  486,  477,  469,  463,  462,  479,  462,  468,
      465,  486,  487,  476,    0,  463,  474,  459,  471,  452,

      458,  448,  462,  484,  452,  460,  457,  443,  442,  452,
      446,    0,  469,  437,  443,  454,    0,  441,  442,  441,
      432,    0,  432,  432,  428,    0,  423,  427,  434,  443,
      430,  438,  165,  442,  422,  424,  418,  437,  454,  424,
        0,  177,    0,  430,  415,  419,  412,  429,  411,  422,
      416,  407,  434,  404,  415,  418,  404,  401,  452,    0,
      398,  404,  402,  397,  396,  431,  392,  174,  396,  431,
      409,  429,  396,  391,  403,  393,    0,    0,  384,  384,
      388,  411,    0,  395,  380,  386,  392,  374,  743,  390,
      393,  390,  387,  376,  387,    0,  373,  376,  386,  367,

      402,  363,  403,    0,  402,    0,  365,  400,  359,  357,
        0,    0,  362,  373,    0,    0,  354,    0,  369,  359,
      370,  370,  356,  351,  353,  387,  350,  385,  348,  351,
      361,    0,    0,  381,    0,  351,  354,  340,  337,  351,
        0,  352,  342,  332,  332,  338,  336,  743,  369,  743,
      368,  331,  366,    0,  330,  330,  330,  333,  327,  315,
      334,  314,    0,  325,  316,  743,  743,  332,  743,  291,
      278,  292,  277,  268,    0,    0,  281,  267,  254,  743,
        0,    0,  260,  185,    0,  194,  186,  176,  184,    0,
      743,  172,  173,  168,  162,  178,  157,    0,  165,    0,

      173,  148,    0,  743,  236,  243,  250,  257,  264,  271,
      278,  285,  292,  299,  202,  200,  142,  306,  313,  320,
      326,  332,  339,  346,  353,  360,  367,  116
    } ;

static yyconst flex_int16_t yy_def[629] =
    {   0,
      604,    1,  605,  605,  606,  606,  607,  607,  608,  608,
      609,  609,  610,  610,  611,  611,  612,  612,  613,  613,
      614,  614,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  615,  615,  604,  604,
      604,  616,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  604,  604,  604,  604,  604,  618,  604,  604,
      619,  604,  620,  604,  604,  604,  621,  604,  604,  604,
      622,  604,  622,  623,  604,  623,  624,  604,  624,  625,

      604,  625,  626,  604,  626,  627,  604,  627,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      615,  615,  604,  604,  628,  616,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  604,  604,  604,  604,  618,
      604,  619,  620,  604,  621,  604,  622,  622,  623,  623,
      624,  624,  625,  625,  626,  626,  627,  627,  604,  604,

      604,  604,  615,  628,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  604,  604,
      604,  622,  622,  623,  624,  624,  625,  626,  626,  627,
      615,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  604,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,  617,  604,  604,  622,  623,  624,  625,
      626,  627,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  604,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  604,  604,  622,  623,  624,  625,  626,
      627,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  604,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  604,  604,  622,  623,

      624,  625,  626,  627,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  604,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  604,  604,  622,  623,  624,  625,  626,  627,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  604,  617,  617,  617,  617,
      617,  617,  617,  617,  604,  604,  604,  604,  622,  623,
      624,  625,  626,  627,  617,  617,  617,  617,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  604,  617,
      617,  604,  617,  617,  617,  617,  604,  604,  604,  604,

      604,  604,  622,  623,  624,  625,  626,  627,  617,  617,
      617,  617,  617,  617,  617,  617,  617,  617,  617,  617,
      617,  604,  617,  617,  617,  604,  604,  604,  604,  604,
      604,  622,  624,  626,  627,  617,  617,  617,  617,  617,
      617,  617,  617,  604,  617,  617,  617,  604,  604,  604,
      604,  604,  604,  626,  617,  617,  617,  617,  617,  617,
      617,  604,  617,  617,  617,  604,  604,  604,  604,  617,
      617,  617,  617,  617,  617,  617,  604,  617,  617,  604,
      617,  617,  617,  617,  617,  604,  617,  617,  617,  617,
      604,  617,  617,  617,  617,  617,  617,  617,  617,  617,

      617,  617,  617,    0,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604
    } ;

static yyconst flex_int16_t yy_nxt[806] =
    {   0,
       24,   25,   26,   25,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   40,   41,
       42,   43,   44,   45,   46,   47,   47,   47,   48,   47,
       47,   47,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   59,   59,   60,   59,   59,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   59,
       59,   73,   74,   75,   74,   79,   76,   79,   88,   84,
       89,   84,   92,   98,   80,   85,   80,   85,  104,   88,
       77,   89,   95,  101,  107,   96,  102,  108,  133,   93,
       99,  109,  114,  109,  134,  105,  118,  115,  120,   90,

       86,  119,   86,  117,  117,  148,  121,  122,  126,  127,
       90,  123,  124,  125,  116,  128,  129,  130,  138,  139,
      140,  204,  141,  146,  150,  149,  152,  179,  142,  158,
      215,  151,  119,  216,  154,  143,  144,  147,  160,  205,
      153,  155,  156,  159,  226,  162,  167,  137,  161,  163,
      168,  169,  176,  177,  176,  243,  109,  170,  109,  117,
      117,  223,  171,  224,  230,  227,  228,  232,  206,  231,
      279,  284,  244,  176,  177,  176,  280,  250,  233,  250,
      252,  255,  252,  255,  234,  258,  303,  258,  368,  250,
      304,  250,  252,  255,  252,  255,  258,  335,  258,  370,

      285,  465,  475,  369,  476,  135,  466,  131,  603,  336,
      500,  602,  467,  251,  601,  501,  371,  600,  599,  253,
      256,  502,  598,  597,  259,  251,  596,  595,  594,  593,
      592,  253,  256,  591,  590,  259,   78,   78,   78,   78,
       78,   78,   78,   81,   81,   81,   81,   81,   81,   81,
       83,   83,   83,   83,   83,   83,   83,   87,   87,   87,
       87,   87,   87,   87,   91,   91,   91,   91,   91,   91,
       91,   94,   94,   94,   94,   94,   94,   94,   97,   97,
       97,   97,   97,   97,   97,  100,  100,  100,  100,  100,
      100,  100,  103,  103,  103,  103,  103,  103,  103,  106,

      106,  106,  106,  106,  106,  106,  180,  589,  180,  180,
      588,  180,  180,  182,  587,  182,  182,  182,  182,  182,
      183,  586,  183,  585,  183,  183,  185,  584,  583,  185,
      185,  185,  187,  582,  187,  187,  187,  187,  187,  189,
      581,  189,  189,  189,  189,  189,  191,  580,  191,  191,
      191,  191,  191,  193,  579,  193,  193,  193,  193,  193,
      195,  578,  195,  195,  195,  195,  195,  197,  577,  197,
      197,  197,  197,  197,  576,  575,  574,  573,  572,  571,
      570,  569,  568,  567,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,

      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,
      530,  529,  528,  527,  526,  525,  524,  523,  522,  521,
      520,  519,  518,  517,  516,  515,  514,  513,  512,  511,
      510,  509,  508,  507,  506,  505,  504,  503,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  482,  481,  480,  479,  478,
      477,  474,  473,  472,  471,  470,  469,  468,  464,  463,
      462,  461,  460,  459,  458,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  444,  443,

      442,  441,  440,  439,  438,  437,  436,  435,  434,  433,
      432,  431,  430,  429,  428,  427,  426,  425,  424,  423,
      422,  421,  420,  419,  418,  417,  416,  415,  414,  413,
      412,  411,  410,  409,  408,  407,  406,  405,  404,  403,
      402,  401,  400,  399,  398,  397,  396,  395,  394,  393,
      392,  391,  390,  389,  388,  387,  386,  385,  384,  383,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  367,  366,  365,  364,  363,  362,  361,  360,  359,
      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,

      338,  337,  334,  333,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
      316,  315,  314,  313,  312,  311,  310,  309,  308,  307,
      306,  305,  302,  301,  300,  299,  298,  297,  296,  295,
      294,  293,  292,  291,  290,  289,  288,  287,  286,  283,
      282,  281,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  257,  254,  249,  248,  247,  246,  245,  242,  241,
      240,  239,  238,  237,  236,  235,  229,  225,  222,  221,
      220,  219,  218,  217,  214,  213,  212,  211,  210,  209,

      208,  207,  136,  203,  202,  201,  200,  199,  198,  196,
      194,  192,  190,  188,  186,  184,  181,  178,  175,  174,
      173,  172,  166,  165,  164,  157,  145,  136,  132,  113,
      112,  111,  110,  604,  107,  104,  101,   98,   95,   92,
       82,   82,   23,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604
    } ;

static yyconst flex_int16_t yy_chk[806] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    3,    2,    4,    9,    7,
        9,    8,   12,   16,    3,    7,    4,    8,   20,   10,
        2,   10,   14,   18,   22,   14,   18,   22,   50,   12,
       16,   25,   39,   25,   50,   20,   41,   39,   43,    9,

        7,   41,    8,   40,   40,   56,   43,   43,   45,   45,
       10,   44,   44,   44,   39,   46,   46,   46,   53,   53,
       53,  628,   53,   55,   57,   56,   58,   77,   53,   62,
      148,   57,   77,  148,   60,   53,   53,   55,   63,  138,
       58,   60,   60,   62,  158,   64,   68,  617,   63,   64,
       68,   68,   74,   74,   74,  171,  109,   68,  109,  117,
      117,  156,   68,  156,  160,  158,  158,  161,  138,  160,
      223,  227,  171,  176,  176,  176,  223,  179,  161,  179,
      188,  192,  188,  192,  161,  196,  248,  196,  320,  250,
      248,  250,  252,  255,  252,  255,  258,  284,  258,  321,

      227,  433,  442,  320,  442,  616,  433,  615,  602,  284,
      468,  601,  433,  179,  599,  468,  321,  597,  596,  188,
      192,  468,  595,  594,  196,  250,  593,  592,  589,  588,
      587,  252,  255,  586,  584,  258,  605,  605,  605,  605,
      605,  605,  605,  606,  606,  606,  606,  606,  606,  606,
      607,  607,  607,  607,  607,  607,  607,  608,  608,  608,
      608,  608,  608,  608,  609,  609,  609,  609,  609,  609,
      609,  610,  610,  610,  610,  610,  610,  610,  611,  611,
      611,  611,  611,  611,  611,  612,  612,  612,  612,  612,
      612,  612,  613,  613,  613,  613,  613,  613,  613,  614,

      614,  614,  614,  614,  614,  614,  618,  583,  618,  618,
      579,  618,  618,  619,  578,  619,  619,  619,  619,  619,
      620,  577,  620,  574,  620,  620,  621,  573,  572,  621,
      621,  621,  622,  571,  622,  622,  622,  622,  622,  623,
      570,  623,  623,  623,  623,  623,  624,  568,  624,  624,
      624,  624,  624,  625,  565,  625,  625,  625,  625,  625,
      626,  564,  626,  626,  626,  626,  626,  627,  562,  627,
      627,  627,  627,  627,  561,  560,  559,  558,  557,  556,
      555,  553,  552,  551,  549,  547,  546,  545,  544,  543,
      542,  540,  539,  538,  537,  536,  534,  531,  530,  529,

      528,  527,  526,  525,  524,  523,  522,  521,  520,  519,
      517,  514,  513,  510,  509,  508,  507,  505,  503,  502,
      501,  500,  499,  498,  497,  495,  494,  493,  492,  491,
      490,  488,  487,  486,  485,  484,  482,  481,  480,  479,
      476,  475,  474,  473,  472,  471,  470,  469,  467,  466,
      465,  464,  463,  462,  461,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  440,  439,  438,  437,  436,  435,  434,  432,  431,
      430,  429,  428,  427,  425,  424,  423,  421,  420,  419,
      418,  416,  415,  414,  413,  411,  410,  409,  408,  407,

      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  394,  393,  392,  391,  390,  389,  388,  387,  386,
      385,  384,  383,  381,  380,  379,  378,  376,  375,  374,
      373,  372,  371,  370,  367,  366,  364,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  352,  351,  350,  349,
      347,  346,  343,  342,  341,  340,  338,  337,  336,  335,
      334,  332,  331,  330,  329,  328,  327,  325,  324,  323,
      322,  319,  318,  317,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  304,  302,  301,  299,  298,
      297,  296,  294,  293,  292,  291,  290,  289,  288,  287,

      286,  285,  283,  282,  281,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  271,  270,  269,  268,  267,  266,
      265,  264,  263,  262,  260,  259,  257,  256,  254,  253,
      251,  249,  247,  246,  245,  244,  243,  242,  241,  240,
      239,  238,  237,  236,  235,  233,  232,  231,  228,  226,
      225,  224,  222,  221,  220,  219,  218,  217,  216,  215,
      214,  213,  212,  211,  210,  209,  208,  207,  205,  203,
      198,  194,  190,  178,  175,  174,  173,  172,  170,  169,
      168,  167,  166,  165,  164,  162,  159,  157,  155,  154,
      153,  152,  151,  149,  147,  146,  144,  143,  142,  141,

      140,  139,  136,  132,  130,  129,  120,  112,  108,  105,
      102,   99,   96,   93,   90,   86,   80,   76,   72,   71,
       70,   69,   67,   66,   65,   61,   54,   52,   48,   38,
       37,   35,   30,   23,   21,   19,   17,   15,   13,   11,
        6,    5,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  604,  604,  604,  604,  604,  604,  604,  604,  604,

      604,  604,  604,  604,  604
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int flex_flex_debug;
int flex_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *flextext;
#line 1 "flexer.ll"
/* 
 * Copyright (c) 2010-2013 <Joseph Babb, Michael Cassollary, Joohyung Lee>
 *
 * For information on how to contact the authors, please visit
 *	http://reasoning.eas.asu.edu/cplus2asp
 *
 * This file is part of the cplus2asp system.
 *
 * cplus2asp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cplus2asp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 60 "flexer.ll"
int flexerLineNum = 1; // Saves having to use flexlineno.
int flexerCharPos = 1; // Tracks current start character position to help populate yylloc.
std::string flexerFileName = ""; // Stores the file name (or equivalent identifier) for what flexin is pointing at.
flexerValueType flexeryylvalType;

void flexerError(char const *);

std::string tempStr = ""; // Used to collect string data in token rules.
YYLTYPE tempLoc; // Used to collect temporary location data for block text.

// Macro definitions to help set and return proper token values.
// Designed to be sent to intermediate "parser", hence the "yyx" prefix for the parser-specific variables (vs. standard "yy").
#define TOK_INT(value) \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.integer = value; \
flexeryylvalType = VT_INT;

#define TOK_IDENT \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.str = new std::string(flextext, flexleng); \
flexeryylvalType = VT_STR;

#define TOK_STR(strText) \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - strText.length(); \
yyxlloc.last_column = flexerCharPos - 1; \
yyxlval.str = new std::string(strText); \
flexeryylvalType = VT_STR;

#define TOK_COMMENT(strText,isComment) \
yyxlloc.first_line = tempLoc.first_line; \
yyxlloc.last_line = tempLoc.last_line; \
yyxlloc.first_column = tempLoc.first_column; \
yyxlloc.last_column = tempLoc.last_column; \
yyxlval.com = new Comment(); \
yyxlval.com->fileName = flexerFileName; \
yyxlval.com->contents = strText; \
yyxlval.com->loc->first_line = tempLoc.first_line; \
yyxlval.com->loc->last_line = tempLoc.last_line; \
yyxlval.com->loc->first_column = tempLoc.first_column; \
yyxlval.com->loc->last_column = tempLoc.last_column; \
yyxlval.com->isRealComment = isComment; \
flexeryylvalType = VT_COMMENT;

#define TOK_ASP(strText) \
yyxlloc.first_line = tempLoc.first_line; \
yyxlloc.last_line = tempLoc.last_line; \
yyxlloc.first_column = tempLoc.first_column; \
yyxlloc.last_column = tempLoc.last_column; \
yyxlval.asp = new ASPCode(); \
yyxlval.asp->fileName = flexerFileName; \
yyxlval.asp->contents = strText; \
yyxlval.asp->loc->first_line = tempLoc.first_line; \
yyxlval.asp->loc->last_line = tempLoc.last_line; \
yyxlval.asp->loc->first_column = tempLoc.first_column; \
yyxlval.asp->loc->last_column = tempLoc.last_column; \
flexeryylvalType = VT_ASP;

#define TOK_EOF \
yyxlloc.first_line = yyxlloc.last_line = flexerLineNum; \
yyxlloc.first_column = flexerCharPos - flexleng; \
yyxlloc.last_column = flexerCharPos - flexleng; \
yyxlval.integer = 0; \
flexeryylvalType = VT_INT;

// Set to always increment the character position tracker whenever a new token is identified.
#define YY_USER_ACTION \
flexerCharPos += flexleng;

// Used as a pretend return value when bad syntax is encountered.
#define BAD_TOKEN -1











#line 1009 "flexer.cpp"

#define INITIAL 0
#define BLK_SCOMMENT 1
#define LINE_COMMENT 2
#define SINGLE_QUOTE_STR 3
#define DOUBLE_QUOTE_STR 4
#define RAW_ASP_CP 5
#define RAW_ASP 6
#define RAW_LUA_CP 7
#define RAW_LUA 8
#define RAW_F2LP_CP 9
#define RAW_F2LP 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int flexlex_destroy (void );

int flexget_debug (void );

void flexset_debug (int debug_flag  );

YY_EXTRA_TYPE flexget_extra (void );

void flexset_extra (YY_EXTRA_TYPE user_defined  );

FILE *flexget_in (void );

void flexset_in  (FILE * in_str  );

FILE *flexget_out (void );

void flexset_out  (FILE * out_str  );

int flexget_leng (void );

char *flexget_text (void );

int flexget_lineno (void );

void flexset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int flexwrap (void );
#else
extern int flexwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( flextext, flexleng, 1, flexout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( flexin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( flexin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, flexin))==0 && ferror(flexin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(flexin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int flexlex (void);

#define YY_DECL int flexlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after flextext and flexleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( flexleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(flextext[flexleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 158 "flexer.ll"

#line 1209 "flexer.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! flexin )
			flexin = stdin;

		if ( ! flexout )
			flexout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			flexensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				flex_create_buffer(flexin,YY_BUF_SIZE );
		}

		flex_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of flextext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 605 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 743 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 159 "flexer.ll"
{
						// For the sake of everyone's sanity, we convert block comments
						// into line comments.
						tempStr = "% ";
						tempLoc.first_line = flexerLineNum;
						tempLoc.first_column = flexerCharPos - 2;
						BEGIN(BLK_SCOMMENT);
					}
	YY_BREAK
/* \%[^\n] */
case 2:
YY_RULE_SETUP
#line 168 "flexer.ll"
{
						tempStr = "";
						tempLoc.first_line = flexerLineNum;
						tempLoc.first_column = flexerCharPos - 1;
						BEGIN(LINE_COMMENT);
					}
	YY_BREAK
/* Grab comments of all shapes and sizes. */

case 3:
YY_RULE_SETUP
#line 176 "flexer.ll"
{	// Block comment finished, return its contents.
						tempLoc.last_line = flexerLineNum;
						tempLoc.last_column = flexerCharPos;
						TOK_COMMENT(tempStr,true);
						BEGIN(INITIAL);
						return T_COMMENT;
					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 183 "flexer.ll"
{	// Grab comment text in chunks.
						tempStr += flextext;
					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 186 "flexer.ll"
{	// Grab a lone "*".
						tempStr += flextext;
					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 189 "flexer.ll"
{	// Handle newlines in block comments.
						flexerLineNum++;
						flexerCharPos = 1;
						tempStr += "\n% ";
					}
	YY_BREAK


case 7:
YY_RULE_SETUP
#line 196 "flexer.ll"
{	// Grab anything that isn't a newline.
						tempStr += flextext;
					}
	YY_BREAK
case 8:
/* rule 8 can match eol */
YY_RULE_SETUP
#line 199 "flexer.ll"
{	// Line comment finished, return its contents and aknowledge the newline.
						tempLoc.last_line = flexerLineNum;
						tempLoc.last_column = flexerCharPos;
						TOK_COMMENT(tempStr,true);
						flexerLineNum++;
						flexerCharPos = 1;
						BEGIN(INITIAL);
						return T_COMMENT;
					}
	YY_BREAK

/*\%\n				{	// Handle single-character comment corner case.
						tempStr = "";
						tempLoc.first_line = flexerLineNum;
						tempLoc.first_column = flexerCharPos - 2;
						tempLoc.last_line = flexerLineNum;
						tempLoc.last_column = flexerCharPos - 1;
						TOK_COMMENT(tempStr,true);
						flexerLineNum++;
						flexerCharPos = 1;
						return T_COMMENT;
					}*/
/* Handle quoted strings gracefully. */
case 9:
YY_RULE_SETUP
#line 222 "flexer.ll"
{ BEGIN(SINGLE_QUOTE_STR); }
	YY_BREAK

case 10:
YY_RULE_SETUP
#line 224 "flexer.ll"
{ tempStr += "'"; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 225 "flexer.ll"
{TOK_STR(tempStr); BEGIN(INITIAL); return T_STRING;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 226 "flexer.ll"
{ tempStr += "\\"; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 227 "flexer.ll"
{ tempStr += flextext; BEGIN(INITIAL); return T_STRING;}//Currently a hack, need to find a way to get the string into a token properly
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 228 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unexpected line break in quoted string.");
						tempStr = "";
						flexerLineNum++;
						flexerCharPos = 1;
						BEGIN(INITIAL);
						return BAD_TOKEN;
					}
	YY_BREAK

case 15:
YY_RULE_SETUP
#line 238 "flexer.ll"
{ BEGIN(DOUBLE_QUOTE_STR); }
	YY_BREAK

case 16:
YY_RULE_SETUP
#line 240 "flexer.ll"
{ tempStr += "\""; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 241 "flexer.ll"
{ TOK_STR(tempStr); BEGIN(INITIAL); return T_STRING; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 242 "flexer.ll"
{ tempStr += "\\"; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 243 "flexer.ll"
{ tempStr += flextext; TOK_STR(tempStr); BEGIN(INITIAL); return T_STRING;}
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 244 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unexpected line break in quoted string.");
						tempStr = "";
						flexerLineNum++;
						flexerCharPos = 1;
						BEGIN(INITIAL);
						return BAD_TOKEN;
					}
	YY_BREAK

/* Intercept any raw ASP code blocks and pass them straight through. */
case 21:
YY_RULE_SETUP
#line 255 "flexer.ll"
{
									tempStr = "#begin_asp";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_ASP_CP);
								}
	YY_BREAK

case 22:
YY_RULE_SETUP
#line 262 "flexer.ll"
{	// ASP code block finished, return its contents.
									tempStr += "#end_asp.";
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 270 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 24:
/* rule 24 can match eol */
YY_RULE_SETUP
#line 273 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 25:
YY_RULE_SETUP
#line 280 "flexer.ll"
{
									tempStr = "";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_F2LP_CP);
								}
	YY_BREAK

case 26:
YY_RULE_SETUP
#line 287 "flexer.ll"
{	// ASP code block finished, return its contents.
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 294 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 28:
/* rule 28 can match eol */
YY_RULE_SETUP
#line 297 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 29:
YY_RULE_SETUP
#line 304 "flexer.ll"
{
									tempStr = "#begin_lua";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_LUA_CP);
								}
	YY_BREAK

case 30:
YY_RULE_SETUP
#line 312 "flexer.ll"
{	// LUA code block finished, return its contents.
									tempStr += "#end_lua.";
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 321 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 32:
/* rule 32 can match eol */
YY_RULE_SETUP
#line 324 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 33:
YY_RULE_SETUP
#line 331 "flexer.ll"
{	
									tempStr = "#begin_lua";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_LUA);
								}
	YY_BREAK

case 34:
YY_RULE_SETUP
#line 338 "flexer.ll"
{	// LUA code block finished, return its contents.
									tempStr += "#end_lua.";
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 347 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 350 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 37:
YY_RULE_SETUP
#line 357 "flexer.ll"
{
									tempStr = "#begin_asp";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_ASP);
								}
	YY_BREAK

case 38:
YY_RULE_SETUP
#line 364 "flexer.ll"
{	// ASP code block finished, return its contents.
									tempStr += "#end_asp.";
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 372 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 40:
/* rule 40 can match eol */
YY_RULE_SETUP
#line 375 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 41:
YY_RULE_SETUP
#line 382 "flexer.ll"
{
									tempStr = "";
									tempLoc.first_line = flexerLineNum;
									tempLoc.first_column = flexerCharPos - 2;
									BEGIN(RAW_F2LP);
								}
	YY_BREAK

case 42:
YY_RULE_SETUP
#line 389 "flexer.ll"
{	// ASP code block finished, return its contents.
									tempLoc.last_line = flexerLineNum;
									tempLoc.last_column = flexerCharPos;
									TOK_ASP(tempStr);
									BEGIN(INITIAL);
									return T_ASP;
								}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 396 "flexer.ll"
{	// Grab anything that isn't a newline.
									tempStr += flextext;
								}
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 399 "flexer.ll"
{	// Handle newlines in LUA code blocks.
									flexerLineNum++;
									flexerCharPos = 1;
									tempStr += "\n";
								}
	YY_BREAK

case 45:
*yy_cp = (yy_hold_char); /* undo effects of setting up flextext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up flextext again */
YY_RULE_SETUP
#line 406 "flexer.ll"
{	// Lines that are just whitespace get passed through as special comments.
						tempStr = flextext;
						//tempStr += "\n";
						tempLoc.first_line = flexerLineNum;
						tempLoc.first_column = flexerCharPos - flexleng;
						tempLoc.last_line = flexerLineNum;
						tempLoc.last_column = flexerCharPos - 1;
						TOK_COMMENT(tempStr,false);
						flexerLineNum++;
						flexerCharPos = 1;
						return T_COMMENT;
					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 418 "flexer.ll"
{	// Empty, blank lines get passed through as special comments.
						//tempStr = "\n";
						tempStr = "";
						tempLoc.first_line = flexerLineNum;
						tempLoc.first_column = flexerCharPos - flexleng;
						tempLoc.last_line = flexerLineNum;
						tempLoc.last_column = flexerCharPos - 1;
						TOK_COMMENT(tempStr,false);
						flexerLineNum++;
						flexerCharPos = 1;
						return T_COMMENT;
					}
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 430 "flexer.ll"
{	// Handle normal newlines.
						flexerLineNum++;
						flexerCharPos = 1;
					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 435 "flexer.ll"
// Eat any unclaimed whitespace.
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 437 "flexer.ll"
{ TOK_INT(T_NOOP); return T_NOOP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 438 "flexer.ll"
{ TOK_INT(T_CONSTANTS); return T_CONSTANTS; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 439 "flexer.ll"
{ TOK_INT(T_INCLUDE); return T_INCLUDE; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 440 "flexer.ll"
{ TOK_INT(T_MACROS); return T_MACROS; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 441 "flexer.ll"
{ TOK_INT(T_OBJECTS); return T_OBJECTS; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 442 "flexer.ll"
{ TOK_INT(T_QUERY); return T_QUERY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 443 "flexer.ll"
{ TOK_INT(T_SHOW); return T_SHOW; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 444 "flexer.ll"
{ TOK_INT(T_SORTS); return T_SORTS; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 445 "flexer.ll"
{ TOK_INT(T_VARIABLES); return T_VARIABLES; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 447 "flexer.ll"
{ TOK_INT(T_ABACTION); return T_ABACTION; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 448 "flexer.ll"
{ TOK_INT(T_ACTION); return T_ACTION; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 449 "flexer.ll"
{ TOK_INT(T_ADDITIVEACTION); return T_ADDITIVEACTION; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 450 "flexer.ll"
{ TOK_INT(T_ADDITIVEFLUENT); return T_ADDITIVEFLUENT; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 451 "flexer.ll"
{ TOK_INT(T_AFTER); return T_AFTER; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 452 "flexer.ll"
{ TOK_INT(T_ALWAYS); return T_ALWAYS; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 453 "flexer.ll"
{ TOK_INT(T_ATTRIBUTE); return T_ATTRIBUTE; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 454 "flexer.ll"
{ TOK_INT(T_ASSUMING); return T_ASSUMING; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 455 "flexer.ll"
{ TOK_INT(T_ASSUMING); return T_ASSUMING; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 456 "flexer.ll"
{ TOK_INT(T_BY); return T_BY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 457 "flexer.ll"
{ TOK_INT(T_CAUSED); return T_CAUSED; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 458 "flexer.ll"
{ TOK_INT(T_CAUSES); return T_CAUSES; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 459 "flexer.ll"
{ TOK_INT(T_IMPOSSIBLE); return T_IMPOSSIBLE; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 460 "flexer.ll"
{ TOK_INT(T_CONSTRAINT); return T_CONSTRAINT; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 461 "flexer.ll"
{ TOK_INT(T_DECREMENTS); return T_DECREMENTS; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 462 "flexer.ll"
{ TOK_INT(T_DEFAULT); return T_DEFAULT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 463 "flexer.ll"
{ TOK_INT(T_DYNAMICAB); return T_DYNAMICAB; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 464 "flexer.ll"
{ TOK_INT(T_EXOGENOUS); return T_EXOGENOUS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 465 "flexer.ll"
{ TOK_INT(T_EXOGENOUSACTION); return T_EXOGENOUSACTION; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 466 "flexer.ll"
{ TOK_INT(T_IF); return T_IF; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 467 "flexer.ll"
{ TOK_INT(T_INCREMENTS); return T_INCREMENTS; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 468 "flexer.ll"
{ TOK_INT(T_INERTIAL); return T_INERTIAL; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 469 "flexer.ll"
{ TOK_INT(T_INERTIALFLUENT); return T_INERTIALFLUENT; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 470 "flexer.ll"
{ TOK_INT(T_LABEL); return T_LABEL; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 471 "flexer.ll"
{ TOK_INT(T_MAY_CAUSE); return T_MAY_CAUSE; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 472 "flexer.ll"
{ TOK_INT(T_MAXADDITIVE); return T_MAXADDITIVE; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 473 "flexer.ll"
{ TOK_INT(T_MAXADDITIVE); return T_MAXADDITIVE; }		// maxAFValue is a synonym for maxAdditive
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 474 "flexer.ll"
{ TOK_INT(T_MAXSTEP); return T_MAXSTEP; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 475 "flexer.ll"
{ TOK_INT(T_NEVER); return T_NEVER; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 476 "flexer.ll"
{ TOK_INT(T_NOCONCURRENCY); return T_NOCONCURRENCY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 477 "flexer.ll"
{ TOK_INT(T_STRONG_NOCONCURRENCY); return T_STRONG_NOCONCURRENCY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 478 "flexer.ll"
{ TOK_INT(T_NONEXECUTABLE); return T_NONEXECUTABLE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 479 "flexer.ll"
{ TOK_INT(T_OF); return T_OF; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 480 "flexer.ll"
{ TOK_INT(T_POSSIBLY_CAUSED); return T_POSSIBLY_CAUSED; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 481 "flexer.ll"
{ TOK_INT(T_RIGID); return T_RIGID; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 482 "flexer.ll"
{ TOK_INT(T_SDFLUENT); return T_SDFLUENT; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 483 "flexer.ll"
{ TOK_INT(T_SIMPLEFLUENT); return T_SIMPLEFLUENT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 484 "flexer.ll"
{ TOK_INT(T_STATICAB); return T_STATICAB; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 485 "flexer.ll"
{ TOK_INT(T_UNLESS); return T_UNLESS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 486 "flexer.ll"
{ TOK_INT(T_WHEN); return T_WHEN; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 487 "flexer.ll"
{ TOK_INT(T_FOLLOWING); return T_FOLLOWING; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 488 "flexer.ll"
{ TOK_INT(T_WHERE); return T_WHERE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 490 "flexer.ll"
{ TOK_INT(T_COLON_DASH); return T_COLON_DASH; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 491 "flexer.ll"
{ TOK_INT(T_DBL_COLON); return T_DBL_COLON; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 492 "flexer.ll"
{ TOK_INT(T_COLON); return T_COLON; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 494 "flexer.ll"
{ TOK_INT(T_IMPL); return T_IMPL; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 495 "flexer.ll"
{ TOK_INT(T_ARROW_RDASH); return T_ARROW_RDASH; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 496 "flexer.ll"
{ TOK_INT(T_DASH); return T_DASH; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 498 "flexer.ll"
{ TOK_INT(T_EQUIV); return T_EQUIV; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 499 "flexer.ll"
{ TOK_INT(T_ARROW_LDASH); return T_ARROW_LDASH; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 500 "flexer.ll"
{ TOK_INT(T_ARROW_LEQ); return T_ARROW_LEQ; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 501 "flexer.ll"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 502 "flexer.ll"
{ TOK_INT(T_LTHAN); return T_LTHAN; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 503 "flexer.ll"
{ TOK_INT(T_LTHAN); return T_LTHAN; }			// less than in sorted order.
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 505 "flexer.ll"
{ TOK_INT(T_GTHAN_EQ); return T_GTHAN_EQ; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 506 "flexer.ll"
{ TOK_INT(T_GTHAN_EQ); return T_GTHAN_EQ; }		// greater than equal in sorted order.
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 507 "flexer.ll"
{ TOK_INT(T_DBL_GTHAN); return T_DBL_GTHAN; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 508 "flexer.ll"
{ TOK_INT(T_GTHAN); return T_GTHAN; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 509 "flexer.ll"
{ TOK_INT(T_GTHAN); return T_GTHAN; }			// greater than in sorted order.
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 511 "flexer.ll"
{ TOK_INT(T_ARROW_REQ); return T_ARROW_REQ; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 512 "flexer.ll"
{ TOK_INT(T_EQ_LTHAN); return T_EQ_LTHAN; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 513 "flexer.ll"
{ TOK_INT(T_EQ_LTHAN); return T_EQ_LTHAN; }		// less than equal in sorted order.
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 514 "flexer.ll"
{ TOK_INT(T_DBL_EQ); return T_DBL_EQ; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 515 "flexer.ll"
{ TOK_INT(T_EQ); return T_EQ; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 517 "flexer.ll"
{ TOK_INT(T_AMP); return T_AMP; }			// NOTE: we hide double ampersand from the parser.
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 518 "flexer.ll"
{ TOK_INT(T_AMP); return T_AMP; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 520 "flexer.ll"
{ TOK_INT(T_DBL_PLUS); return T_DBL_PLUS; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 521 "flexer.ll"
{ TOK_INT(T_PLUS); return T_PLUS; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 523 "flexer.ll"
{ TOK_INT(T_DBL_PERIOD); return T_DBL_PERIOD; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 524 "flexer.ll"
{ TOK_INT(T_PERIOD); return T_PERIOD; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 526 "flexer.ll"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 527 "flexer.ll"
{ TOK_INT(T_BIG_DISJ); return T_BIG_DISJ; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 529 "flexer.ll"
{ TOK_INT(T_INT_DIV); return T_INT_DIV; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 530 "flexer.ll"
{ TOK_INT(T_BIG_CONJ); return T_BIG_CONJ; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 532 "flexer.ll"
{ TOK_INT(T_COMMA); return T_COMMA; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 534 "flexer.ll"
{ TOK_INT(T_SEMICOLON); return T_SEMICOLON; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 536 "flexer.ll"
{ TOK_INT(T_PIPE); return T_PIPE; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 538 "flexer.ll"
{ TOK_INT(T_POUND); return T_POUND; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 540 "flexer.ll"
{ TOK_INT(T_STAR); return T_STAR; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 542 "flexer.ll"
{ TOK_INT(T_AT); return T_AT; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 544 "flexer.ll"
{ TOK_INT(T_BRACKET_L); return T_BRACKET_L; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 545 "flexer.ll"
{ TOK_INT(T_BRACKET_R); return T_BRACKET_R; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 547 "flexer.ll"
{ TOK_INT(T_PAREN_L); return T_PAREN_L; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 548 "flexer.ll"
{ TOK_INT(T_PAREN_R); return T_PAREN_R; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 550 "flexer.ll"
{ TOK_INT(T_ABS); return T_ABS; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 551 "flexer.ll"
{ TOK_INT(T_EQ); return T_EQ; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 552 "flexer.ll"
{ TOK_INT(T_FALSE); return T_FALSE; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 553 "flexer.ll"
{ TOK_INT(T_MOD); return T_MOD; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 554 "flexer.ll"
{ TOK_INT(T_NOT_EQ); return T_NOT_EQ; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 555 "flexer.ll"
{ TOK_INT(T_NONE); return T_NONE; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 556 "flexer.ll"
{ TOK_INT(T_NOT); return T_NOT; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 557 "flexer.ll"
{ TOK_INT(T_TRUE); return T_TRUE; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 559 "flexer.ll"
{ TOK_INT(atoi(flextext)); return T_INTEGER; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 560 "flexer.ll"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 561 "flexer.ll"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 562 "flexer.ll"
{ TOK_IDENT; return T_IDENTIFIER; }
	YY_BREAK
/* Match any other unrecognized character tokens, warn about them and stop. */
case 154:
YY_RULE_SETUP
#line 565 "flexer.ll"
{
						TOK_EOF;
						std::string badTokErrStr = "";
						badTokErrStr += "Unexpected token \"";
						badTokErrStr += flextext;
						badTokErrStr += "\".";
						flexerError(badTokErrStr.c_str());
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(BLK_SCOMMENT):
#line 575 "flexer.ll"
{
							TOK_EOF;
							flexerError("Unterminated \"/*\" block comment.");
							flexerLineNum = 1; // Reset flexerLineNum on EOF
							flexerCharPos = 1; // Also reset flexerCharPos
							return BAD_TOKEN;
						}
	YY_BREAK
case YY_STATE_EOF(SINGLE_QUOTE_STR):
#line 582 "flexer.ll"
{
								TOK_EOF;
								flexerError("Unterminated quoted string.");
								flexerLineNum = 1; // Reset flexerLineNum on EOF
								flexerCharPos = 1; // Also reset flexerCharPos
								return BAD_TOKEN;
							}
	YY_BREAK
case YY_STATE_EOF(DOUBLE_QUOTE_STR):
#line 589 "flexer.ll"
{
								TOK_EOF;
								flexerError("Unterminated quoted string.");
								flexerLineNum = 1; // Reset flexerLineNum on EOF
								flexerCharPos = 1; // Also reset flexerCharPos
								return BAD_TOKEN;
							}
	YY_BREAK
case YY_STATE_EOF(RAW_ASP):
#line 596 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated ASP code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(RAW_ASP_CP):
#line 603 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated ASP code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(RAW_LUA):
#line 610 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated LUA code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(RAW_LUA_CP):
#line 617 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated LUA code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(RAW_F2LP):
#line 624 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated F2LP code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(RAW_F2LP_CP):
#line 631 "flexer.ll"
{
						TOK_EOF;
						flexerError("Unterminated F2LP code block.");
						flexerLineNum = 1; // Reset flexerLineNum on EOF
						flexerCharPos = 1; // Also reset flexerCharPos
						return BAD_TOKEN;
					}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 638 "flexer.ll"
{
							TOK_EOF;
							flexerLineNum = 1; // Reset flexerLineNum on EOF
							flexerCharPos = 1; // Also reset flexerCharPos
							yyterminate();
						}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 645 "flexer.ll"
ECHO;
	YY_BREAK
#line 2409 "flexer.cpp"
case YY_STATE_EOF(LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed flexin at a new source and called
			 * flexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = flexin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( flexwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * flextext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of flexlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					flexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			flexrestart(flexin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) flexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 605 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 605 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 604);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					flexrestart(flexin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( flexwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve flextext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void flexrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        flexensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            flex_create_buffer(flexin,YY_BUF_SIZE );
	}

	flex_init_buffer(YY_CURRENT_BUFFER,input_file );
	flex_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void flex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		flexpop_buffer_state();
	 *		flexpush_buffer_state(new_buffer);
     */
	flexensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	flex_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (flexwrap()) processing, but the only time this flag
	 * is looked at is after flexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void flex_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	flexin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE flex_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) flexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in flex_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) flexalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in flex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	flex_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with flex_create_buffer()
 * 
 */
    void flex_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		flexfree((void *) b->yy_ch_buf  );

	flexfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a flexrestart() or at EOF.
 */
    static void flex_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	flex_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then flex_init_buffer was _probably_
     * called from flexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void flex_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		flex_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void flexpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	flexensure_buffer_stack();

	/* This block is copied from flex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from flex_switch_to_buffer. */
	flex_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void flexpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	flex_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		flex_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void flexensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)flexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in flexensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)flexrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in flexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE flex_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) flexalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in flex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	flex_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to flexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       flex_scan_bytes() instead.
 */
YY_BUFFER_STATE flex_scan_string (yyconst char * yystr )
{
    
	return flex_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to flexlex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE flex_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) flexalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in flex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = flex_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in flex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up flextext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		flextext[flexleng] = (yy_hold_char); \
		(yy_c_buf_p) = flextext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		flexleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int flexget_lineno  (void)
{
        
    return flexlineno;
}

/** Get the input stream.
 * 
 */
FILE *flexget_in  (void)
{
        return flexin;
}

/** Get the output stream.
 * 
 */
FILE *flexget_out  (void)
{
        return flexout;
}

/** Get the length of the current token.
 * 
 */
int flexget_leng  (void)
{
        return flexleng;
}

/** Get the current token.
 * 
 */

char *flexget_text  (void)
{
        return flextext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void flexset_lineno (int  line_number )
{
    
    flexlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see flex_switch_to_buffer
 */
void flexset_in (FILE *  in_str )
{
        flexin = in_str ;
}

void flexset_out (FILE *  out_str )
{
        flexout = out_str ;
}

int flexget_debug  (void)
{
        return flex_flex_debug;
}

void flexset_debug (int  bdebug )
{
        flex_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from flexlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    flexin = stdin;
    flexout = stdout;
#else
    flexin = (FILE *) 0;
    flexout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * flexlex_init()
     */
    return 0;
}

/* flexlex_destroy is for both reentrant and non-reentrant scanners. */
int flexlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		flex_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		flexpop_buffer_state();
	}

	/* Destroy the stack itself. */
	flexfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * flexlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *flexalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *flexrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void flexfree (void * ptr )
{
	free( (char *) ptr );	/* see flexrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 645 "flexer.ll"



// Outputs an error message to stderr.
void flexerError(char const *msg)
{
	std::cerr << "% Syntax Error, ";
	if(flexerFileName.length() > 0)
	{
		std::cerr << "File \"" << flexerFileName << "\", ";
	}
	std::cerr << "Line #" << flexerLineNum << "." << (flexerCharPos - flexleng) << ": " << msg << std::endl;
	return;
}

// Resets the state of the flexer.
void flexerReset()
{
	flexerLineNum = 1;
	flexerCharPos = 1;
	YY_FLUSH_BUFFER;
	BEGIN(INITIAL);
	return;
}

