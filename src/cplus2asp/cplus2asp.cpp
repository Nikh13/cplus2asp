/* Generated by re2c 0.13.5 on Tue Mar 19 20:30:52 2013 */
#line 1 "cplus2asp.re2c"
/* 
 * Copyright (c) 2010-2013 <Joseph Babb, Michael Cassollary, Joohyung Lee>
 *
 * For information on how to contact the authors, please visit
 *	http://reasoning.eas.asu.edu/cplus2asp
 *
 * This file is part of the cplus2asp system.
 *
 * cplus2asp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cplus2asp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** @file cplus2asp.cpp
 *  @brief Calls a tool chain of a translator, pre-processor, answer set solver, and post-processor on a CCalc program translated to ASP syntax.
 *  @author v3.0+ Joseph Babb (v2.3- Michael Casolary)
 *  @date 07/2011
 */

/* History:
 * v3.1 - Restructured the interactive interface for more user friendly interactions.
 * v3.0 - Restructured options parser. Added incremental translation functionality. Added automated detection and handling of additive/abnormal constants.
 * v2.3 - Implemented "-from[PROG]" and "-to[PROG]" options to give better control over running a partial tool chain.
 * v2.2.2 - Fixed bugs, "-notrans" wasn't shutting off the translator, "-gropt" and "-grsoopt" were mixed up. Set up system to track when tool chain programs have errors.
 * v2.2.1 - Fixed bug where program might get wrong values back from system calls (depending on OS).
 * v2.2 - cplus2asp now supports integrated grounder-solvers (like clingo), using the option -grso / --grounder-solver. Added automatic searching though queries with ranged maxsteps, with an option to switch to manual mode (-mm). Removed support for using piped tool chain commands. Added automated "non-interactive" mode option (-auto).
 * v2.1.2 - Tweaked status outputs to be compatible with benchmarking scripts, adjusted output messages to make more sense.
 * v2.1.1 - Renamed to cplus2asp, also renamed translator & standard file dependencies.
 * v2.1 - Skips translating any files with .f2lp or .lp extensions, not just if all files have those extensions.
 * v2.0.1 - Made file name output more friendly, ensured all steps of the tool chain work together properly.
 * v2.0 - Added ccalc2asp.bin (translator) to tool chain, including options to control its usage, and an ability to interactively guess critical constant values based on hints given in comments in the input files.
 * v1.3.5 - Fixed bug with post-processor not receiving options correctly.
 * v1.3.4 - Now passes input file to solver via standard in redirection.
 * v1.3.3 - Added option to use pipes instead of intermediate files to send data between tool chain programs (i.e., pre-v1.3 behavior).
 * v1.3.2 - Sends input files to the first tool in the tool chain that isn't disabled.
 * v1.3.1 - Fixed bug with spaces in path causing odd behavior and errors from tool chain.
 * v1.3 - Changed default post-processor to as2transition, changed default standard files to ccalc2asp_std.f2lp & ccalc2asp_additive.f2lp, changed argument handler to allow generic "const=value" arguments without needing "-c" before them, added intermediate file usage and auto-deletion, added options to pass command-line options directly to any of the tool chain programs.
 * v1.2 - Added option to un-include the standard translation files from the call to the pre-processor.
 * v1.1 - Added options to turn off programs in the tool chain.
 * v1.0 - First working version.
 */

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <list>
#include <climits> // for PATH_MAX, INT_MIN
#include <cstring>
#include <sys/types.h>
#include <unistd.h> // for realpath()
#include <errno.h>
#include <string.h>
#include <sys/wait.h>
#include <cstdlib>
#include <iomanip>

#include "Config.h"
#include "utils.h"
#include "Interpreter.h"

using namespace std;

#define VERSION_MAJOR 3
#define VERSION_MINOR 1
#define VERSION_REV 0

#ifndef PATH_MAX
  #define PATH_MAX 4096
#endif

/// An enum of the various command line options available.
enum Option {
	OPT_AUTO,
	OPT_BRIDGE,
	OPT_BRIDGE_OPTS,
	OPT_CONST,
	OPT_FRM_BRIDGE,
	OPT_FRM_GRD,
	OPT_FRM_PRE,
	OPT_FRM_POST,
	OPT_FROM_SO,
	OPT_FROM_TRAN,
	OPT_GRD,
	OPT_GRD_OPTS,
	OPT_JUST_GRD,
	OPT_JUST_PRE,
	OPT_JUST_POST,
	OPT_JUST_SO,
	OPT_JUST_TRANS,
	OPT_MAXSTEP,
	OPT_MINSTEP,
	OPT_MODE_SELECT,
	OPT_MODE_STATIC_AUTO,
	OPT_MODE_STATIC_MANUAL,
	OPT_MODE_INCREMENTAL,
	OPT_MODE_REACTIVE,
	OPT_NO_DEL,
	OPT_SHIFT,
	OPT_SHIFT_TRUE,
	OPT_SHIFT_FALSE,
	OPT_NO_STD,
	OPT_GRINGO_NONE_HACK,
	OPT_GRINGO_NONE_HACK_TRUE,
	OPT_GRINGO_NONE_HACK_FALSE,
	OPT_PORT_INTERNAL,
	OPT_PORT_EXTERNAL,
	OPT_POSTPROC,
	OPT_POSTPROC_OPTS,
	OPT_PREPROC,
	OPT_PREPROC_OPTS,
	OPT_SO,
	OPT_SO_OPTS,
	OPT_SO_WARN,
	OPT_TO_BRIDGE,
	OPT_TO_GRD,
	OPT_TO_PRE,
	OPT_TO_POST,
	OPT_TO_SO,
	OPT_TO_TRANS,
	OPT_TRANS,
	OPT_TRANS_OPTS,
	OPT_VERSION,
	OPT_HELP,
	OPT_QUERY,
	OPT_UNSUPPORTED,
	OPT_UNSUPPORTED_ADDITIVE,
	OPT_UNSUPPORTED_GRSO,
	OPT_UNSUPPORTED_MANUAL_MAXSTEP,
	OPT_UNKNOWN
};

/// Return codes from known tool chain programs indicating their final status.
enum StatusFlags
{
	TC_STAT_OK = 0,												///< Universal OK.
	TC_STAT_BG = 130,											///< Exit code indicating that the task is running in the background.
	TC_STAT_TOOLSKIPPED = INT_MIN,								///< Psuedo return code indicating that the tool execution was skipped for some reason.
	TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK = 0x80,			///< Bitmask to determine if cplus2asp detected abnormalities.
	TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK = 0x40,				///< Bitmask to determine if cplus2asp detected additive fluents.
	TC_STAT_SO_CLINGO_FOUND_SOLUTIONS = 10,						///< return code indicating that clingo (or other similar programs) found solutions.
	TC_STAT_SO_CLINGO_NO_SOLUTIONS = 20,						///< return code indicating that clingo (or other similar programs) failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS = 100,			///< return code indicating that as2transition failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS = 101		///< return code indicating that as2transition found solutions.
};

/// Status flags that can be returned by the options parser.
enum OptionStatus
{
	OPT_STAT_OK,			///< Everything is ok, continue execution.
	OPT_STAT_BAD_ARG,		///< One or more bad arguments was found. Stop execution.
	OPT_STAT_HELP,			///< The user requested the help message be displayed.
	OPT_STAT_VERSION		///< The user requested the version message be displayed.
};

/// Mode selection constants (for argument parsing)
#define ARG_MODE_STATIC_MANUAL  "static-manual"
#define ARG_MODE_STATIC_AUTO 	"static-auto"
#define ARG_MODE_INCREMENTAL	"incremental"
#define ARG_MODE_REACTIVE		"reactive"

/// Flags used to efficiently indicate that we're missing a constant.
#define CONST_MAXSTEP_MASK 		0x80
#define CONST_QUERY_MASK 		0x40
#define CONST_MAXADDITIVE_MASK  0x20
#define CONST_MINSTEP_MASK		0x10
#define CONST_EXT_PORT_MASK		0x08

/// The command used to exit the program during interactive prompts.
#define EXIT_CMD				"exit"

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt);

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out);

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out);

/**
 * Parses the provided command line arguments and sets the configurations appropriately.
 * @param argc The number of command line arguments provided to the program.
 * @param argv The command line arguments provided to the program.
 * @param[out] outConf The configurations object to write to.
 * @return A status flag indicating the results of the parsing.
 */
OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf);

/**
 * [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
 * @param config The program's configuration options.
 * @param[out] runconfig The run's configurations that will be updated.
 * @return True if the program should continue execution, false otherwise.
 */
bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig);

/**
 * Displays the queries which have been found.
 * @param config The program's configuration.
 * @param[out] output The output stream to write to.
 */
void showQueries(Config const& config, std::ostream& output);

/**
 * [interactive] Queries the user to select a value for the specified constant.
 * @param config The program's configuration options.
 * @param constant The constant's name to ask for.
 * @param defval The default value of the constant (Config::UNDEFINED for no default).
 * @return The selected value or Config::UNDEFINED to indicate the user wishes to exit the program.
 */
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defval = Config::UNDEFINED);

/**
 * Scans through all of the available input files in order to attempt to find the required constants.
 * @param config The configuration for the program. The list of queries in the configuration may be added to.
 * @param ranTranslator Whether the translator was ran.
 */
void scanFilesForConstants(Config& config, bool ranTranslator);

 /**
  * Scans through a provided input files in order to attempt to find the required constants.
  * @param config The configuration for the program. The list of queries in the configuration may be added to.
  * @param file The name of the file to scan.
  */
void scanForConstants(Config& config, std::string const& file);

/**
 * Runs the specified tool in the toolchain IF it is not disabled in the toolchain configuration.
 * @param config The configuration for the program.
 * @param tool The tool to run.
 * @param name The human readable name of the tool (for output purposes).
 * @param subconfig The sub configuration settings which will override the configuration settings.
 * @return The status code from running the program (TC_STAT_TOOLSKIPPED indicates that it did not run).
 */
int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig = NULL);

/**
 * Cleans up the intermediate files generated during program execution.
 * @param config The program's configuration.
 * @param ran An array of booleans of length Config::TC_LENGTH detailing which components have ran.
 */
void cleanup(Config const& config, bool const* ran);

/**
 * Attempts to echo the specified file to the specified output stream.
 * @param out The output stream to print to.
 * @param filename The file to open.
 * @return True if the file exists, false otherwise.
 */
bool echoFile(std::ostream& out, std::string const& filename);

int main(int argc, char** argv)
{

	string strEXEName = argv[0]; 						// Name of this executable.
	string tmpCmd;				 						// temporary command string.

	vector<string> vecConstants; 						// List of constants to pass to the grounder.
	int intSystemResult = 0; 							// Holds what comes back from system().
	

	Config config;										// The almighty system configuration.

	bool ran[Config::TC_LENGTH];						// Variable used to track which toolchain components we have ran so far.
	memset(ran, 0, Config::TC_LENGTH);


	bool blnFoundSolutions = false; 					// Set to true if the solver or post-processor indicates solutions were found.


	/***************************************************************************************************/
	/* Command Line Parsing */
	/***************************************************************************************************/
	
	// Process command-line arguments.
	debug("Parsing Options...", true);
	switch (parseCommandOptions(argc, argv, config)) {
	case OPT_STAT_OK:
		// We're good to go!
		break;
	case OPT_STAT_BAD_ARG:
		error("A problem occurred parsing program arguments. Exiting.", true, 0);
		showHelp(strEXEName, std::cout);
		cleanup(config, ran);
		nice_exit(EXT_CODE_BAD_ARGS,NULL);
		break;
	case OPT_STAT_HELP:
		showHelp(strEXEName, std::cout);
		cleanup(config, ran);
		nice_exit(EXT_CODE_GOOD,NULL);
		break;
	case OPT_STAT_VERSION:
		showVersion(strEXEName, std::cout);
		cleanup(config, ran);
		nice_exit(EXT_CODE_GOOD,NULL);
		break;
	}
	
	/***************************************************************************************************/
	/* Command Sanity Checks */
	/***************************************************************************************************/

	// Sanity checks...
	// Make sure that we aren't in manual mode with suppressed user interaction...
	if (config.mode() == Config::MODE_STATIC_MANUAL && config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {
		warning("Unable to manually advance the time step in with the '--auto' flag asserted. Switching to '%s' mode.", true, ARG_MODE_STATIC_AUTO);
		config.mode(Config::MODE_STATIC_AUTO);
	}

	// Ensure we are doing _something_
	bool doingSomething = false;
	for (Config::Toolchain tool = Config::TC_BEGIN; tool < Config::TC_END && !doingSomething; tool = (Config::Toolchain)(((int) tool) + 1)) {
		if (config.run(tool) && config.command(tool) != "")
			doingSomething = true;
	}
	if (!doingSomething) {
		// Everything is disabled.
		pragma("The toolchain is empty. Exiting.", true, EXT_CODE_GOOD);
	}

	debug("The command line options are sane.", true);
	/***************************************************************************************************/
	/* Translator */
	/***************************************************************************************************/

	
	// Run the translator if it's called for.
	debug("Beginning translator subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_TRANSLATOR, "translator")) != TC_STAT_TOOLSKIPPED) {

		// It Ran!
		ran[Config::TC_TRANSLATOR] = true;

		// check the status and make sure all is well...
		if((intSystemResult & ~TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK & ~TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK) != TC_STAT_OK)
		{
			cleanup(config, ran);
			error("An error occurred while executing the translator.",true, EXT_CODE_TOOLCHAIN_TRANS_ERR);
		}

		// Check for abnormalities...
		if (intSystemResult & TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK) {
			// The abnormality mask is set, meaning that there is at least one abnormality...

			if (!config.customMode()) {
				// They haven't specified a mode. Default to REACTIVE.
				pragma("One or more abnormality constants have been detected. Defaulting to the '%s' mode.", true, ARG_MODE_REACTIVE);
				config.mode(Config::MODE_REACTIVE);
			} else if (config.mode() == Config::MODE_STATIC_AUTO || config.mode() == Config::MODE_STATIC_MANUAL) {
				warning("One or more abnormality constants have been detected while operating in a static mode. This isn't recommended as many answer-sets will be generated.",true);
			}
		}

		if ((intSystemResult & TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK)) {
			// The additive mask is set, meaning that there is at least one additive constant...
			if (config.boolConfigOpt(Config::OPT_INCL_STD)) {
				pragma("One or more additive constants have been detected. Including the additive standard file.",true);
				config.boolConfigOpt(Config::OPT_INCL_ADDITIVE, true);
			} else {
				warning("One or more additive constants have been detected but the standard file has been suppressed. The additive standard file will not be included.",true);
			}
		}
	}

	/**********************************************************************************************************************/
	/* Pre-processor */
	/**********************************************************************************************************************/
	debug("Entering pre-processor subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_PREPROC, "pre-processor")) != TC_STAT_TOOLSKIPPED)  {
		// It Ran!
		ran[Config::TC_PREPROC] = true;

		// check the status and make sure all is well...
		if(intSystemResult != TC_STAT_OK)
		{
			cleanup(config, ran);
			error("An error occurred while executing the pre-processor.",true, EXT_CODE_TOOLCHAIN_PREPROC_ERR);
		}

	}

	/**********************************************************************************************************************/
	/* Intermediate Processing & Final Configuration */
	/**********************************************************************************************************************/

	debug("Translation done. Performing intermediate processing and final configuration.", true);


	// If any of the "critical" constants aren't defined and one of the
	// "active" tool chain programs is going to need the constants, try
	// finding "hint" comments in the input that we can use to fill in details.

	if (config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER)) {

		// We should determine the maxAdditive and port information outside of the interactive loop.
		// The query, maxstep, and minstep information can be determined from within.

		// If any of the "critical" constants aren't defined and one of the
		// "active" tool chain programs is going to need the constants, try
		// finding "hint" comments in the input that we can use to fill in details.

		unsigned int tmpVal;

		// Scan the files for the required constants. Hopefully one of them has it!
		// We should also scan the files in the event a query hasn't been specified (we'll need it!)
		if ((config.boolConfigOpt(Config::OPT_INCL_ADDITIVE) && !config.customConfigOpt(Config::OPT_MAXADDITIVE))
				|| config.intConfigOpt(Config::OPT_QUERY) == Config::UNDEFINED
				|| config.intConfigOpt(Config::OPT_MAXSTEP) == Config::UNDEFINED
				|| config.intConfigOpt(Config::OPT_MINSTEP) == Config::UNDEFINED)
			scanFilesForConstants(config, ran[Config::TC_TRANSLATOR]);

		// If all else fails, ask the user (unless we're not allowed to).
		if (config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED
				&& config.boolConfigOpt(Config::OPT_INCL_ADDITIVE)) {

			if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				if ((tmpVal = queryUserForConstant(config, "maxAdditive")) != Config::UNDEFINED) {
					// They gave us a maxAdditive value.
					config.intConfigOpt(Config::OPT_MAXADDITIVE, tmpVal);
				} else {
					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					cleanup(config, ran);
					nice_exit(0, "Exiting.");
				}
			} else {
				// we can't ask the user
				error("The maxAdditive constant was never defined and is required for program's containing additive constants. Exiting.", true, 0);
				cleanup(config, ran);
				nice_exit(EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}
		}

		if (config.run(Config::TC_SOLVER)) {
			if (config.intConfigOpt(Config::OPT_EXT_PORT) == Config::UNDEFINED
					&& config.mode() == Config::MODE_REACTIVE) {

				if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

					if ((tmpVal = queryUserForConstant(config, "external port")) != Config::UNDEFINED) {
						// They gave us a maxAdditive value.
						config.intConfigOpt(Config::OPT_EXT_PORT, tmpVal);
					} else {
						// They elected to exit instead of answer a simple question.
						// Life moves on but we do not.
						cleanup(config, ran);
						nice_exit(0, "Exiting.");
					}
				} else {
					// We can't ask the user.
					 error("The port to listen on for client connections is undefined and is required for the given running mode. Exiting.", true, 0);
					 cleanup(config, ran);
					 nice_exit(EXT_CODE_UNDEFINED_CONSTANTS, NULL);
				}
			}
		}

	}


	/************************************************************************************************/
	/* Outer Interactive Loop */
	/************************************************************************************************/

	Config::RunConfig runConfig;

	do {
		unsigned int maxmaxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		Config::Query const* activeQuery = NULL;

		runConfig.maxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		runConfig.minstep = config.intConfigOpt(Config::OPT_MINSTEP);


		runConfig.queryId = config.intConfigOpt(Config::OPT_QUERY);

		/********************************************************************************************/
		/*  Run configurations */
		/********************************************************************************************/

		// Query
		if ((config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER))
				&& (config.intConfigOpt(Config::OPT_QUERY) == Config::UNDEFINED
						|| config.intConfigOpt(Config::OPT_MINSTEP) == Config::UNDEFINED
						|| config.intConfigOpt(Config::OPT_MAXSTEP) == Config::UNDEFINED)){


			// Query...
			if (runConfig.queryId == Config::UNDEFINED && !config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				// The query hasn't been specified, try prompting them for it
				if (!queryUserForQuery(config, runConfig)) {

					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					cleanup(config, ran);
					nice_exit(0, "Exiting.");
				}

			} else if (runConfig.queryId == Config::UNDEFINED) {
				// Not specified and we can't prompt the for it.
				error("The query to execute was never specified. Exiting.", true, 0);
				cleanup(config, ran);
				nice_exit(EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}

			if ((activeQuery = config.query(runConfig.queryId)) == NULL) {
				error("The specified query was not found.", true, 0);
				cleanup(config, ran);
				nice_exit(EXT_CODE_INVALID_QUERY, NULL);
			}

			// Maxstep...
			// This can be solved if we have a query and it has a maxstep...
			if (runConfig.maxstep != Config::UNDEFINED) {
				maxmaxstep = runConfig.maxstep;
			} else if (activeQuery && activeQuery->maxstep != Config::UNDEFINED) {
				maxmaxstep = activeQuery->maxstep;
			} 

			// Minstep...
			// This can be solved if we have a query and it has a minstep...
			if (runConfig.minstep == Config::UNDEFINED) {

				if ( activeQuery && activeQuery->minstep != Config::UNDEFINED)
					runConfig.minstep = activeQuery->minstep;
				else
					runConfig.minstep = 0; // default to 0.
			}

		} else {
			// Look for the active query anyways.
			// Chances are we didn't end up parsing the files so we probably haven't seen it.
			activeQuery = config.query(runConfig.queryId);
		}


		/**********************************************************************************************************************/
		/* Interactive Loop */
		/**********************************************************************************************************************/


		/*********************************************************************************************/
		/* Initial Maxstep */
		/*********************************************************************************************/

		runConfig.maxstep = (config.mode() == Config::MODE_STATIC_AUTO || config.mode() == Config::MODE_STATIC_MANUAL)
				? runConfig.minstep
				: maxmaxstep;


		// Final sanity check on the min and max steps...
		if (runConfig.maxstep != Config::UNDEFINED && runConfig.minstep > runConfig.maxstep) {
			error("The maxstep value must be at least that of the minstep.", true, 0);
			cleanup(config, ran);
			nice_exit(EXT_CODE_INVALID_STEP_VALUE, NULL);
		}

		// run the rest of the tool chain at least once, but we may have to run it multiple times in one of the STATIC modes...
		debug("Entering primary interactive loop.", true);
		do
		{

			/*********************************************************************************************/
			/* Grounder */
			/*********************************************************************************************/
			debug("Entering grounder subroutine.", true);
			if ((intSystemResult = runTool(config, Config::TC_GROUNDER, "grounder", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
				// It Ran!
				ran[Config::TC_GROUNDER] = true;

				// check the status and make sure all is well...
				if(intSystemResult != TC_STAT_OK)
				{
					cleanup(config, ran);
					error("An error occurred while executing the grounder.",true, EXT_CODE_TOOLCHAIN_GROUNDER_ERR);
				}

			}

			/*********************************************************************************************/
			/* Header Logic */
			/*********************************************************************************************/

			// Print the solution header!
			if (config.run(Config::TC_SOLVER))
			{
				if (activeQuery)pragma("Running Query '%s'.", true, activeQuery->name.c_str());
				else pragma("Running Query '%d'.", true, runConfig.queryId);

				switch (config.mode()) {
				case Config::MODE_STATIC_AUTO:
				case Config::MODE_STATIC_MANUAL:
					if (runConfig.maxstep != Config::UNDEFINED)
						pragma("Maximum Step = '%d'.", true, runConfig.maxstep);
					else
						pragma("No Maximum Step.", true);
					break;

				case Config::MODE_INCREMENTAL:
				case Config::MODE_REACTIVE:
					// We can guarantee that at this point the minimum step is defined.
					if (runConfig.maxstep != Config::UNDEFINED)
						pragma("Minimum Step = '%d', Maximum Step = '%d'.", true, runConfig.minstep, runConfig.maxstep);
					else
						pragma("Minimum Step = '%d', No Maximum Step.", true, runConfig.minstep);
					break;

				default:
					break;
				}

				if (runConfig.numSoln == 0)
					pragma("Searching for all solutions.", true);
				else
					pragma("Searching for %d solutions.", true, runConfig.numSoln );
			}

			/*********************************************************************************************/
			/* Solver */
			/*********************************************************************************************/
			debug("Entering solver subroutine.", true);
			if ((intSystemResult = runTool(config, Config::TC_SOLVER, "solver", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
				// It Ran!
				ran[Config::TC_SOLVER] = true;
				bool ok = true;

				// check the status and make sure all is well...
				if (intSystemResult == TC_STAT_SO_CLINGO_FOUND_SOLUTIONS) {
					// Looks like we have solutions... YAY!
					blnFoundSolutions = true;
				} else if (intSystemResult == TC_STAT_SO_CLINGO_NO_SOLUTIONS) {
					pragma("No solutions found.", true);
				} else if (intSystemResult == TC_STAT_BG) {
					// The solver was launched in the background.
				} else if(intSystemResult != TC_STAT_OK) {
					ok = false;
				}

				if (!ok || !config.boolConfigOpt(Config::OPT_SQUELCH_SOLVER)) {
					// echo the warnings, if any
					if (!echoFile(std::cerr, config.intSoErrFile())) {
						error("Cannot display solver errors. The error file does not exist.", true, 0);
					}
				}

				if (!ok) {
					// something went wrong
					cleanup(config, ran);
					error("An error occurred while executing the solver.",true, EXT_CODE_TOOLCHAIN_SOLVER_ERR);
				}

			}

			/*********************************************************************************************/
			/* Post-processor */
			/*********************************************************************************************/
			// The post-processor is only run outside of reactive mode
			debug("Entering post-processor subroutine.", true);
			if (config.mode() != Config::MODE_REACTIVE) {
				if ((intSystemResult = runTool(config, Config::TC_POSTPROC, "post-processor", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					// It Ran!
					ran[Config::TC_POSTPROC] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS) {
						// Looks like we have solutions... YAY!
						blnFoundSolutions = true;
					} else if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS) {

					} else if(intSystemResult != TC_STAT_OK) {
						cleanup(config, ran);
						error("An error occurred while executing the post-processor.",true, EXT_CODE_TOOLCHAIN_POSTPROC_ERR);
					}
				}
			}

			/*********************************************************************************************/
			/* Reactive Bridge */
			/*********************************************************************************************/

			// The reactive bridge is run inside of reactive mode.
			// NOTE: If we really are in reactive mode then they solver is still running the background!
			debug("Entering reactive bridge subroutine.", true);
			if (config.mode() == Config::MODE_REACTIVE) {
				if ((intSystemResult = runTool(config, Config::TC_REACTIVE_BRIDGE, "reactive bridge", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					// It Ran!
					ran[Config::TC_REACTIVE_BRIDGE] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_BG) {
						// The reactive bridge was launched in the background.
					} else if(intSystemResult != TC_STAT_OK) {
						cleanup(config, ran);
						error("An error occurred while executing the reactive bridge.",true, EXT_CODE_TOOLCHAIN_REACTIVE_BRIDGE_ERR);
					}
				}
			}

			/*********************************************************************************************/
			/* Maxstep Increment */
			/*********************************************************************************************/

			if (config.mode() == Config::MODE_STATIC_MANUAL) {
				runConfig.maxstep = queryUserForConstant(config, "maximum step", runConfig.maxstep+1);
			} else if (config.mode() == Config::MODE_STATIC_AUTO) {
				runConfig.maxstep++;
			}

		} while(
				// The loop should continue as long as we are:
				// * Running in static-manual mode and the user hasn't told us to stop, or
				// * Running in static-auto mode, we haven't reached the maximum step , and we haven't found solutions.
				(config.mode() == Config::MODE_STATIC_MANUAL && runConfig.maxstep != Config::UNDEFINED)
				|| (config.mode() == Config::MODE_STATIC_AUTO
						&& runConfig.maxstep != Config::UNDEFINED
						&& (maxmaxstep == Config::UNDEFINED || runConfig.maxstep <= maxmaxstep)
						&& !blnFoundSolutions)
				);



	} while
			// The outer loop should run as long as:
			// * We're not suppressing user interaction,
			// * We are running what looks like a grounder/solver,
			// * The user has not selected a query on the command line, and
			// * The user has not selected to exit the outer loop.
			(!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)
			&& (config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER))
			&& config.intConfigOpt(Config::OPT_QUERY) == Config::UNDEFINED);

	debug("Exiting interactive loop.", true);
	/**********************************************************************************************************************/
	/* Final Cleanup */
	/**********************************************************************************************************************/

	cleanup(config, ran);

	return 0;
}

OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf) {
	// Process command-line arguments.

	char const* tmpptr;
	size_t tmpoffset;
	char tmpPath[PATH_MAX];
	std::list<char const*> rawInputList;
	std::pair<unsigned int, unsigned int> steps;
	unsigned int tmpInt;
	Config::Mode mode;




	for(int i = 1; i < argc; i++)
	{
		debug("Parsing option '%s'.", true, argv[i]);
		switch (parseOption(argv[i])) {

		case OPT_AUTO:
			// This is supposed to be an automated run, don't ask the user for anything.
			if (outConf.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION, true)) {
				warning("Detected redefinition of option '%s'. Continuing with value '%s'",true,argv[i],"true");
			}
			break;

		case OPT_BRIDGE:
			// They are specifying a specific command for the bridge.

			if (++i < argc) {
				if (outConf.command(Config::TC_REACTIVE_BRIDGE, argv[i])) {
					warning("Detected redefinition of bridge command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_BRIDGE_OPTS:

			if (++i < argc) {
				if (outConf.opts(Config::TC_REACTIVE_BRIDGE, argv[i])) {
					warning("Detected redefinition of bridge command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;
		case OPT_CONST:
			// Constant Declaration...
			if(++i < argc && (tmpptr = strchr(argv[i],'=')) != NULL)
			{
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}

			} else {   // Set up for a constant without actually giving one, bad command line.
				error("Expected a constant definition of the form 'constant=value' after option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_FRM_BRIDGE:
			pragma("Running the toolchain from the reactive bridge is discouraged.",true);
			if (outConf.setRunFrom(Config::TC_REACTIVE_BRIDGE)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_GRD:
			// Don't run anything before the grounder.
			if (outConf.setRunFrom(Config::TC_GROUNDER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_PRE:
			// Don't run anything before the pre-processor.
			if (outConf.setRunFrom(Config::TC_PREPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_POST:
			// Don't call anything before the post-processor (equivalent to "-justpost")
			if (outConf.setRunFrom(Config::TC_POSTPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_SO:
			// Don't run anything before the solver.
			if (outConf.setRunFrom(Config::TC_SOLVER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_TRAN:
			// Don't call anything before the translator (basically a no-op option).
			if (outConf.setRunFrom(Config::TC_TRANSLATOR)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_GRD:
			// They're giving us a specific executable to use as the grounder instead of the default.
			// Make sure a second argument follows, and save the new grounder.
			if (++i < argc) {
				if (outConf.command(Config::TC_GROUNDER, argv[i])) {
					warning("Detected redefinition of grounder command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_GRD_OPTS:
			if (++i < argc) {
				if (outConf.opts(Config::TC_GROUNDER, argv[i])) {
					warning("Detected redefinition of grounder command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_GRINGO_NONE_HACK:
			// Specifying a none_hack value.
			if (++i < argc) {

				bool val;
				if (!strcmp(argv[i], "true")) {
					val = true;
				} else if (!strcmp(argv[i], "false")) {
					val = false;
				} else {
					error("Expected a boolean value 'true' or 'false' following the '%s' flag. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

				if (outConf.boolConfigOpt(Config::OPT_NONE_HACK, val)) {
					warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
				}

			} else {
				// setup for a command but they didn't deliver.
				error("Expected a boolean value 'true' or 'false following the '%s' flag. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_GRINGO_NONE_HACK_TRUE:
			// They want us to treat none as an integral type to circumvent a
			// bug in gringo that prevents grounding of certain domains otherwise.
			if (outConf.boolConfigOpt(Config::OPT_NONE_HACK, true)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;
			
		case OPT_GRINGO_NONE_HACK_FALSE:
			// They want us NOT to treat none as an integral type to circumvent a
			// bug in gringo that prevents grounding of certain domains otherwise.
			if (outConf.boolConfigOpt(Config::OPT_NONE_HACK, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;


		case OPT_JUST_GRD:
			// Just call the grounder program, no others.
			if (outConf.setOnlyRun(Config::TC_GROUNDER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_PRE:
			// Just call the preprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_PREPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_POST:
			// Just call the postprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_POSTPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_SO:
			// Just call the solver program, no others.
			if (outConf.setOnlyRun(Config::TC_SOLVER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_TRANS:
			// Just call the translator program, no others.
			if (outConf.setOnlyRun(Config::TC_TRANSLATOR)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_MAXSTEP:

			if (++i >= argc) {
				error("Expected a maximum step following option '%s'. Exiting.",true,0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			} else if ((steps = Config::parseMaxstep(argv[i])).second == Config::UNDEFINED) {
				error("'%s' is not a valid step value. Exiting.",true,0, argv[i]);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MAXSTEP, steps.second)
					|| (steps.first != Config::UNDEFINED && outConf.intConfigOpt(Config::OPT_MINSTEP, steps.first)))
			{
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
			}
			break;

		case OPT_MINSTEP:

			if (++i >= argc) {
				error("Expected a minimum step following option '%s'. Exiting.",true,0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			} else if (!from_string(tmpInt, argv[i])) {
				error("'%s' is not a valid step value. Exiting.",true,0, argv[i]);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MINSTEP, tmpInt)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
			}

			break;

		case OPT_MODE_SELECT:

			if (++i < argc) {

				if (!strcmp(argv[i],ARG_MODE_STATIC_MANUAL)) {
					mode = Config::MODE_STATIC_MANUAL;
				} else if (!strcmp(argv[i],ARG_MODE_STATIC_AUTO)) {
					mode = Config::MODE_STATIC_AUTO;
				} else if (!strcmp(argv[i],ARG_MODE_INCREMENTAL)) {
					mode = Config::MODE_INCREMENTAL;
				} else if (!strcmp(argv[i],ARG_MODE_REACTIVE)) {
					mode = Config::MODE_INCREMENTAL;
				} else {
					error("Expected a mode option (one of '%s', '%s', '%s', or '%s') following option '%s'. Exiting.",true,0,
							ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, OPT_MODE_REACTIVE, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

				if (outConf.mode(mode)) {
					warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, argv[i]);
				}

			} else {
				error("Expected a mode option (one of '%s', '%s', '%s', or '%s') following option '%s'. Exiting.",true,0,
						ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, ARG_MODE_REACTIVE, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}

			break;

		case OPT_MODE_STATIC_AUTO:
			if (outConf.mode(Config::MODE_STATIC_AUTO)) {
				warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, ARG_MODE_STATIC_AUTO);
			}
			break;

		case OPT_MODE_STATIC_MANUAL:
			if (outConf.mode(Config::MODE_STATIC_MANUAL)) {
				warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, ARG_MODE_STATIC_MANUAL);
			}
			break;
		case OPT_MODE_INCREMENTAL:
			if (outConf.mode(Config::MODE_INCREMENTAL)) {
				warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, ARG_MODE_INCREMENTAL);
			}
			break;

		case OPT_MODE_REACTIVE:
			if (outConf.mode(Config::MODE_REACTIVE)) {
				warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, ARG_MODE_REACTIVE);
			}
			break;

		case OPT_NO_DEL:
			// Shut off deleting intermediate files.
			if (outConf.boolConfigOpt(Config::OPT_DISCARD_INTERMEDIATE, false)
					|/*non-short-circuiting*/ outConf.boolConfigOpt(Config::OPT_DISCARD_F2LP, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;


		case OPT_SHIFT:

			// Specifying a shift value.
			if (++i < argc) {

				bool val;
				if (!strcmp(argv[i], "true")) {
					val = true;
				} else if (!strcmp(argv[i], "false")) {
					val = false;
				} else {
					error("Expected a boolean value 'true' or 'false' following the '%s' flag. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

				if (outConf.boolConfigOpt(Config::OPT_SHIFT, val)) {
					warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
				}

			} else {
				// setup for a command but they didn't deliver.
				error("Expected a boolean value 'true' or 'false following the '%s' flag. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_SHIFT_FALSE:
			// Allow the solver to shift disjunction into the body.
			if (outConf.boolConfigOpt(Config::OPT_SHIFT, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_SHIFT_TRUE:
			// Do not allow the solve to shift disjunction into the body.
			if (outConf.boolConfigOpt(Config::OPT_SHIFT, true)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_NO_STD:
			// Don't include standard files in the final product.
			if (outConf.boolConfigOpt(Config::OPT_INCL_STD, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_PORT_EXTERNAL:
			// Set the external port to use in reactive mode
			int tmp;

			if (++i >= argc) {
				error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			} else if (!from_string(tmp, argv[i]) || tmp < 1) {
				error("'%s' is not a valid port. Exiting.",true,0, argv[i]);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.boolConfigOpt(Config::OPT_EXT_PORT, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
			}

			break;

		case OPT_PORT_INTERNAL:
			// Set the internal port to use in reactive mode
			if (++i >= argc) {
				error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			} else if (!from_string(tmp, argv[i]) || tmp < 1) {
				error("'%s' is not a valid port. Exiting.",true,0, argv[i]);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.boolConfigOpt(Config::OPT_EXT_PORT, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
			}

			break;

		case OPT_POSTPROC:
			// They're giving us a specific executable to use as the post-processor instead of the default.
			// Make sure a second argument follows, and save the new post-processor.
			if (++i < argc) {
				if (outConf.command(Config::TC_POSTPROC, argv[i])) {
					warning("Detected redefinition of post-processor command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_POSTPROC_OPTS:
			if (++i < argc) {
				if (outConf.opts(Config::TC_POSTPROC, argv[i])) {
					warning("Detected redefinition of post-processor command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_PREPROC:
			// They're giving us a specific executable to use as the pre-processor instead of the default.
			// Make sure a second argument follows, and save the new pre-processor.
			if (++i < argc) {
				if (outConf.command(Config::TC_PREPROC, argv[i])) {
					warning("Detected redefinition of pre-processor command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_PREPROC_OPTS:
			if (++i < argc) {
				if (outConf.opts(Config::TC_PREPROC, argv[i])) {
					warning("Detected redefinition of pre-processor command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;


		case OPT_SO:
			// They're giving us a specific executable to use as the solver instead of the default.
			// Make sure a second argument follows, and save the new solver.
			if (++i < argc) {
				if (outConf.command(Config::TC_SOLVER, argv[i])) {
					warning("Detected redefinition of solver command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_SO_OPTS:
			if (++i < argc) {
				if (outConf.opts(Config::TC_SOLVER, argv[i])) {
					warning("Detected redefinition of solver command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_SO_WARN:
			// They want to see the warnings issued by the solver.
			if (outConf.boolConfigOpt(Config::OPT_SQUELCH_SOLVER, false)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_BRIDGE:
			if (outConf.setRunTo(Config::TC_REACTIVE_BRIDGE)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_GRD:
			// Shut off deleting intermediate files.
			if (outConf.setRunTo(Config::TC_GROUNDER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_PRE:
			// Run everything up to the pre-processor.
			if (outConf.setRunTo(Config::TC_PREPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_POST:
			// Run everything up to the post-processor...
			if (outConf.setRunTo(Config::TC_POSTPROC)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_SO:
			// Run everything up to the solver...
			if (outConf.setRunTo(Config::TC_SOLVER)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_TRANS:
			// Run everything up to the translator...
			if (outConf.setRunTo(Config::TC_TRANSLATOR)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TRANS:
			// They're giving us a specific executable to use as the translator instead of the default.
			// Make sure a second argument follows, and save the new grounder.
			if (++i < argc) {
				if (outConf.command(Config::TC_TRANSLATOR, argv[i])) {
					warning("Detected redefinition of translator command. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for a command but they didn't deliver.
				error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_TRANS_OPTS:
			if (++i < argc) {
				if (outConf.opts(Config::TC_TRANSLATOR, argv[i])) {
					warning("Detected redefinition of translator command options. Continuing with value '%s'",true,argv[i]);
				}
			} else {
				// setup for options but they didn't deliver
				error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_VERSION:
			return OPT_STAT_VERSION;

		case OPT_HELP:
			return OPT_STAT_HELP;

		case OPT_QUERY:
			if (++i >= argc) {
				error("Expected a query identifier following option '%s'. Exiting.",true,0, argv[i-1]);
				return OPT_STAT_BAD_ARG;
			} else if (!strcmp(argv[i], CONST_QUERY_NONE)) {
				if (outConf.intConfigOpt(Config::OPT_QUERY, Config::NO_QUERY)) {
					warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
				}
			} else if (!strcmp(argv[i], CONST_QUERY_STATES)) {
				if (outConf.intConfigOpt(Config::OPT_QUERY, Config::STATES_QUERY)) {
					warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
				}
			} else if (!strcmp(argv[i], CONST_QUERY_TRANSITIONS)) {
				if (outConf.intConfigOpt(Config::OPT_QUERY, Config::TRANSITIONS_QUERY)) {
					warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
				}
			} else if (!from_string(tmpInt, argv[i])) {
				error("'%s' is not a valid query identifier. Exiting.",true,0, argv[i]);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_QUERY, tmpInt)) {
				warning("The option '%s' has overridden one or more previous choices.",true,argv[i-1]);
			}
			break;

		case OPT_UNSUPPORTED:
			// Whatever this is, it's unsupported.
			warning("The '%s' option is no longer supported. It will be ignored.",true);
			break;

		case OPT_UNSUPPORTED_ADDITIVE:
			// They want us to include the additive standard file...
			// This option is deprecated and shouldn't be used.
			warning("The '%s' option is no longer supported. The additive file will be included automatically if additive constants are detected.",true,argv[i]);
			break;

		case OPT_UNSUPPORTED_GRSO:
			// They did something involving the explicit grounder/solver
			// We no longer support the explicit grounder/solver calls
			error("The '%s' option is no longer supported. We no longer use a dedicated grounder/solver in the toolchain. Please make use of the solver component instead.",true,0,argv[i]);

			// We probably aren't going to do what they want, go ahead and signal that something went wrong
			return OPT_STAT_BAD_ARG;

		case OPT_UNSUPPORTED_MANUAL_MAXSTEP:
			// Manually advance the maximum step of the program query
			error("The '%s' option is no longer supported. Please use that '--mode=static-manual' option instead.",true,0,argv[i]);
			break;

		case OPT_UNKNOWN:
			debug("The option isn't a recognized flag. Checking other possibilities.", true);
			if (argv[i][0] == '-')
			{
				// It appears to be a bad argument...
				error("Found an unrecognized argument '%s'. Exiting.",true,0,argv[i]);
				return OPT_STAT_BAD_ARG;
			}

			// If there's no "header" on the argument, it's either a constant declaration, an input file, or the number of solutions.
			else if(isInteger(argv[i]))
			{	// It looks like a number, atoi it and save that as the desired number of solutions.
				int numSolutions = atoi(argv[i]);
				if(numSolutions < 0) {
					warning("The number of solutions cannot be negative. Ignoring the argument.",true);
				} else {
					if (outConf.intConfigOpt(Config::OPT_NUM_SOLN, (unsigned int)numSolutions)) {
						warning("Detected the redefinition of the number of solutions. Continuing with '%s'.",true,argv[i]);
					}
				}
			}
			else if((tmpptr = strchr(argv[i],'=')) != NULL)
			{   // Found an equals sign in the argument, it's probably a "const=value" declaration.
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}
			}
			else
			{	// If it's not a number, it's probably an input file. Make sure it exists, and then save it to the list.

				if(realpath(argv[i], tmpPath) == NULL)
				{
					// Couldn't find the input file...
					error("Unable to locate input file '%s'. Exiting.",true,0,argv[i]);
					return OPT_STAT_BAD_ARG;
				}
				else
				{
					// Save all of the input files until we are done and can handle them...
					rawInputList.push_back(argv[i]);
				}
			}
			break;
		}
	}

	// We've finished parsing all of the arguments... Let's handle those pesky input files.
	debug("Handling input files...", true);
	if (!rawInputList.size()) {
		//uh-oh. They didn't specify any input files. This simply won't do.
		error("One or more input files must be specified.",true,0);
		return OPT_STAT_BAD_ARG;
	}

	// They've insisted on sticking with a given mode. Make sure they're aware if they're using an incompatible
	for (std::list<char const*>::iterator it = rawInputList.begin(); it != rawInputList.end(); it++) {
		Config::FileType type = outConf.addInput(*it);
		if (outConf.customMode() && type.known && !(type.runningMode & outConf.mode())) {
			warning("The file '%s' doesn't appear to be compatible with the current running mode.",true,*it);
		}
	}

	return OPT_STAT_OK;
}

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt) {
	char const* marker;

	
#line 1450 "<stdout>"
	{
		char yych;
		unsigned int yyaccept = 0;

		yych = *opt;
		switch (yych) {
		case '\n':	goto yy2;
		case '-':	goto yy3;
		default:	goto yy5;
		}
yy2:
		opt = marker;
		switch (yyaccept) {
		case 0: 	goto yy4;
		case 1: 	goto yy9;
		case 2: 	goto yy12;
		case 3: 	goto yy31;
		case 4: 	goto yy37;
		case 5: 	goto yy76;
		case 6: 	goto yy81;
		case 7: 	goto yy88;
		case 8: 	goto yy115;
		case 9: 	goto yy139;
		case 10: 	goto yy167;
		case 11: 	goto yy174;
		case 12: 	goto yy184;
		case 13: 	goto yy211;
		case 14: 	goto yy360;
		case 15: 	goto yy592;
		}
yy3:
		yyaccept = 0;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy6;
		case '?':	goto yy17;
		case 'a':	goto yy16;
		case 'b':	goto yy27;
		case 'c':	goto yy28;
		case 'f':	goto yy15;
		case 'g':	goto yy14;
		case 'i':	goto yy25;
		case 'j':	goto yy13;
		case 'm':	goto yy11;
		case 'n':	goto yy10;
		case 'p':	goto yy8;
		case 'q':	goto yy19;
		case 's':	goto yy23;
		case 't':	goto yy7;
		case 'v':	goto yy21;
		default:	goto yy4;
		}
yy4:
#line 1523 "cplus2asp.re2c"
		{ return OPT_UNKNOWN; }
#line 1506 "<stdout>"
yy5:
		yych = *++opt;
		goto yy4;
yy6:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy215;
		case 'b':	goto yy217;
		case 'c':	goto yy216;
		case 'f':	goto yy218;
		case 'g':	goto yy219;
		case 'h':	goto yy229;
		case 'i':	goto yy221;
		case 'j':	goto yy222;
		case 'm':	goto yy223;
		case 'n':	goto yy220;
		case 'p':	goto yy225;
		case 'q':	goto yy228;
		case 's':	goto yy224;
		case 't':	goto yy226;
		case 'u':	goto yy230;
		case 'v':	goto yy227;
		default:	goto yy2;
		}
yy7:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy179;
		case 'r':	goto yy180;
		default:	goto yy2;
		}
yy8:
		yyaccept = 1;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'i':	goto yy162;
		case 'o':	goto yy160;
		case 'r':	goto yy161;
		default:	goto yy9;
		}
yy9:
#line 1488 "cplus2asp.re2c"
		{ return OPT_PORT_EXTERNAL; }
#line 1550 "<stdout>"
yy10:
		yych = *++opt;
		switch (yych) {
		case 'h':	goto yy127;
		case 'o':	goto yy129;
		default:	goto yy2;
		}
yy11:
		yyaccept = 2;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'a':	goto yy119;
		case 'i':	goto yy120;
		case 'm':	goto yy121;
		default:	goto yy12;
		}
yy12:
#line 1475 "cplus2asp.re2c"
		{ return OPT_MODE_SELECT; }
#line 1570 "<stdout>"
yy13:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy93;
		default:	goto yy2;
		}
yy14:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy80;
		default:	goto yy2;
		}
yy15:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy51;
		default:	goto yy2;
		}
yy16:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy45;
		case 'u':	goto yy44;
		default:	goto yy2;
		}
yy17:
		++opt;
#line 1506 "cplus2asp.re2c"
		{ return OPT_HELP; }
#line 1600 "<stdout>"
yy19:
		++opt;
#line 1505 "cplus2asp.re2c"
		{ return OPT_QUERY; }
#line 1605 "<stdout>"
yy21:
		++opt;
#line 1504 "cplus2asp.re2c"
		{ return OPT_VERSION; }
#line 1610 "<stdout>"
yy23:
		++opt;
		switch ((yych = *opt)) {
		case 'o':	goto yy36;
		case 'w':	goto yy38;
		default:	goto yy24;
		}
yy24:
#line 1484 "cplus2asp.re2c"
		{ return OPT_SHIFT_TRUE; }
#line 1621 "<stdout>"
yy25:
		++opt;
#line 1469 "cplus2asp.re2c"
		{ return OPT_PORT_INTERNAL; }
#line 1626 "<stdout>"
yy27:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy30;
		default:	goto yy2;
		}
yy28:
		++opt;
#line 1454 "cplus2asp.re2c"
		{ return OPT_CONST; }
#line 1637 "<stdout>"
yy30:
		yyaccept = 3;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy32;
		default:	goto yy31;
		}
yy31:
#line 1455 "cplus2asp.re2c"
		{ return OPT_BRIDGE; }
#line 1648 "<stdout>"
yy32:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy33;
		default:	goto yy2;
		}
yy33:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy34;
		default:	goto yy2;
		}
yy34:
		++opt;
#line 1456 "cplus2asp.re2c"
		{ return OPT_BRIDGE_OPTS; }
#line 1665 "<stdout>"
yy36:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy40;
		default:	goto yy37;
		}
yy37:
#line 1493 "cplus2asp.re2c"
		{ return OPT_SO; }
#line 1676 "<stdout>"
yy38:
		++opt;
#line 1495 "cplus2asp.re2c"
		{ return OPT_SO_WARN; }
#line 1681 "<stdout>"
yy40:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy41;
		default:	goto yy2;
		}
yy41:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy42;
		default:	goto yy2;
		}
yy42:
		++opt;
#line 1494 "cplus2asp.re2c"
		{ return OPT_SO_OPTS; }
#line 1698 "<stdout>"
yy44:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy48;
		default:	goto yy2;
		}
yy45:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy46;
		default:	goto yy2;
		}
yy46:
		++opt;
#line 1509 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_ADDITIVE; }
#line 1715 "<stdout>"
yy48:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy49;
		default:	goto yy2;
		}
yy49:
		++opt;
#line 1453 "cplus2asp.re2c"
		{ return OPT_AUTO; }
#line 1726 "<stdout>"
yy51:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy52;
		default:	goto yy2;
		}
yy52:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy53;
		default:	goto yy2;
		}
yy53:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy58;
		case 'g':	goto yy54;
		case 'p':	goto yy57;
		case 's':	goto yy56;
		case 't':	goto yy55;
		default:	goto yy2;
		}
yy54:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy75;
		default:	goto yy2;
		}
yy55:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy70;
		default:	goto yy2;
		}
yy56:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy68;
		default:	goto yy2;
		}
yy57:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy62;
		case 'r':	goto yy61;
		default:	goto yy2;
		}
yy58:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy59;
		default:	goto yy2;
		}
yy59:
		++opt;
#line 1457 "cplus2asp.re2c"
		{ return OPT_FRM_BRIDGE; }
#line 1784 "<stdout>"
yy61:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy66;
		default:	goto yy2;
		}
yy62:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy63;
		default:	goto yy2;
		}
yy63:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy64;
		default:	goto yy2;
		}
yy64:
		++opt;
#line 1460 "cplus2asp.re2c"
		{ return OPT_FRM_POST; }
#line 1807 "<stdout>"
yy66:
		++opt;
#line 1459 "cplus2asp.re2c"
		{ return OPT_FRM_PRE; }
#line 1812 "<stdout>"
yy68:
		++opt;
#line 1461 "cplus2asp.re2c"
		{ return OPT_FROM_SO; }
#line 1817 "<stdout>"
yy70:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy71;
		default:	goto yy2;
		}
yy71:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy72;
		default:	goto yy2;
		}
yy72:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy73;
		default:	goto yy2;
		}
yy73:
		++opt;
#line 1462 "cplus2asp.re2c"
		{ return OPT_FROM_TRAN; }
#line 1840 "<stdout>"
yy75:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy77;
		default:	goto yy76;
		}
yy76:
#line 1458 "cplus2asp.re2c"
		{ return OPT_FRM_GRD; }
#line 1851 "<stdout>"
yy77:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy78;
		default:	goto yy2;
		}
yy78:
		++opt;
#line 1510 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 1862 "<stdout>"
yy80:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy83;
		case 's':	goto yy82;
		default:	goto yy81;
		}
yy81:
#line 1463 "cplus2asp.re2c"
		{ return OPT_GRD; }
#line 1874 "<stdout>"
yy82:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy87;
		default:	goto yy2;
		}
yy83:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy84;
		default:	goto yy2;
		}
yy84:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy85;
		default:	goto yy2;
		}
yy85:
		++opt;
#line 1464 "cplus2asp.re2c"
		{ return OPT_GRD_OPTS; }
#line 1897 "<stdout>"
yy87:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy89;
		default:	goto yy88;
		}
yy88:
#line 1511 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 1908 "<stdout>"
yy89:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy90;
		default:	goto yy2;
		}
yy90:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy91;
		default:	goto yy2;
		}
yy91:
		++opt;
#line 1512 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 1925 "<stdout>"
yy93:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy94;
		default:	goto yy2;
		}
yy94:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy95;
		default:	goto yy2;
		}
yy95:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy96;
		case 'p':	goto yy99;
		case 's':	goto yy98;
		case 't':	goto yy97;
		default:	goto yy2;
		}
yy96:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy114;
		default:	goto yy2;
		}
yy97:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy109;
		default:	goto yy2;
		}
yy98:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy107;
		default:	goto yy2;
		}
yy99:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy101;
		case 'r':	goto yy100;
		default:	goto yy2;
		}
yy100:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy105;
		default:	goto yy2;
		}
yy101:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy102;
		default:	goto yy2;
		}
yy102:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy103;
		default:	goto yy2;
		}
yy103:
		++opt;
#line 1472 "cplus2asp.re2c"
		{ return OPT_JUST_POST; }
#line 1994 "<stdout>"
yy105:
		++opt;
#line 1471 "cplus2asp.re2c"
		{ return OPT_JUST_PRE; }
#line 1999 "<stdout>"
yy107:
		++opt;
#line 1473 "cplus2asp.re2c"
		{ return OPT_JUST_SO; }
#line 2004 "<stdout>"
yy109:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy110;
		default:	goto yy2;
		}
yy110:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy111;
		default:	goto yy2;
		}
yy111:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy112;
		default:	goto yy2;
		}
yy112:
		++opt;
#line 1474 "cplus2asp.re2c"
		{ return OPT_JUST_TRANS; }
#line 2027 "<stdout>"
yy114:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy116;
		default:	goto yy115;
		}
yy115:
#line 1470 "cplus2asp.re2c"
		{ return OPT_JUST_GRD; }
#line 2038 "<stdout>"
yy116:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy117;
		default:	goto yy2;
		}
yy117:
		++opt;
#line 1513 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2049 "<stdout>"
yy119:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy125;
		default:	goto yy2;
		}
yy120:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy123;
		default:	goto yy2;
		}
yy121:
		++opt;
#line 1514 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_MANUAL_MAXSTEP; }
#line 2066 "<stdout>"
yy123:
		++opt;
#line 1481 "cplus2asp.re2c"
		{ return OPT_MINSTEP; }
#line 2071 "<stdout>"
yy125:
		++opt;
#line 1480 "cplus2asp.re2c"
		{ return OPT_MAXSTEP; }
#line 2076 "<stdout>"
yy127:
		++opt;
#line 1465 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK_TRUE; }
#line 2081 "<stdout>"
yy129:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy134;
		case 'g':	goto yy133;
		case 'p':	goto yy132;
		case 's':	goto yy131;
		case 't':	goto yy130;
		default:	goto yy2;
		}
yy130:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy155;
		default:	goto yy2;
		}
yy131:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy151;
		case 't':	goto yy150;
		default:	goto yy2;
		}
yy132:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy144;
		case 'r':	goto yy143;
		default:	goto yy2;
		}
yy133:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy138;
		default:	goto yy2;
		}
yy134:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy135;
		default:	goto yy2;
		}
yy135:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy136;
		default:	goto yy2;
		}
yy136:
		++opt;
#line 1482 "cplus2asp.re2c"
		{ return OPT_NO_DEL; }
#line 2134 "<stdout>"
yy138:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy140;
		default:	goto yy139;
		}
yy139:
#line 1515 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2145 "<stdout>"
yy140:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy141;
		default:	goto yy2;
		}
yy141:
		++opt;
#line 1516 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2156 "<stdout>"
yy143:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy148;
		default:	goto yy2;
		}
yy144:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy145;
		default:	goto yy2;
		}
yy145:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy146;
		default:	goto yy2;
		}
yy146:
		++opt;
#line 1518 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2179 "<stdout>"
yy148:
		++opt;
#line 1517 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2184 "<stdout>"
yy150:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy153;
		default:	goto yy2;
		}
yy151:
		++opt;
#line 1519 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2195 "<stdout>"
yy153:
		++opt;
#line 1483 "cplus2asp.re2c"
		{ return OPT_NO_STD; }
#line 2200 "<stdout>"
yy155:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy156;
		default:	goto yy2;
		}
yy156:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy157;
		default:	goto yy2;
		}
yy157:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy158;
		default:	goto yy2;
		}
yy158:
		++opt;
#line 1520 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2223 "<stdout>"
yy160:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy172;
		default:	goto yy2;
		}
yy161:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy166;
		default:	goto yy2;
		}
yy162:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy163;
		default:	goto yy2;
		}
yy163:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy164;
		default:	goto yy2;
		}
yy164:
		++opt;
#line 1521 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2252 "<stdout>"
yy166:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy168;
		default:	goto yy167;
		}
yy167:
#line 1491 "cplus2asp.re2c"
		{ return OPT_PREPROC; }
#line 2263 "<stdout>"
yy168:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy169;
		default:	goto yy2;
		}
yy169:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy170;
		default:	goto yy2;
		}
yy170:
		++opt;
#line 1492 "cplus2asp.re2c"
		{ return OPT_PREPROC_OPTS; }
#line 2280 "<stdout>"
yy172:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy173;
		default:	goto yy2;
		}
yy173:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy175;
		default:	goto yy174;
		}
yy174:
#line 1489 "cplus2asp.re2c"
		{ return OPT_POSTPROC; }
#line 2297 "<stdout>"
yy175:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy176;
		default:	goto yy2;
		}
yy176:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy177;
		default:	goto yy2;
		}
yy177:
		++opt;
#line 1490 "cplus2asp.re2c"
		{ return OPT_POSTPROC_OPTS; }
#line 2314 "<stdout>"
yy179:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy190;
		case 'g':	goto yy189;
		case 'p':	goto yy193;
		case 's':	goto yy192;
		case 't':	goto yy191;
		default:	goto yy2;
		}
yy180:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy181;
		default:	goto yy2;
		}
yy181:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy182;
		default:	goto yy2;
		}
yy182:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy183;
		default:	goto yy2;
		}
yy183:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy185;
		default:	goto yy184;
		}
yy184:
#line 1502 "cplus2asp.re2c"
		{ return OPT_TRANS; }
#line 2353 "<stdout>"
yy185:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy186;
		default:	goto yy2;
		}
yy186:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy187;
		default:	goto yy2;
		}
yy187:
		++opt;
#line 1503 "cplus2asp.re2c"
		{ return OPT_TRANS_OPTS; }
#line 2370 "<stdout>"
yy189:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy210;
		default:	goto yy2;
		}
yy190:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy208;
		default:	goto yy2;
		}
yy191:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy203;
		default:	goto yy2;
		}
yy192:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy201;
		default:	goto yy2;
		}
yy193:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy195;
		case 'r':	goto yy194;
		default:	goto yy2;
		}
yy194:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy199;
		default:	goto yy2;
		}
yy195:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy196;
		default:	goto yy2;
		}
yy196:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy197;
		default:	goto yy2;
		}
yy197:
		++opt;
#line 1498 "cplus2asp.re2c"
		{ return OPT_TO_POST; }
#line 2424 "<stdout>"
yy199:
		++opt;
#line 1497 "cplus2asp.re2c"
		{ return OPT_TO_PRE; }
#line 2429 "<stdout>"
yy201:
		++opt;
#line 1499 "cplus2asp.re2c"
		{ return OPT_TO_SO; }
#line 2434 "<stdout>"
yy203:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy204;
		default:	goto yy2;
		}
yy204:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy205;
		default:	goto yy2;
		}
yy205:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy206;
		default:	goto yy2;
		}
yy206:
		++opt;
#line 1500 "cplus2asp.re2c"
		{ return OPT_TO_TRANS; }
#line 2457 "<stdout>"
yy208:
		++opt;
#line 1501 "cplus2asp.re2c"
		{ return OPT_TO_BRIDGE;	}
#line 2462 "<stdout>"
yy210:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy212;
		default:	goto yy211;
		}
yy211:
#line 1496 "cplus2asp.re2c"
		{ return OPT_TO_GRD; }
#line 2473 "<stdout>"
yy212:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy213;
		default:	goto yy2;
		}
yy213:
		++opt;
#line 1522 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2484 "<stdout>"
yy215:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy700;
		case 'u':	goto yy701;
		default:	goto yy2;
		}
yy216:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy697;
		default:	goto yy2;
		}
yy217:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy687;
		default:	goto yy2;
		}
yy218:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy626;
		default:	goto yy2;
		}
yy219:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy605;
		default:	goto yy2;
		}
yy220:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy520;
		default:	goto yy2;
		}
yy221:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy509;
		default:	goto yy2;
		}
yy222:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy453;
		default:	goto yy2;
		}
yy223:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy388;
		case 'i':	goto yy389;
		case 'o':	goto yy390;
		default:	goto yy2;
		}
yy224:
		yych = *++opt;
		switch (yych) {
		case 'h':	goto yy356;
		case 'o':	goto yy355;
		default:	goto yy2;
		}
yy225:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy321;
		case 'r':	goto yy320;
		default:	goto yy2;
		}
yy226:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy248;
		case 'r':	goto yy249;
		default:	goto yy2;
		}
yy227:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy243;
		default:	goto yy2;
		}
yy228:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy240;
		default:	goto yy2;
		}
yy229:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy238;
		default:	goto yy2;
		}
yy230:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy231;
		default:	goto yy2;
		}
yy231:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy232;
		default:	goto yy2;
		}
yy232:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy233;
		default:	goto yy2;
		}
yy233:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy234;
		default:	goto yy2;
		}
yy234:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy235;
		default:	goto yy2;
		}
yy235:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy236;
		default:	goto yy2;
		}
yy236:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy237;
		default:	goto yy2;
		}
yy237:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy164;
		default:	goto yy2;
		}
yy238:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy239;
		default:	goto yy2;
		}
yy239:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy17;
		default:	goto yy2;
		}
yy240:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy241;
		default:	goto yy2;
		}
yy241:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy242;
		default:	goto yy2;
		}
yy242:
		yych = *++opt;
		switch (yych) {
		case 'y':	goto yy19;
		default:	goto yy2;
		}
yy243:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy244;
		default:	goto yy2;
		}
yy244:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy245;
		default:	goto yy2;
		}
yy245:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy246;
		default:	goto yy2;
		}
yy246:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy247;
		default:	goto yy2;
		}
yy247:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy21;
		default:	goto yy2;
		}
yy248:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy262;
		default:	goto yy2;
		}
yy249:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy250;
		default:	goto yy2;
		}
yy250:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy251;
		default:	goto yy2;
		}
yy251:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy252;
		default:	goto yy2;
		}
yy252:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy253;
		default:	goto yy2;
		}
yy253:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy254;
		default:	goto yy2;
		}
yy254:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy255;
		default:	goto yy2;
		}
yy255:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy256;
		default:	goto yy2;
		}
yy256:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy257;
		default:	goto yy2;
		}
yy257:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy258;
		default:	goto yy184;
		}
yy258:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy259;
		default:	goto yy2;
		}
yy259:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy260;
		default:	goto yy2;
		}
yy260:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy261;
		default:	goto yy2;
		}
yy261:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy187;
		default:	goto yy2;
		}
yy262:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy264;
		case 'g':	goto yy263;
		case 'p':	goto yy267;
		case 's':	goto yy266;
		case 't':	goto yy265;
		default:	goto yy2;
		}
yy263:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy307;
		default:	goto yy2;
		}
yy264:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy303;
		default:	goto yy2;
		}
yy265:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy295;
		default:	goto yy2;
		}
yy266:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy291;
		default:	goto yy2;
		}
yy267:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy269;
		case 'r':	goto yy268;
		default:	goto yy2;
		}
yy268:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy281;
		default:	goto yy2;
		}
yy269:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy270;
		default:	goto yy2;
		}
yy270:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy271;
		default:	goto yy2;
		}
yy271:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy272;
		default:	goto yy2;
		}
yy272:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy273;
		default:	goto yy2;
		}
yy273:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy274;
		default:	goto yy2;
		}
yy274:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy275;
		default:	goto yy2;
		}
yy275:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy276;
		default:	goto yy2;
		}
yy276:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy277;
		default:	goto yy2;
		}
yy277:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy278;
		default:	goto yy2;
		}
yy278:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy279;
		default:	goto yy2;
		}
yy279:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy280;
		default:	goto yy2;
		}
yy280:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy197;
		default:	goto yy2;
		}
yy281:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy282;
		default:	goto yy2;
		}
yy282:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy283;
		default:	goto yy2;
		}
yy283:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy284;
		default:	goto yy2;
		}
yy284:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy285;
		default:	goto yy2;
		}
yy285:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy286;
		default:	goto yy2;
		}
yy286:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy287;
		default:	goto yy2;
		}
yy287:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy288;
		default:	goto yy2;
		}
yy288:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy289;
		default:	goto yy2;
		}
yy289:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy290;
		default:	goto yy2;
		}
yy290:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy199;
		default:	goto yy2;
		}
yy291:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy292;
		default:	goto yy2;
		}
yy292:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy293;
		default:	goto yy2;
		}
yy293:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy294;
		default:	goto yy2;
		}
yy294:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy201;
		default:	goto yy2;
		}
yy295:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy296;
		default:	goto yy2;
		}
yy296:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy297;
		default:	goto yy2;
		}
yy297:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy298;
		default:	goto yy2;
		}
yy298:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy299;
		default:	goto yy2;
		}
yy299:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy300;
		default:	goto yy2;
		}
yy300:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy301;
		default:	goto yy2;
		}
yy301:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy302;
		default:	goto yy2;
		}
yy302:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy206;
		default:	goto yy2;
		}
yy303:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy304;
		default:	goto yy2;
		}
yy304:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy305;
		default:	goto yy2;
		}
yy305:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy306;
		default:	goto yy2;
		}
yy306:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy208;
		default:	goto yy2;
		}
yy307:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy308;
		default:	goto yy2;
		}
yy308:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy309;
		default:	goto yy2;
		}
yy309:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy310;
		default:	goto yy2;
		}
yy310:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy311;
		default:	goto yy2;
		}
yy311:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy312;
		default:	goto yy2;
		}
yy312:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy313;
		default:	goto yy2;
		}
yy313:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy314;
		default:	goto yy211;
		}
yy314:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy315;
		default:	goto yy2;
		}
yy315:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy316;
		default:	goto yy2;
		}
yy316:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy317;
		default:	goto yy2;
		}
yy317:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy318;
		default:	goto yy2;
		}
yy318:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy319;
		default:	goto yy2;
		}
yy319:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy213;
		default:	goto yy2;
		}
yy320:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy340;
		default:	goto yy2;
		}
yy321:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy322;
		case 's':	goto yy323;
		default:	goto yy2;
		}
yy322:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy339;
		default:	goto yy2;
		}
yy323:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy324;
		default:	goto yy2;
		}
yy324:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy325;
		default:	goto yy2;
		}
yy325:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy326;
		default:	goto yy2;
		}
yy326:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy327;
		default:	goto yy2;
		}
yy327:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy328;
		default:	goto yy2;
		}
yy328:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy329;
		default:	goto yy2;
		}
yy329:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy330;
		default:	goto yy2;
		}
yy330:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy331;
		default:	goto yy2;
		}
yy331:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy332;
		default:	goto yy2;
		}
yy332:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy333;
		default:	goto yy2;
		}
yy333:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy334;
		default:	goto yy2;
		}
yy334:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy335;
		default:	goto yy174;
		}
yy335:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy336;
		default:	goto yy2;
		}
yy336:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy337;
		default:	goto yy2;
		}
yy337:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy338;
		default:	goto yy2;
		}
yy338:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy177;
		default:	goto yy2;
		}
yy339:
		yych = *++opt;
		goto yy9;
yy340:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy341;
		default:	goto yy2;
		}
yy341:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy342;
		default:	goto yy2;
		}
yy342:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy343;
		default:	goto yy2;
		}
yy343:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy344;
		default:	goto yy2;
		}
yy344:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy345;
		default:	goto yy2;
		}
yy345:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy346;
		default:	goto yy2;
		}
yy346:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy347;
		default:	goto yy2;
		}
yy347:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy348;
		default:	goto yy2;
		}
yy348:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy349;
		default:	goto yy2;
		}
yy349:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy350;
		default:	goto yy2;
		}
yy350:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy351;
		default:	goto yy167;
		}
yy351:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy352;
		default:	goto yy2;
		}
yy352:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy353;
		default:	goto yy2;
		}
yy353:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy354;
		default:	goto yy2;
		}
yy354:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy170;
		default:	goto yy2;
		}
yy355:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy373;
		default:	goto yy2;
		}
yy356:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy357;
		default:	goto yy2;
		}
yy357:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy358;
		default:	goto yy2;
		}
yy358:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy359;
		default:	goto yy2;
		}
yy359:
		yyaccept = 14;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy361;
		default:	goto yy360;
		}
yy360:
#line 1485 "cplus2asp.re2c"
		{ return OPT_SHIFT_TRUE; }
#line 3372 "<stdout>"
yy361:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy363;
		case 't':	goto yy362;
		default:	goto yy2;
		}
yy362:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy369;
		default:	goto yy2;
		}
yy363:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy364;
		default:	goto yy2;
		}
yy364:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy365;
		default:	goto yy2;
		}
yy365:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy366;
		default:	goto yy2;
		}
yy366:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy367;
		default:	goto yy2;
		}
yy367:
		++opt;
#line 1487 "cplus2asp.re2c"
		{ return OPT_SHIFT_FALSE; }
#line 3414 "<stdout>"
yy369:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy370;
		default:	goto yy2;
		}
yy370:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy371;
		default:	goto yy2;
		}
yy371:
		++opt;
#line 1486 "cplus2asp.re2c"
		{ return OPT_SHIFT_TRUE; }
#line 3431 "<stdout>"
yy373:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy374;
		default:	goto yy2;
		}
yy374:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy375;
		default:	goto yy2;
		}
yy375:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy376;
		default:	goto yy2;
		}
yy376:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy377;
		default:	goto yy37;
		}
yy377:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy379;
		case 'w':	goto yy378;
		default:	goto yy2;
		}
yy378:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy382;
		default:	goto yy2;
		}
yy379:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy380;
		default:	goto yy2;
		}
yy380:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy381;
		default:	goto yy2;
		}
yy381:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy42;
		default:	goto yy2;
		}
yy382:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy383;
		default:	goto yy2;
		}
yy383:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy384;
		default:	goto yy2;
		}
yy384:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy385;
		default:	goto yy2;
		}
yy385:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy386;
		default:	goto yy2;
		}
yy386:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy387;
		default:	goto yy2;
		}
yy387:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy38;
		default:	goto yy2;
		}
yy388:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy439;
		case 'x':	goto yy438;
		default:	goto yy2;
		}
yy389:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy434;
		default:	goto yy2;
		}
yy390:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy391;
		default:	goto yy2;
		}
yy391:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy392;
		default:	goto yy2;
		}
yy392:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy393;
		default:	goto yy2;
		}
yy393:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy395;
		case 'r':	goto yy394;
		case 's':	goto yy396;
		default:	goto yy2;
		}
yy394:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy426;
		default:	goto yy2;
		}
yy395:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy415;
		default:	goto yy2;
		}
yy396:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy397;
		default:	goto yy2;
		}
yy397:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy398;
		default:	goto yy2;
		}
yy398:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy399;
		default:	goto yy2;
		}
yy399:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy400;
		default:	goto yy2;
		}
yy400:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy401;
		default:	goto yy2;
		}
yy401:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy402;
		default:	goto yy2;
		}
yy402:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy403;
		case 'm':	goto yy404;
		default:	goto yy2;
		}
yy403:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy411;
		default:	goto yy2;
		}
yy404:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy405;
		default:	goto yy2;
		}
yy405:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy406;
		default:	goto yy2;
		}
yy406:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy407;
		default:	goto yy2;
		}
yy407:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy408;
		default:	goto yy2;
		}
yy408:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy409;
		default:	goto yy2;
		}
yy409:
		++opt;
#line 1477 "cplus2asp.re2c"
		{ return OPT_MODE_STATIC_MANUAL; }
#line 3658 "<stdout>"
yy411:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy412;
		default:	goto yy2;
		}
yy412:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy413;
		default:	goto yy2;
		}
yy413:
		++opt;
#line 1476 "cplus2asp.re2c"
		{ return OPT_MODE_STATIC_AUTO; }
#line 3675 "<stdout>"
yy415:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy416;
		default:	goto yy2;
		}
yy416:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy417;
		default:	goto yy2;
		}
yy417:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy418;
		default:	goto yy2;
		}
yy418:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy419;
		default:	goto yy2;
		}
yy419:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy420;
		default:	goto yy2;
		}
yy420:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy421;
		default:	goto yy2;
		}
yy421:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy422;
		default:	goto yy2;
		}
yy422:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy423;
		default:	goto yy2;
		}
yy423:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy424;
		default:	goto yy2;
		}
yy424:
		++opt;
#line 1478 "cplus2asp.re2c"
		{ return OPT_MODE_INCREMENTAL; }
#line 3734 "<stdout>"
yy426:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy427;
		default:	goto yy2;
		}
yy427:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy428;
		default:	goto yy2;
		}
yy428:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy429;
		default:	goto yy2;
		}
yy429:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy430;
		default:	goto yy2;
		}
yy430:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy431;
		default:	goto yy2;
		}
yy431:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy432;
		default:	goto yy2;
		}
yy432:
		++opt;
#line 1479 "cplus2asp.re2c"
		{ return OPT_MODE_REACTIVE; }
#line 3775 "<stdout>"
yy434:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy435;
		default:	goto yy2;
		}
yy435:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy436;
		default:	goto yy2;
		}
yy436:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy437;
		default:	goto yy2;
		}
yy437:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy123;
		default:	goto yy2;
		}
yy438:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy450;
		default:	goto yy2;
		}
yy439:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy440;
		default:	goto yy2;
		}
yy440:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy441;
		default:	goto yy2;
		}
yy441:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy442;
		default:	goto yy2;
		}
yy442:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy443;
		default:	goto yy2;
		}
yy443:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy444;
		default:	goto yy2;
		}
yy444:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy445;
		default:	goto yy2;
		}
yy445:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy446;
		default:	goto yy2;
		}
yy446:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy447;
		default:	goto yy2;
		}
yy447:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy448;
		default:	goto yy2;
		}
yy448:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy449;
		default:	goto yy2;
		}
yy449:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy121;
		default:	goto yy2;
		}
yy450:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy451;
		default:	goto yy2;
		}
yy451:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy452;
		default:	goto yy2;
		}
yy452:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy125;
		default:	goto yy2;
		}
yy453:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy454;
		default:	goto yy2;
		}
yy454:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy455;
		default:	goto yy2;
		}
yy455:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy456;
		default:	goto yy2;
		}
yy456:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy457;
		case 'p':	goto yy460;
		case 's':	goto yy459;
		case 't':	goto yy458;
		default:	goto yy2;
		}
yy457:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy496;
		default:	goto yy2;
		}
yy458:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy488;
		default:	goto yy2;
		}
yy459:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy484;
		default:	goto yy2;
		}
yy460:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy462;
		case 'r':	goto yy461;
		default:	goto yy2;
		}
yy461:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy474;
		default:	goto yy2;
		}
yy462:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy463;
		default:	goto yy2;
		}
yy463:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy464;
		default:	goto yy2;
		}
yy464:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy465;
		default:	goto yy2;
		}
yy465:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy466;
		default:	goto yy2;
		}
yy466:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy467;
		default:	goto yy2;
		}
yy467:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy468;
		default:	goto yy2;
		}
yy468:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy469;
		default:	goto yy2;
		}
yy469:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy470;
		default:	goto yy2;
		}
yy470:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy471;
		default:	goto yy2;
		}
yy471:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy472;
		default:	goto yy2;
		}
yy472:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy473;
		default:	goto yy2;
		}
yy473:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy103;
		default:	goto yy2;
		}
yy474:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy475;
		default:	goto yy2;
		}
yy475:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy476;
		default:	goto yy2;
		}
yy476:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy477;
		default:	goto yy2;
		}
yy477:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy478;
		default:	goto yy2;
		}
yy478:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy479;
		default:	goto yy2;
		}
yy479:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy480;
		default:	goto yy2;
		}
yy480:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy481;
		default:	goto yy2;
		}
yy481:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy482;
		default:	goto yy2;
		}
yy482:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy483;
		default:	goto yy2;
		}
yy483:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy105;
		default:	goto yy2;
		}
yy484:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy485;
		default:	goto yy2;
		}
yy485:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy486;
		default:	goto yy2;
		}
yy486:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy487;
		default:	goto yy2;
		}
yy487:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy107;
		default:	goto yy2;
		}
yy488:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy489;
		default:	goto yy2;
		}
yy489:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy490;
		default:	goto yy2;
		}
yy490:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy491;
		default:	goto yy2;
		}
yy491:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy492;
		default:	goto yy2;
		}
yy492:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy493;
		default:	goto yy2;
		}
yy493:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy494;
		default:	goto yy2;
		}
yy494:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy495;
		default:	goto yy2;
		}
yy495:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy112;
		default:	goto yy2;
		}
yy496:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy497;
		default:	goto yy2;
		}
yy497:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy498;
		default:	goto yy2;
		}
yy498:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy499;
		default:	goto yy2;
		}
yy499:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy500;
		default:	goto yy2;
		}
yy500:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy501;
		default:	goto yy2;
		}
yy501:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy502;
		default:	goto yy2;
		}
yy502:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy503;
		default:	goto yy115;
		}
yy503:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy504;
		default:	goto yy2;
		}
yy504:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy505;
		default:	goto yy2;
		}
yy505:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy506;
		default:	goto yy2;
		}
yy506:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy507;
		default:	goto yy2;
		}
yy507:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy508;
		default:	goto yy2;
		}
yy508:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy117;
		default:	goto yy2;
		}
yy509:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy510;
		default:	goto yy2;
		}
yy510:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy511;
		default:	goto yy2;
		}
yy511:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy512;
		default:	goto yy2;
		}
yy512:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy513;
		default:	goto yy2;
		}
yy513:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy514;
		default:	goto yy2;
		}
yy514:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy515;
		default:	goto yy2;
		}
yy515:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy516;
		default:	goto yy2;
		}
yy516:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy517;
		default:	goto yy2;
		}
yy517:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy518;
		default:	goto yy2;
		}
yy518:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy519;
		default:	goto yy2;
		}
yy519:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy25;
		default:	goto yy2;
		}
yy520:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy522;
		case 'n':	goto yy521;
		default:	goto yy2;
		}
yy521:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy586;
		default:	goto yy2;
		}
yy522:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy527;
		case 'g':	goto yy526;
		case 'p':	goto yy525;
		case 's':	goto yy524;
		case 't':	goto yy523;
		default:	goto yy2;
		}
yy523:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy578;
		default:	goto yy2;
		}
yy524:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy569;
		case 't':	goto yy568;
		default:	goto yy2;
		}
yy525:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy546;
		case 'r':	goto yy545;
		default:	goto yy2;
		}
yy526:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy532;
		default:	goto yy2;
		}
yy527:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy528;
		default:	goto yy2;
		}
yy528:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy529;
		default:	goto yy2;
		}
yy529:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy530;
		default:	goto yy2;
		}
yy530:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy531;
		default:	goto yy2;
		}
yy531:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy136;
		default:	goto yy2;
		}
yy532:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy533;
		default:	goto yy2;
		}
yy533:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy534;
		default:	goto yy2;
		}
yy534:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy535;
		default:	goto yy2;
		}
yy535:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy536;
		default:	goto yy2;
		}
yy536:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy537;
		default:	goto yy2;
		}
yy537:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy538;
		default:	goto yy2;
		}
yy538:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy539;
		default:	goto yy139;
		}
yy539:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy540;
		default:	goto yy2;
		}
yy540:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy541;
		default:	goto yy2;
		}
yy541:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy542;
		default:	goto yy2;
		}
yy542:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy543;
		default:	goto yy2;
		}
yy543:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy544;
		default:	goto yy2;
		}
yy544:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy141;
		default:	goto yy2;
		}
yy545:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy558;
		default:	goto yy2;
		}
yy546:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy547;
		default:	goto yy2;
		}
yy547:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy548;
		default:	goto yy2;
		}
yy548:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy549;
		default:	goto yy2;
		}
yy549:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy550;
		default:	goto yy2;
		}
yy550:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy551;
		default:	goto yy2;
		}
yy551:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy552;
		default:	goto yy2;
		}
yy552:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy553;
		default:	goto yy2;
		}
yy553:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy554;
		default:	goto yy2;
		}
yy554:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy555;
		default:	goto yy2;
		}
yy555:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy556;
		default:	goto yy2;
		}
yy556:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy557;
		default:	goto yy2;
		}
yy557:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy146;
		default:	goto yy2;
		}
yy558:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy559;
		default:	goto yy2;
		}
yy559:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy560;
		default:	goto yy2;
		}
yy560:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy561;
		default:	goto yy2;
		}
yy561:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy562;
		default:	goto yy2;
		}
yy562:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy563;
		default:	goto yy2;
		}
yy563:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy564;
		default:	goto yy2;
		}
yy564:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy565;
		default:	goto yy2;
		}
yy565:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy566;
		default:	goto yy2;
		}
yy566:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy567;
		default:	goto yy2;
		}
yy567:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy148;
		default:	goto yy2;
		}
yy568:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy573;
		default:	goto yy2;
		}
yy569:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy570;
		default:	goto yy2;
		}
yy570:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy571;
		default:	goto yy2;
		}
yy571:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy572;
		default:	goto yy2;
		}
yy572:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy151;
		default:	goto yy2;
		}
yy573:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy574;
		default:	goto yy2;
		}
yy574:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy575;
		default:	goto yy2;
		}
yy575:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy576;
		default:	goto yy2;
		}
yy576:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy577;
		default:	goto yy2;
		}
yy577:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy153;
		default:	goto yy2;
		}
yy578:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy579;
		default:	goto yy2;
		}
yy579:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy580;
		default:	goto yy2;
		}
yy580:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy581;
		default:	goto yy2;
		}
yy581:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy582;
		default:	goto yy2;
		}
yy582:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy583;
		default:	goto yy2;
		}
yy583:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy584;
		default:	goto yy2;
		}
yy584:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy585;
		default:	goto yy2;
		}
yy585:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy158;
		default:	goto yy2;
		}
yy586:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy587;
		default:	goto yy2;
		}
yy587:
		yych = *++opt;
		switch (yych) {
		case 'h':	goto yy588;
		default:	goto yy2;
		}
yy588:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy589;
		default:	goto yy2;
		}
yy589:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy590;
		default:	goto yy2;
		}
yy590:
		yych = *++opt;
		switch (yych) {
		case 'k':	goto yy591;
		default:	goto yy2;
		}
yy591:
		yyaccept = 15;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy593;
		default:	goto yy592;
		}
yy592:
#line 1466 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK_TRUE; }
#line 4741 "<stdout>"
yy593:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy595;
		case 't':	goto yy594;
		default:	goto yy2;
		}
yy594:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy601;
		default:	goto yy2;
		}
yy595:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy596;
		default:	goto yy2;
		}
yy596:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy597;
		default:	goto yy2;
		}
yy597:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy598;
		default:	goto yy2;
		}
yy598:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy599;
		default:	goto yy2;
		}
yy599:
		++opt;
#line 1468 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK_FALSE; }
#line 4783 "<stdout>"
yy601:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy602;
		default:	goto yy2;
		}
yy602:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy603;
		default:	goto yy2;
		}
yy603:
		++opt;
#line 1467 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK_TRUE; }
#line 4800 "<stdout>"
yy605:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy606;
		default:	goto yy2;
		}
yy606:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy607;
		default:	goto yy2;
		}
yy607:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy608;
		default:	goto yy2;
		}
yy608:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy609;
		default:	goto yy2;
		}
yy609:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy610;
		default:	goto yy2;
		}
yy610:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy611;
		default:	goto yy2;
		}
yy611:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy612;
		default:	goto yy81;
		}
yy612:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy614;
		case 's':	goto yy613;
		default:	goto yy2;
		}
yy613:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy617;
		default:	goto yy2;
		}
yy614:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy615;
		default:	goto yy2;
		}
yy615:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy616;
		default:	goto yy2;
		}
yy616:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy85;
		default:	goto yy2;
		}
yy617:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy618;
		default:	goto yy2;
		}
yy618:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy619;
		default:	goto yy2;
		}
yy619:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy620;
		default:	goto yy2;
		}
yy620:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy621;
		default:	goto yy2;
		}
yy621:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy622;
		default:	goto yy88;
		}
yy622:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy623;
		default:	goto yy2;
		}
yy623:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy624;
		default:	goto yy2;
		}
yy624:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy625;
		default:	goto yy2;
		}
yy625:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy91;
		default:	goto yy2;
		}
yy626:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy627;
		default:	goto yy2;
		}
yy627:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy628;
		default:	goto yy2;
		}
yy628:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy629;
		default:	goto yy2;
		}
yy629:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy634;
		case 'g':	goto yy630;
		case 'p':	goto yy633;
		case 's':	goto yy632;
		case 't':	goto yy631;
		default:	goto yy2;
		}
yy630:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy674;
		default:	goto yy2;
		}
yy631:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy666;
		default:	goto yy2;
		}
yy632:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy662;
		default:	goto yy2;
		}
yy633:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy640;
		case 'r':	goto yy639;
		default:	goto yy2;
		}
yy634:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy635;
		default:	goto yy2;
		}
yy635:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy636;
		default:	goto yy2;
		}
yy636:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy637;
		default:	goto yy2;
		}
yy637:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy638;
		default:	goto yy2;
		}
yy638:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy59;
		default:	goto yy2;
		}
yy639:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy652;
		default:	goto yy2;
		}
yy640:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy641;
		default:	goto yy2;
		}
yy641:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy642;
		default:	goto yy2;
		}
yy642:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy643;
		default:	goto yy2;
		}
yy643:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy644;
		default:	goto yy2;
		}
yy644:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy645;
		default:	goto yy2;
		}
yy645:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy646;
		default:	goto yy2;
		}
yy646:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy647;
		default:	goto yy2;
		}
yy647:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy648;
		default:	goto yy2;
		}
yy648:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy649;
		default:	goto yy2;
		}
yy649:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy650;
		default:	goto yy2;
		}
yy650:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy651;
		default:	goto yy2;
		}
yy651:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy64;
		default:	goto yy2;
		}
yy652:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy653;
		default:	goto yy2;
		}
yy653:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy654;
		default:	goto yy2;
		}
yy654:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy655;
		default:	goto yy2;
		}
yy655:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy656;
		default:	goto yy2;
		}
yy656:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy657;
		default:	goto yy2;
		}
yy657:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy658;
		default:	goto yy2;
		}
yy658:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy659;
		default:	goto yy2;
		}
yy659:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy660;
		default:	goto yy2;
		}
yy660:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy661;
		default:	goto yy2;
		}
yy661:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy66;
		default:	goto yy2;
		}
yy662:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy663;
		default:	goto yy2;
		}
yy663:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy664;
		default:	goto yy2;
		}
yy664:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy665;
		default:	goto yy2;
		}
yy665:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy68;
		default:	goto yy2;
		}
yy666:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy667;
		default:	goto yy2;
		}
yy667:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy668;
		default:	goto yy2;
		}
yy668:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy669;
		default:	goto yy2;
		}
yy669:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy670;
		default:	goto yy2;
		}
yy670:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy671;
		default:	goto yy2;
		}
yy671:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy672;
		default:	goto yy2;
		}
yy672:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy673;
		default:	goto yy2;
		}
yy673:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy73;
		default:	goto yy2;
		}
yy674:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy675;
		default:	goto yy2;
		}
yy675:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy676;
		default:	goto yy2;
		}
yy676:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy677;
		default:	goto yy2;
		}
yy677:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy678;
		default:	goto yy2;
		}
yy678:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy679;
		default:	goto yy2;
		}
yy679:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy680;
		default:	goto yy2;
		}
yy680:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy681;
		default:	goto yy76;
		}
yy681:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy682;
		default:	goto yy2;
		}
yy682:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy683;
		default:	goto yy2;
		}
yy683:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy684;
		default:	goto yy2;
		}
yy684:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy685;
		default:	goto yy2;
		}
yy685:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy686;
		default:	goto yy2;
		}
yy686:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy78;
		default:	goto yy2;
		}
yy687:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy688;
		default:	goto yy2;
		}
yy688:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy689;
		default:	goto yy2;
		}
yy689:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy690;
		default:	goto yy2;
		}
yy690:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy691;
		default:	goto yy2;
		}
yy691:
		yyaccept = 3;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy692;
		default:	goto yy31;
		}
yy692:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy693;
		default:	goto yy2;
		}
yy693:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy694;
		default:	goto yy2;
		}
yy694:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy695;
		default:	goto yy2;
		}
yy695:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy696;
		default:	goto yy2;
		}
yy696:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy34;
		default:	goto yy2;
		}
yy697:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy698;
		default:	goto yy2;
		}
yy698:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy699;
		default:	goto yy2;
		}
yy699:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy28;
		default:	goto yy2;
		}
yy700:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy708;
		default:	goto yy2;
		}
yy701:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy702;
		default:	goto yy2;
		}
yy702:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy703;
		default:	goto yy2;
		}
yy703:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy704;
		default:	goto yy2;
		}
yy704:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy705;
		default:	goto yy2;
		}
yy705:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy706;
		default:	goto yy2;
		}
yy706:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy707;
		default:	goto yy2;
		}
yy707:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy49;
		default:	goto yy2;
		}
yy708:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy709;
		default:	goto yy2;
		}
yy709:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy710;
		default:	goto yy2;
		}
yy710:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy711;
		default:	goto yy2;
		}
yy711:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy712;
		default:	goto yy2;
		}
yy712:
		++opt;
		switch ((yych = *opt)) {
		case 'e':	goto yy46;
		default:	goto yy2;
		}
	}
#line 1524 "cplus2asp.re2c"

}

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out) {
	out   << "Usage: " << execName << " INPUT_FILES [OPTIONS] [CONSTANTS] [NUM_SOLUTIONS]" << endl
		  << endl
		  << "Calls cplus2asp.bin (translator), f2lp (pre-processor), gringo (grounder)," << endl
		  << "clasp (solver), and as2transition (post-processor) on the input files" << endl
		  << "(CCalc-style files that have been translated to ASP/f2lp syntax), adding " << endl
		  << "\"standard\" CCalc to ASP translation support files and outputting the results " << endl
		  << "from as2transition." << endl
		  << endl
		  << "  INPUT_FILES ----------- A series of files in CCalc, ASP, or f2lp syntax." << endl
		  << "                          At least one input file is required." << endl
		  << "                          Any input files that have extensions \".f2lp\" or \".lp\"" << endl
		  << "                          will automatically not be passed to the translator." << endl
		  << endl
		  << "  OPTIONS --------------- Optional arguments that change the program's behavior." << endl
		  << endl
		  << "  CONSTANTS ------------- Constant definitions that are passed to the grounder." << endl
		  << "                          There are three special constants that are often seen in" << endl
		  << "                          CCalc programs, and so can be useful to manually set." << endl
		  << "                          These are not required to be defined if special \"hint\"" << endl
		  << "                          comments are placed in the output from the translator." << endl
		  << "                          * maxAdditive - The maximum additive integer (only needed if" << endl
		  << "                                          using additive fluents/actions)." << endl
		  << "                          * maxstep ----- The maximum time step to consider." << endl
		  << "                          * minstep ----- The minimum time step to consider." << endl
		  << "                          * query   ----- The query number (i.e., label) to select." << endl
		  << endl
		  << "  NUM_SOLUTIONS --------- The desired number of solutions for the solver to find." << endl
		  << "                          This should be a non-negative integer (0 or greater)." << endl
		  << "                          If not specified, defaults to 1." << endl
		  << endl
		  << "Normal Program Options:" << endl
		  << "  -auto" << endl
		  << "  --automated ----------- Makes the program run in automated mode, so it won't prompt" << endl
		  << "                          or ask for any information from the user." << endl
		  << endl
		  << "  CONST=VALUE" << endl
		  << "  -c CONST=VALUE" << endl
		  << "  --const CONST=VALUE --- Declares a constant & value pair to pass to gringo." << endl
		  << "                          You will probably need to at least declare values for" << endl
		  << "                          the constants maxstep, query, and possibly maxAdditive." << endl
		  << endl
		  << "  --help ---------------- Shows this usage message." << endl
		  << "  -v" << endl
		  << "  --version ------------- Outputs version information." << endl
		  << endl
		  << "  -m [MODE]" << endl
		  << "  --mode=[MODE] --------- Sets the program to run in the specified running mode." << endl
		  << "                          [MODE] can be one of the following: " << endl
		  << "                          * static-auto --- uses a static translation and automatically " << endl
		  << "                                            advances the queries maximum time step." << endl
		  << "                          * static-manual - uses a static translation and queries the " << endl
		  << "                                            user each time a solution isn't found for a " << endl
		  << "                                            new time step." << endl
		  << "                          * incremental --- [default] uses an incremental translation " << endl
		  << "                                            and solver for better efficiency while " << endl
		  << "                                            ranging over maxsteps in a query." << endl
		  << "                          * reactive ------ uses a incremental translation and reactive " << endl
		  << "                                            solver in order to dynamically adding abnormality " << endl
		  << "                                            constants during execution."  << endl
		  << endl
		  << " -q [QUERY]" << endl
		  << " --query [QUERY] -------- Sets the query to use from those available in the C+ domain. " << endl
		  << "                          [QUERY] should be a positive integer and should be defined in " << endl
		  << "                          the domain file." << endl
		  << endl
		  << " -max [STEP]" << endl
		  << " --maxstep [STEP] ------- Sets the maximum step to solve for to [STEP]. [STEP] must be a " << endl
		  << "                          positive integer or a finite positive range (i.e. '1..5')." << endl
		  << "                          A range is seen as shorthand for a combined minimum and maximum " << endl
		  << "                          step definition." << endl
		  << endl
		  << " -min [STEP]" << endl
		  << " --minstep [STEP] ------- Sets the minimum step to solve for to [STEP]. [STEP] must be a " << endl
		  << "                          positive integer." << endl
		  << endl
		  << " -p [PORT]" << endl
		  << " --port [PORT] ---------- Sets the port used to connect with external client programs. " << endl
		  << "                          This option is only valid in reactive mode." << endl
		  << " -i [PORT]" << endl
		  << " --internal-port [PORT] - Sets the port used for internal communication between the " << endl
		  << "                          reactive solver and bridge. This option is only valid in " << endl
		  << "                          reactive mode." << endl
		  << endl
		  << " -nh" << endl
		  << " --none-hack={true,false} Indicates that we should simulate the 'none' value as a integral " << endl
		  << "                          type. This is helpful for circumventing a bug in Gringo 3.0.4 that " << endl
		  << "                          sometimes prevents domains from properly grounding due to " << endl
		  << "                          unification issues." << endl
		  << endl
		  << " -s" << endl
		  << " --shift={true,false} --- Allows the sovler to shift disjunction in the head of a rule generated by the" << endl
		  << "                          pre-processor into the body. This is useful when the preprocessor generates" << endl
		  << "                          disjunctive rules and a disjunctive solver isn't available. May not be" << endl
		  << "                          guaranteed to preserve stable models." << endl
		  << endl
		  << "Extra Program Options:" << endl
		  << "  Options with [PROG] or [PROGRAM] in their name affect individual" << endl
		  << "  programs in the tool chain, depending on [PROG] or [PROGRAM]'s value." << endl
		  << "  Any option with [PROG] in its name should have [PROG] replaced with one of:" << endl
		  << "    gr (grounder), pre (pre-processor), post (post-processor), so (solver)," << endl
		  << "    trans (translator), or br (reactive bridge)." << endl
		  << "  Replace [PROGRAM] in the applicable options with one of the following:" << endl
		  << "    grounder, pre-processor, post-processor, solver, translator, or bridge." << endl
		  << endl
		  << "  -[PROG] PATH" << endl
		  << "  --[PROGRAM] PATH -------- Gives a new path to the desired tool chain program." << endl
		  << endl
		  << "  -[PROG]opt \"OPTS\"" << endl
		  << "  --[PROGRAM]-opts \"OPTS\" - Passes OPTS to the given tool chain program." << endl
		  << endl
		  << "  -from[PROG]" << endl
		  << "  --from-[PROGRAM] -------- Starts running the tool chain from the given program." << endl
		  << endl
		  << "  -just[PROG]" << endl
		  << "  --just-[PROGRAM] -------- Removes all but the given program from the tool chain." << endl
		  << endl
		  << "  -nodel" << endl
		  << "  --no-delete ------------- Stops the program from deleting intermediate files created" << endl
		  << "                            during processing, grounding, and solving." << endl
		  << endl
		  << "  -nostd" << endl
		  << "  --no-standard ----------- Removes the standard translation files from the call to the" << endl
		  << "                            pre-processor. Useful if supplying different \"standard\"" << endl
		  << "                            files, or for debugging of input file errors." << endl
		  << endl
		  << "  -to[PROG]" << endl
		  << "  --to-[PROGRAM] ---------- Stops running the tool chain after the given program." << endl
		  << endl
		  << "  -sw" << endl
		  << "  --solver-warnings ------- Displays all warnings originating from the solver." << endl
		  << "                            These are disabled by default as a number of warnings" << endl
		  << "                            regarding undefined atoms are normal due to the standard" << endl
		  << "                            files." << endl
		  << endl
		  << "  Example: " << execName << " myProgram.cp" << endl
		  << "           would translate and process the file \"myProgram.cp\"," << endl
		  << "           interactively asking which query from the file to run, returning" << endl
		  << "           the first solution found (if any)." << endl
		  << "  Example: " << execName << " myProgram.cp query=1 2" << endl
		  << "           does the same as above, except it automatically runs Query 1" << endl
		  << "           (assuming it can find or derive maxstep), and tries to find two" << endl
		  << "           solutions to the query." << endl
		  << "  Example: " << execName << " myProgram.cp query=1 maxstep=3 -so cmodels 2" << endl
		  << "           would do the same as above, but it changes the solver to cmodels" << endl
		  << "           and forces maxstep to be 3." << endl
		  << "  Example: " << execName << " myProgram.f2lp --just-pre-processor" << endl
		  << "           skips running the translator because the input file has" << endl
		  << "           the .f2lp extension, just running f2lp (the pre-processor)" << endl
		  << "           on the contents of \"myProgram.f2lp\", outputting the results." << endl;
	return out;
}

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out) {
	// Show version information and quit.
	out << execName << " version " << VERSION_MAJOR;
	out << "." << VERSION_MINOR;
	if(VERSION_REV > 0) { cout << "." << VERSION_REV; }
	return out;
}


void scanFilesForConstants(Config& config, bool ranTranslator) {


	// Go through the input file(s) looking for special "hint" comments
	// that tell us the value of maxAdditive, maxstep, and/or query.
	// Loop through the file(s) looking for hints for any undefined constants.

	// Start with the output of the translator
	if(config.run(Config::TC_TRANSLATOR))
	{	// Start with the output from the translator.
		debug("Starting with the translator output file...",true);
		scanForConstants(config, config.intTransFile());
	}


	// Scan all other input files
	for (Config::Toolchain tool = Config::TC_BEGIN; tool < Config::TC_END; tool = (Config::Toolchain)(((int) tool) + 1)) {
		for (Config::InputList::const_iterator it = config.beginInput(tool); it != config.endInput(tool); it++) {
			scanForConstants(config, *it);
		}

	}
}





void scanForConstants(Config& config, std::string const& file) {
	std::string tempLine = "";
	std::string tempString;
	std::ifstream fin;

	std::string findText = "";
	size_t tempPos, tempPos2;
	size_t currentLine = 0;

	bool foundQuery = false;
	unsigned int tempInt;
	Config::Query tempQuery;					// Temporary place to store query information.
	std::stringstream nameBuilder;


	// Open the file
	fin.open(file.c_str());

	// If at any point we fail to open an input file, just skip over it...
	if(fin.fail()) {
		// Throw a warning!
		warning("Unable to open file '%s' for scanning. Skipping it.", true, file.c_str());
	}


	while(!fin.eof()) {
		// Go line by line looking for specially-formatted comments.
		getline(fin, tempLine);
		currentLine++;
		if (tempLine.empty()) continue;

		// Look for a maxadditive definition
		if ( config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED) {
			// Look for a maxAdditive hint comment.
			// If one is found, set maxAdditive

			findText = "% [MaxAdditive:";
			tempPos = tempLine.find(findText);

			if(tempPos != string::npos)
			{
				debug("Found what appears to be a maxAdditive definition: '%s'", true, tempLine.c_str());
				tempPos += findText.length();
				tempPos2 = tempLine.find("]", tempPos);
				if(tempPos2 != string::npos && tempPos2 > tempPos)
				{
					tempString = tempLine.substr(tempPos, tempPos2 - tempPos);
					if(from_string(tempInt, tempString))
					{
						// Found maxAdditive, set it and flag that we need the additive standard file.
						pragma("Found a maxAdditive hint. Setting maxAdditive to '%d'.", true, tempInt);
						config.intConfigOpt(Config::OPT_MAXADDITIVE, tempInt);
					} else {
						// It looks like this hint is malformed. Be sure to warn them!
						warning("The maxAdditive hint '%s' is malformed. Ignoring it.", true, tempLine.c_str());
					}
				}
			}
		}

		// Look for a query hint comment.
		// Collect any that are found.
		findText = "% [Query: Label:";

		if((tempPos = tempLine.find(findText)) != std::string::npos
				&& (tempPos += findText.length())
				&& (tempPos2 = tempLine.find_first_of(",]", tempPos)) != std::string::npos
				&& tempPos2 > tempPos)
		{
			foundQuery = false;
			debug("Found what appears to be a query definition: '%s'", true, tempLine.c_str());
			tempString = tempLine.substr(tempPos, tempPos2 - tempPos);

			if(from_string(tempInt, tempString)) {
				// Found a query's label, keep it and look for the maxstep...
				tempQuery.id = tempInt;

				findText = "Maxstep:";
				if (tempLine.at(tempPos2) != ']' // Don't bother if we're at the end of the hint...
						&& (tempPos = tempLine.find(findText, tempPos2)) != std::string::npos
						&& (tempPos += findText.length())
						&& (tempPos2 = tempLine.find("]", tempPos)) != std::string::npos
						&& tempPos2 > tempPos) {

					// This would be a maximum step definition
					// This could be an integer M
					// Or this could be a range M::N or M..N
					tempString = tempLine.substr(tempPos, tempPos2 - tempPos);

					size_t sepBegin, sepEnd;

					if (((sepBegin = tempString.find("::")) != std::string::npos
							|| (sepBegin = tempString.find("..")) != std::string::npos)
						&& (sepEnd = sepBegin + 2)
						&& from_string(tempQuery.minstep, tempString.substr(0, sepBegin))
						&& from_string(tempQuery.maxstep, tempString.substr(sepEnd, std::string::npos))){
						// The query is good and contains a minstep and maxstep.
						foundQuery = true;
					} else if (from_string(tempQuery.maxstep, tempString)) {
						// The query is good and contains only a maxstep.
						// The minstep is undefined.
						tempQuery.minstep = tempQuery.maxstep;
						foundQuery = true;
					} else {
						// The step information is malformed.
						// Warn them...
						warning("[%s:%d]: The query hint '%s' has a malformed step maxstep parameter. Ignoring the maximum step information...", true, file.c_str(), currentLine, tempLine.c_str());
						tempQuery.minstep = Config::UNDEFINED;
						tempQuery.maxstep = Config::UNDEFINED;
						foundQuery = true;
					}
				} else {
					// No maxstep information to be found. This is ok.
					tempQuery.maxstep = Config::UNDEFINED;
					tempQuery.maxstep = Config::UNDEFINED;
					foundQuery = true;
				}
			} else {
				// The query ID is malformed... Warn them and move on.
				warning("[%s:%d]: The query hint '%s' has a malformed query ID. Ignoring it.", true, file.c_str(), currentLine, tempLine.c_str());
			}

			if (foundQuery) {
				// The query was good. We can go ahead and register it.
				// Generate a name...
				nameBuilder.str("");
				nameBuilder << "Query " << tempQuery.id;

				//if (tempQuery.minstep != Config::UNDEFINED && tempQuery.maxstep != Config::UNDEFINED)
				//	nameBuilder << " (" << tempQuery.minstep << ".." << tempQuery.maxstep <<")";
				//else if (tempQuery.maxstep != Config::UNDEFINED)
				//	nameBuilder << " (" << tempQuery.maxstep <<")";

				tempQuery.name = nameBuilder.str();

				// Build the command
				nameBuilder.str("");
				nameBuilder << tempQuery.id;
				tempQuery.cmd = nameBuilder.str();

				// Attempt to register it.
				debug("Registering query '%s'...", true, tempQuery.name.c_str());
				if (!config.addQuery(tempQuery)) {
					warning("[%s:%d]: Detected duplicate queries with ID '%d'. Ignoring the most recent one found.", file.c_str(), currentLine, tempQuery.id);
				}
			}
		}
	}

	// Clean up and move on...
	fin.close();
}


// [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig)
{
	std::string line, value;
	Config::Query const* query;
	Interpreter::Action action;
	bool goodInput = false;
	std::pair<unsigned int, unsigned int> steps;


	std::cout << std::endl;
	showQueries(config, std::cout);
	std::cout << std::endl;

	while (!goodInput) {

		// Get user input
		goodInput = true;
		query = NULL;

		Interpreter::showHelp(std::cout);
	
		do {
			std::cout << "$- ";
			std::getline(std::cin,line);

			if (std::cin.eof()) {
				// gracefully handle ctrl-d
				std::cin.clear();
				std::cin.ignore();
				continue;
			}


			// Interpret the command.
			action = Interpreter::interpret(line, value);
			switch (action) {
			case Interpreter::SET_QUERY:

				// Scan through the queries and try to find the one they (hopefully) selected.
				for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries() && !query; it++) {
					if (it->second.cmd == value) {
						query = &(it->second);
					}
				}

				// make sure we got a query...
				if (!query) {
					goodInput = false;
					std::cout << "Invalid query selection.";
				}

				break;

			case Interpreter::SET_NUMSOLN:	
				goodInput = from_string(runconfig.numSoln, value);
				break;

			case Interpreter::SET_MAXSTEP:
				steps = Config::parseMaxstep(value);
				if (steps.second == Config::UNDEFINED) goodInput = false;
				else {
					if (steps.first != Config::UNDEFINED) runconfig.minstep = steps.first;
					runconfig.maxstep = steps.second;

					if (runconfig.minstep == Config::UNDEFINED) {
						std::cout << "Autosetting minstep to 0." << std::endl;
						runconfig.minstep = 0;
					}
				}

				break;

			case Interpreter::SET_MINSTEP:
				goodInput = from_string(runconfig.minstep, value);
				break;
		
	
			case Interpreter::SHOW_HELP:
				showQueries(config, std::cout);
				std::cout << std::endl;
				Interpreter::showHelp(std::cout);
				break;

			case Interpreter::EXIT:
				// signal the exit.
				return false;
			default:
				// bad input
				goodInput = false;
				break;
			}

		} while ( goodInput && !query );

		if (!goodInput) {
			std::cout << std::endl << "Error: Invalid choice." << std::endl;
		}
	} while (!goodInput && !query);

	runconfig.queryId = query->id;
	return true;
}

// Displays the queries which have been found.
void showQueries(Config const& config, std::ostream& output) {

	output << "The following queries are available to run:" << std::endl << std::endl;


	for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries(); it++) {
		output << '\t' << std::setw(15) << std::right << it->second.cmd << ": " << std::setw(20) << std::left << it->second.name;

		if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)
				|| (!config.customConfigOpt(Config::OPT_MAXSTEP) && it->second.maxstep != Config::UNDEFINED) ) {
			output << " [ ";
	
			if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)) {
				output << it->second.minstep;
			} else {
				output << "0";
			}


			if (it->second.maxstep == Config::UNDEFINED)
				output << "...";
			else if ((it->second.minstep == Config::UNDEFINED && it->second.maxstep != 0)
					|| it->second.minstep != it->second.maxstep)
				output << ".." << it->second.maxstep;

			output << " ]";
		}
		output << std::endl;
	}

}

// Asks the user to select a max step.
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defVal) {
	unsigned int ret = Config::UNDEFINED;
	std::string line;
	bool goodInput = false;

	while (!goodInput) {

		// Prompt user input
		std::cout << "Please select a (non-negative) value for the " << constant << ". You may input 'exit' to exit the program." << std::endl;
		std::cout << "Selected value";
		if (defVal != Config::UNDEFINED) std::cout << " [" << defVal << "]";
		std::cout << ": ";



		std::getline(std::cin,line);
		line = trimWhitespace(line);

		// Make sure they don't want to exit.
		if (line == EXIT_CMD) {
			// crap, they do. returning UNDEFINED will indicate this.
			goodInput = true;
			ret = Config::UNDEFINED;
		}
		// Check if they want to go for a default value
		else if (defVal != Config::UNDEFINED && line == "") {
			ret = defVal;
			goodInput = true;
		}
		// Check if they have provided any other valid input...
		else if (from_string(ret, line)) {
			goodInput = true;
		}

		if (!goodInput) {
			std::cout << "Error: Invalid selection." << std::endl;
		}

	}

	return ret;
}

int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig) {
	std::string tmpCmd;
	int ret = TC_STAT_TOOLSKIPPED;

	if (!config.run(tool)) {
		debug("Skipping %s execution.", true, name.c_str());
	} else if (!config.cumulativeInputCount(tool)) {
		pragma("No input files for the %s have been specified. Skipping it.", true, name.c_str());
	} else {
		// Run the translator...
		tmpCmd = config.compileCommandLine(tool, subconfig);
		debug("Running the %s with command: %s",true,name.c_str(), tmpCmd.c_str());
		int stat = system(tmpCmd.c_str());
		ret = WEXITSTATUS(stat);
	}

	return ret;
}

void cleanup(Config const& config, bool const* ran) {
	std::ostringstream builder;
	std::string tmpCmd;
	bool filesToDelete = false;

	builder << "rm";

	if (config.boolConfigOpt(Config::OPT_DISCARD_F2LP)) {
		// Discard F2LP intermediates...
		if (ran[Config::TC_PREPROC]) {
			builder << " " << F2LP_INPUT_FILE << " " << F2LP_OUTPUT_FILE;
			filesToDelete = true;
		}
	}

	if (config.boolConfigOpt(Config::OPT_DISCARD_INTERMEDIATE)) {
		if (ran[Config::TC_TRANSLATOR]) {
			builder << " " << config.intTransFile() << " " << config.intTransSymTabFile();
			filesToDelete = true;
		}

		if (ran[Config::TC_PREPROC]) {
			builder << " " << config.intPreprocFile();
			filesToDelete = true;
		}

		if (ran[Config::TC_GROUNDER]) {
			builder << " " << config.intGrdFile();
			filesToDelete = true;
		}

		if (ran[Config::TC_SOLVER]) {
			builder << " " << config.intSoFile();
			builder << " " << config.intSoErrFile();
			filesToDelete = true;
		}
	}

	builder << " 2> /dev/null";

	if (filesToDelete) {
		tmpCmd = builder.str();
		debug("Deleting temporary files with command '%s'.", true, tmpCmd.c_str());
		system(tmpCmd.c_str());
	} else {
		debug("There are no files to delete.", true);
	}
}

/**
 * Attempts to echo the specified file to the specified output stream.
 * @param out The output stream to print to.
 * @param filename The file to open.
 * @return True if the file exists, false otherwise.
 */
bool echoFile(std::ostream& out, std::string const& filename) {
	std::ifstream file(filename.c_str());
	char buf[4096];

	if (file.fail()) {
		return false;
	}

	while (!file.eof()) {
		file.read(buf, 4096);
		out.write(buf, file.gcount());
	}

	return true;
}

