/* Generated by re2c 0.13.5 on Mon Sep  9 13:38:12 2013 */
#line 1 "cplus2asp.re2c"
/* 
 * Copyright (c) 2010-2013 <Joseph Babb, Michael Cassollary, Joohyung Lee>
 *
 * For information on how to contact the authors, please visit
 *	http://reasoning.eas.asu.edu/cplus2asp
 *
 * This file is part of the cplus2asp system.
 *
 * cplus2asp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cplus2asp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** @file cplus2asp.cpp
 *  @brief Calls a tool chain of a translator, pre-processor, answer set solver, and post-processor on a CCalc program translated to ASP syntax.
 *  @author v2.0+ Joseph Babb (v1.0 Michael Casolary)
 *  @date 07/2011
 */

/* History:
 * v2.3 - Fixed several small issues. Added Syntactic checking for BC. Added experimental language BC+ as a proper extension of BC allowing arbitrary formulas in the body and choice rules in the head.
 * v2.2 - Major revision of command-line arguments. Revised command line calls to provide system portability.
 * v2.1 - Restructured the interactive interface for more user friendly interactions.
 * v2.0 - Restructured options parser. Added incremental translation functionality. Added automated detection and handling of additive/abnormal constants.
 * v1.7 - Implemented "-from[PROG]" and "-to[PROG]" options to give better control over running a partial tool chain.
 * v1.6.2 - Fixed bugs, "-notrans" wasn't shutting off the translator, "-gropt" and "-grsoopt" were mixed up. Set up system to track when tool chain programs have errors.
 * v1.6.1 - Fixed bug where program might get wrong values back from system calls (depending on OS).
 * v1.6 - cplus2asp now supports integrated grounder-solvers (like clingo), using the option -grso / --grounder-solver. Added automatic searching though queries with ranged maxsteps, with an option to switch to manual mode (-mm). Removed support for using piped tool chain commands. Added automated "non-interactive" mode option (-auto).
 * v1.5.2 - Tweaked status outputs to be compatible with benchmarking scripts, adjusted output messages to make more sense.
 * v1.5.1 - Renamed to cplus2asp, also renamed translator & standard file dependencies.
 * v1.5 - Skips translating any files with .f2lp or .lp extensions, not just if all files have those extensions.
 * v1.4.1 - Made file name output more friendly, ensured all steps of the tool chain work together properly.
 * v1.4 - Added ccalc2asp.bin (translator) to tool chain, including options to control its usage, and an ability to interactively guess critical constant values based on hints given in comments in the input files.
 * v1.3.5 - Fixed bug with post-processor not receiving options correctly.
 * v1.3.4 - Now passes input file to solver via standard in redirection.
 * v1.3.3 - Added option to use pipes instead of intermediate files to send data between tool chain programs (i.e., pre-v1.3 behavior).
 * v1.3.2 - Sends input files to the first tool in the tool chain that isn't disabled.
 * v1.3.1 - Fixed bug with spaces in path causing odd behavior and errors from tool chain.
 * v1.3 - Changed default post-processor to as2transition, changed default standard files to ccalc2asp_std.f2lp & ccalc2asp_additive.f2lp, changed argument handler to allow generic "const=value" arguments without needing "-c" before them, added intermediate file usage and auto-deletion, added options to pass command-line options directly to any of the tool chain programs.
 * v1.2 - Added option to un-include the standard translation files from the call to the pre-processor.
 * v1.1 - Added options to turn off programs in the tool chain.
 * v1.0 - First working version.
 */

#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <utility>
#include <vector>
#include <list>
//#include <climits> // for PATH_MAX, INT_MIN
#include <cstring>
//#include <string.h>
//#include <cstdlib>
#include <iomanip>
#include <exception>

#ifndef BOOST_FILESYSTEM_VERSION
#define BOOST_FILESYSTEM_VERSION 3
#endif
#include <boost/filesystem.hpp>
#include <boost/iostreams/device/file_descriptor.hpp>
#include "boost/process.hpp"
#include "boost/process/mitigate.hpp"

#include "Config.h"
#include "utils.h"
#include "Interpreter.h"

namespace bp = boost::process;
namespace bfs = boost::filesystem;
namespace bio = boost::iostreams;

#define VERSION_MAJOR 2
#define VERSION_MINOR 3
#define VERSION_REV 0

#ifndef PATH_MAX
  #define PATH_MAX 4096
#endif

/// An enum of the various command line options available.
enum Option {
	OPT_AUTO,
	OPT_BRIDGE,
	OPT_BRIDGE_OPTS,
	OPT_BRIDGE_OUT,
	OPT_CONST,
	OPT_FRM_BRIDGE,
	OPT_FRM_GRD,
	OPT_FRM_PRE,
	OPT_FRM_POST,
	OPT_FROM_SO,
	OPT_FROM_TRAN,
	OPT_GRD,
	OPT_GRD_OPTS,
	OPT_GRD_OUT,
	OPT_GRINGO_NONE_HACK,
	OPT_JUST_GRD,
	OPT_JUST_PRE,
	OPT_JUST_POST,
	OPT_JUST_SO,
	OPT_JUST_TRANS,
	OPT_LANG,
	OPT_MAXSTEP,
	OPT_MINSTEP,
	OPT_MODE_SELECT,
	OPT_MODE_STATIC_AUTO,
	OPT_MODE_STATIC_MANUAL,
	OPT_MODE_INCREMENTAL,
	OPT_MODE_REACTIVE,
	OPT_NO_DEL,
	OPT_NO_STD,
	OPT_PORT_INTERNAL,
	OPT_PORT_EXTERNAL,
	OPT_POSTPROC,
	OPT_POSTPROC_OPTS,
	OPT_POSTPROC_OUT,
	OPT_PREPROC,
	OPT_PREPROC_OPTS,
	OPT_PREPROC_OUT,
	OPT_SHIFT,
	OPT_SO,
	OPT_SO_OPTS,
	OPT_SO_OUT,
	OPT_STATS,
	OPT_SYMTAB,
	OPT_TO_BRIDGE,
	OPT_TO_GRD,
	OPT_TO_PRE,
	OPT_TO_POST,
	OPT_TO_SO,
	OPT_TO_TRANS,
	OPT_TRANS,
	OPT_TRANS_OPTS,
	OPT_TRANS_OUT,
	OPT_VERSION,
	OPT_HELP,
	OPT_QUERY,
	OPT_UNSUPPORTED,
	OPT_UNSUPPORTED_ADDITIVE,
	OPT_UNSUPPORTED_GRSO,
	OPT_UNSUPPORTED_MANUAL_MAXSTEP,
	OPT_UNKNOWN
};

/// Return codes from known tool chain programs indicating their final status.
enum StatusFlags
{
	TC_STAT_OK = 0,												///< Universal OK.
	TC_STAT_BG = 130,											///< Exit code indicating that the task is running in the background.
	TC_STAT_IO_ERR = -8274,										///< Psuedo exit code indicating that we couldn't open the output file.
	TC_STAT_EXEC_ERR = -8273,									///, Psuedo exit code indicating that the tool failed to execute.
	TC_STAT_TOOLSKIPPED = INT_MIN,								///< Psuedo return code indicating that the tool execution was skipped for some reason.
	TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK = 0x80,			///< Bitmask to determine if cplus2asp detected abnormalities.
	TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK = 0x40,				///< Bitmask to determine if cplus2asp detected additive fluents.
	TC_STAT_SO_CLINGO_FOUND_SOLUTIONS = 10,						///< return code indicating that clingo (or other similar programs) found solutions.
	TC_STAT_SO_CLINGO_NO_SOLUTIONS = 20,						///< return code indicating that clingo (or other similar programs) failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS = 100,			///< return code indicating that as2transition failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS = 101		///< return code indicating that as2transition found solutions.
};

/// Status flags that can be returned by the options parser.
enum OptionStatus
{
	OPT_STAT_OK,			///< Everything is ok, continue execution.
	OPT_STAT_BAD_ARG,		///< One or more bad arguments was found. Stop execution.
	OPT_STAT_HELP,			///< The user requested the help message be displayed.
	OPT_STAT_VERSION		///< The user requested the version message be displayed.
};

/// Mode selection constants (for argument parsing)
#define ARG_MODE_STATIC_MANUAL  "static-manual"
#define ARG_MODE_STATIC_AUTO 	"static-auto"
#define ARG_MODE_INCREMENTAL	"incremental"
#define ARG_MODE_REACTIVE		"reactive"

/// Flags used to efficiently indicate that we're missing a constant.
#define CONST_MAXSTEP_MASK 		0x80
#define CONST_QUERY_MASK 		0x40
#define CONST_MAXADDITIVE_MASK  0x20
#define CONST_MINSTEP_MASK		0x10
#define CONST_EXT_PORT_MASK		0x08

/// The command used to exit the program during interactive prompts.
#define EXIT_CMD				"exit"

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @param val A value for the option, where applicable (NULL otherwise).
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt, char const*& val);

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out);

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out);

/**
 * Parses the provided command line arguments and sets the configurations appropriately.
 * @param argc The number of command line arguments provided to the program.
 * @param argv The command line arguments provided to the program.
 * @param[out] outConf The configurations object to write to.
 * @return A status flag indicating the results of the parsing.
 */
OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf);

 /**
  * [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
  * @param config The program's configuration options.
  * @param runconfig The run's configurations that will be updated.
  * @param first Whether this is the first run or not.
  * @param[out] runconfig The run's configurations that will be updated.
  * @return True if the program should continue execution, false otherwise.
  */
bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig, bool first = false);

/**
 * Displays the queries which have been found.
 * @param config The program's configuration.
 * @param[out] output The output stream to write to.
 */
void showQueries(Config const& config, std::ostream& output);

/**
 * Displays the current run-time configuration for the system.
 * @param config the master configuration.
 * @param runconfig The overridin run configuration.
 * @param output The stream to output to.
 */
void showConfig(Config const& config, Config::RunConfig const& runconfig, std::ostream& output);

/**
 * [interactive] Queries the user to select a value for the specified constant.
 * @param config The program's configuration options.
 * @param constant The constant's name to ask for.
 * @param defval The default value of the constant (Config::UNDEFINED for no default).
 * @return The selected value or Config::UNDEFINED to indicate the user wishes to exit the program.
 */
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defval = Config::UNDEFINED);

/**
 * Scans through all of the available input files in order to attempt to find the required constants.
 * @param config The configuration for the program. The list of queries in the configuration may be added to.
 * @param ranTranslator Whether the translator was ran.
 */
void scanFilesForConstants(Config& config, bool ranTranslator);

 /**
  * Scans through a provided input files in order to attempt to find the required constants.
  * @param config The configuration for the program. The list of queries in the configuration may be added to.
  * @param file The name of the file to scan.
  */
void scanForConstants(Config& config, std::string const& file);

/**
 * Runs the specified tool in the toolchain IF it is not disabled in the toolchain configuration.
 * @param config The configuration for the program.
 * @param tool The tool to run.
 * @param name The human readable name of the tool (for output purposes).
 * @param subconfig The sub configuration settings which will override the configuration settings.
 * @return The status code from running the program (TC_STAT_TOOLSKIPPED indicates that it did not run).
 */
int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig = NULL);


/**
 * @brief Processes the provided error file applying any error filters and printing the rest.
 * @param config The system configuration.
 * @param tool The tool that generated the error file.
 * @param file The error file.
 * @return True if the file exists and was successfully opened, false otherwise.
 */
bool processErrors(Config const& config, Config::Toolchain tool, std::string const& file);


/**
 * Cleans up the intermediate files generated during program execution.
 * @param config The program's configuration.
 * @param ran An array of booleans of length Config::_TC_LENGTH_ detailing which components have ran.
 */
void cleanup(Config const& config, bool const* ran);

/**
 * Attempts to echo the specified file to the specified output stream.
 * @param out The output stream to print to.
 * @param filename The file to open.
 * @return True if the file exists, false otherwise.
 */
bool echoFile(std::ostream& out, std::string const& filename);

/**
 * Attempts to echo the solver stats from the specified file.
 * @param out The output stream to print to.
 * @param filename The file to read from.
 * @return True if the file exists and contains stats data that was printed, false otherwise.
 */
bool echoStats(std::ostream& out, std::string const& filename);

int main(int argc, char** argv)
{

	std::string strEXEName = argv[0]; 						// Name of this executable.
	std::string tmpCmd;				 						// temporary command string.

	std::vector<std::string> vecConstants; 						// List of constants to pass to the grounder.
	int intSystemResult = 0; 							// Holds what comes back from system().
	

	Config config(argv[0]);								// The almighty system configuration.

	bool ran[Config::_TC_LENGTH_];						// Variable used to track which toolchain components we have ran so far.
	memset(ran, 0, Config::_TC_LENGTH_);


	bool blnFoundSolutions = false; 					// Set to true if the solver or post-processor indicates solutions were found.


	/***************************************************************************************************/
	/* Command Line Parsing */
	/***************************************************************************************************/
	
	// Process command-line arguments.
	utils::debug("Parsing Options...", true);
	switch (parseCommandOptions(argc, argv, config)) {
	case OPT_STAT_OK:
		// We're good to go!
		break;
	case OPT_STAT_BAD_ARG:
		utils::error("A problem occurred parsing program arguments. Exiting.", true, 0);
		showHelp(strEXEName, std::cout);
		cleanup(config, ran);
		utils::nice_exit(utils::EXT_CODE_BAD_ARGS,NULL);
		break;
	case OPT_STAT_HELP:
		showHelp(strEXEName, std::cout);
		cleanup(config, ran);
		utils::nice_exit(utils::EXT_CODE_GOOD,NULL);
		break;
	case OPT_STAT_VERSION:
		showVersion(strEXEName, std::cout);
		cleanup(config, ran);
		utils::nice_exit(utils::EXT_CODE_GOOD,NULL);
		break;
	}
	
	/***************************************************************************************************/
	/* Command Sanity Checks */
	/***************************************************************************************************/

	// Sanity checks...
	// Make sure that we aren't in manual mode with suppressed user interaction...
	if (config.mode() == Config::MODE_STATIC_MANUAL && config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {
		utils::warning("Unable to manually advance the time step in with the '--auto' flag asserted. Switching to '%s' mode.", true, ARG_MODE_STATIC_AUTO);
		config.mode(Config::MODE_STATIC_AUTO);
	}

	// Ensure we are doing _something_
	bool doingSomething = false;
	for (Config::Toolchain tool = Config::_TC_BEGIN_; tool < Config::_TC_END_ && !doingSomething; tool = (Config::Toolchain)(((int) tool) + 1)) {
		if (config.run(tool) && config.command(tool) != "")
			doingSomething = true;
	}
	if (!doingSomething) {
		// Everything is disabled.
		utils::pragma("The toolchain is empty. Exiting.", true, utils::EXT_CODE_GOOD);
	}

	utils::debug("The command line options are sane.", true);
	/***************************************************************************************************/
	/* Translator */
	/***************************************************************************************************/

	
	// Run the translator if it's called for.
	utils::debug("Beginning translator subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_TRANSLATOR, "translator")) != TC_STAT_TOOLSKIPPED) {

		// It Ran!
		ran[Config::TC_TRANSLATOR] = true;

		if (!config.run(Config::TC_PREPROC)) {
			if (!echoFile(std::cout, config.output(Config::TC_TRANSLATOR))) {
				utils::error("Unable to read from the translator output file '%s'", true, -1, config.output(Config::TC_TRANSLATOR).c_str());
			}
		}


		// check the status and make sure all is well...
		if((intSystemResult & ~TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK & ~TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK) != TC_STAT_OK)
		{
			cleanup(config, ran);
			utils::error("An error occurred while executing the translator.",true, utils::EXT_CODE_TOOLCHAIN_TRANS_ERR);
		}

		// Check for abnormalities...
		if (intSystemResult & TC_STAT_TRANS_CPLUS2ASP_ABNORMALITY_MASK) {
			// The abnormality mask is set, meaning that there is at least one abnormality...

			if (!config.customMode()) {
				// They haven't specified a mode. Default to REACTIVE.
				utils::pragma("One or more abnormality constants have been detected. Defaulting to the '%s' mode.", true, ARG_MODE_REACTIVE);
				config.mode(Config::MODE_REACTIVE);
			} else if (config.mode() == Config::MODE_STATIC_AUTO || config.mode() == Config::MODE_STATIC_MANUAL) {
				utils::warning("One or more abnormality constants have been detected while operating in a static mode. This isn't recommended as many answer-sets will be generated.",true);
			}
		}

		if ((intSystemResult & TC_STAT_TRANS_CPLUS2ASP_ADDITIVE_MASK)) {
			// The additive mask is set, meaning that there is at least one additive constant...
			if (config.boolConfigOpt(Config::OPT_INCL_STD)) {
				utils::pragma("One or more additive constants have been detected. Including the additive standard file.",true);
				config.boolConfigOpt(Config::OPT_INCL_ADDITIVE, true);
			} else {
				utils::warning("One or more additive constants have been detected but the standard file has been suppressed. The additive standard file will not be included.",true);
			}
		}
	}

	/**********************************************************************************************************************/
	/* Pre-processor */
	/**********************************************************************************************************************/
	utils::debug("Entering pre-processor subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_PREPROC, "pre-processor")) != TC_STAT_TOOLSKIPPED)  {
		// It Ran!
		ran[Config::TC_PREPROC] = true;

		if (!config.run(Config::TC_GROUNDER) && !config.run(Config::TC_SOLVER)) {
			if (!echoFile(std::cout, config.output(Config::TC_PREPROC))) {
				utils::error("Unable to read from the pre-processor output file '%s'", true, -1, config.output(Config::TC_PREPROC).c_str());
			}
		}
		
		// check the status and make sure all is well...
		if(intSystemResult != TC_STAT_OK)
		{
			cleanup(config, ran);
			utils::error("An error occurred while executing the pre-processor.",true, utils::EXT_CODE_TOOLCHAIN_PREPROC_ERR);
		}

	}

	/**********************************************************************************************************************/
	/* Intermediate Processing & Final Configuration */
	/**********************************************************************************************************************/

	utils::debug("Translation done. Performing intermediate processing and final configuration.", true);


	// If any of the "critical" constants aren't defined and one of the
	// "active" tool chain programs is going to need the constants, try
	// finding "hint" comments in the input that we can use to fill in details.

	if (config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER)) {

		// We should determine the maxAdditive and port information outside of the interactive loop.
		// The query, maxstep, and minstep information can be determined from within.

		// If any of the "critical" constants aren't defined and one of the
		// "active" tool chain programs is going to need the constants, try
		// finding "hint" comments in the input that we can use to fill in details.

		unsigned int tmpVal;

		// Scan the files for the required constants. Hopefully one of them has it!
		// We should also scan the files in the event a query hasn't been specified (we'll need it!)
		if ((config.boolConfigOpt(Config::OPT_INCL_ADDITIVE) && !config.customConfigOpt(Config::OPT_MAXADDITIVE))
				|| config.strOpt(Config::STR_QUERY) == ""
				|| config.intConfigOpt(Config::OPT_MAXSTEP) == Config::UNDEFINED
				|| config.intConfigOpt(Config::OPT_MINSTEP) == Config::UNDEFINED)
			scanFilesForConstants(config, ran[Config::TC_TRANSLATOR]);

		// If all else fails, ask the user (unless we're not allowed to).
		if (config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED
				&& config.boolConfigOpt(Config::OPT_INCL_ADDITIVE)) {

			if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				if ((tmpVal = queryUserForConstant(config, "maxAdditive")) != Config::UNDEFINED) {
					// They gave us a maxAdditive value.
					config.intConfigOpt(Config::OPT_MAXADDITIVE, tmpVal);
				} else {
					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					cleanup(config, ran);
					utils::nice_exit(0, "Exiting.");
				}
			} else {
				// we can't ask the user
				utils::error("The maxAdditive constant was never defined and is required for program's containing additive constants. Exiting.", true, 0);
				cleanup(config, ran);
				utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}
		}

		/*
		// TODO: Should we require a port?
		if (config.run(Config::TC_SOLVER)) {
			if (config.intConfigOpt(Config::OPT_EXT_PORT) == Config::UNDEFINED
					&& config.mode() == Config::MODE_REACTIVE) {

				if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

					if ((tmpVal = queryUserForConstant(config, "external port")) != Config::UNDEFINED) {
						// They gave us a maxAdditive value.
						config.intConfigOpt(Config::OPT_EXT_PORT, tmpVal);
					} else {
						// They elected to exit instead of answer a simple question.
						// Life moves on but we do not.
						cleanup(config, ran);
						utils::nice_exit(0, "Exiting.");
					}
				} else {
					// We can't ask the user.
					 utils::error("The port to listen on for client connections is undefined and is required for the given running mode. Exiting.", true, 0);
					 cleanup(config, ran);
					 utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
				}
			}
		}
		*/

	}


	/************************************************************************************************/
	/* Outer Interactive Loop */
	/************************************************************************************************/

	Config::RunConfig runConfig;
	runConfig.numSoln = config.intConfigOpt(Config::OPT_NUM_SOLN);
	bool first = true;	
	do {
		unsigned int maxmaxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		Config::Query const* activeQuery = NULL;

		runConfig.maxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		runConfig.minstep = config.intConfigOpt(Config::OPT_MINSTEP);

		runConfig.query = config.strOpt(Config::STR_QUERY);

		/********************************************************************************************/
		/*  Run configurations */
		/********************************************************************************************/

		// Query
		if ((config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER))
				&& (config.strOpt(Config::STR_QUERY) == ""
						|| config.intConfigOpt(Config::OPT_MINSTEP) == Config::UNDEFINED
						|| config.intConfigOpt(Config::OPT_MAXSTEP) == Config::UNDEFINED)){


			// Query...
			if (runConfig.query == "" && !config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				// The query hasn't been specified, try prompting them for it
				if (!queryUserForQuery(config, runConfig, first)) {

					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					cleanup(config, ran);
					utils::nice_exit(0, "Exiting.");
				}

			} else if (runConfig.query == "") {
				// Not specified and we can't prompt the for it.
				utils::error("The query to execute was never specified. Exiting.", true, 0);
				cleanup(config, ran);
				utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}

			if ((activeQuery = config.query(runConfig.query)) == NULL) {
				utils::error("The specified query was not found.", true, 0);
				cleanup(config, ran);
				utils::nice_exit(utils::EXT_CODE_INVALID_QUERY, NULL);
			}

			// Maxstep...
			// This can be solved if we have a query and it has a maxstep...
			if (runConfig.maxstep != Config::UNDEFINED) {
				maxmaxstep = runConfig.maxstep;
			} else if (activeQuery && activeQuery->maxstep != Config::UNDEFINED) {
				maxmaxstep = activeQuery->maxstep;
			} 

			// Minstep...
			// This can be solved if we have a query and it has a minstep...
			if (runConfig.minstep == Config::UNDEFINED) {

				if ( activeQuery && activeQuery->minstep != Config::UNDEFINED)
					runConfig.minstep = activeQuery->minstep;
				else
					runConfig.minstep = 0; // default to 0.
			}
			

		} else {
			// Look for the active query anyways.
			// Chances are we didn't end up parsing the files so we probably haven't seen it.
			activeQuery = config.query(runConfig.query);
		}

		/**********************************************************************************************************************/
		/* Interactive Loop */
		/**********************************************************************************************************************/


		/*********************************************************************************************/
		/* Initial Maxstep */
		/*********************************************************************************************/

		runConfig.maxstep = (config.mode() == Config::MODE_STATIC_AUTO || config.mode() == Config::MODE_STATIC_MANUAL)
				? runConfig.minstep
				: maxmaxstep;


		// Final sanity check on the min and max steps...
		if (runConfig.maxstep != Config::UNDEFINED && runConfig.minstep > runConfig.maxstep) {
			utils::error("The maxstep value must be at least that of the minstep.", true, 0);
			cleanup(config, ran);
			utils::nice_exit(utils::EXT_CODE_INVALID_STEP_VALUE, NULL);
		}

		// run the rest of the tool chain at least once, but we may have to run it multiple times in one of the STATIC modes...
		utils::debug("Entering primary interactive loop.", true);
		do
		{

			/*********************************************************************************************/
			/* Grounder */
			/*********************************************************************************************/
			utils::debug("Entering grounder subroutine.", true);
			if ((intSystemResult = runTool(config, Config::TC_GROUNDER, "grounder", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
				// It Ran!
				ran[Config::TC_GROUNDER] = true;
				if (!config.run(Config::TC_SOLVER)) {
					if (!echoFile(std::cout, config.output(Config::TC_GROUNDER))) {
						utils::error("Unable to read from the grounder output file '%s'", true, -1, config.output(Config::TC_GROUNDER).c_str());
					}
				}

				// check the status and make sure all is well...
				if(intSystemResult != TC_STAT_OK)
				{
					cleanup(config, ran);
					utils::error("An error occurred while executing the grounder.",true, utils::EXT_CODE_TOOLCHAIN_GROUNDER_ERR);
				}

			}

			/*********************************************************************************************/
			/* Header Logic */
			/*********************************************************************************************/

			// Print the solution header!
			if (config.run(Config::TC_SOLVER))
			{
				if (activeQuery)utils::pragma("Running Query '%s'.", true, activeQuery->name.c_str());
				else utils::pragma("Running Query '%s'.", true, runConfig.query.c_str());

				switch (config.mode()) {
				case Config::MODE_STATIC_AUTO:
				case Config::MODE_STATIC_MANUAL:
					if (runConfig.maxstep != Config::UNDEFINED)
						utils::pragma("Maximum Step = '%d'.", true, runConfig.maxstep);
					else
						utils::pragma("No Maximum Step.", true);
					break;

				case Config::MODE_INCREMENTAL:
				case Config::MODE_REACTIVE:
					// We can guarantee that at this point the minimum step is defined.
					if (runConfig.maxstep != Config::UNDEFINED)
						utils::pragma("Minimum Step = '%d', Maximum Step = '%d'.", true, runConfig.minstep, runConfig.maxstep);
					else
						utils::pragma("Minimum Step = '%d', No Maximum Step.", true, runConfig.minstep);
					break;

				default:
					break;
				}

				if (runConfig.numSoln == 0)
					utils::pragma("Searching for all solutions.", true);
				else
					utils::pragma("Searching for %d solutions.", true, runConfig.numSoln );
			}

			/*********************************************************************************************/
			/* Solver */
			/*********************************************************************************************/
			utils::debug("Entering solver subroutine.", true);
			if ((intSystemResult = runTool(config, Config::TC_SOLVER, "solver", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
				// It Ran!
				ran[Config::TC_SOLVER] = true;
				bool ok = true;

				if (!config.run(Config::TC_POSTPROC)) {
					if (!echoFile(std::cout, config.output(Config::TC_SOLVER))) {
						utils::error("Unable to read from the solver output file '%s'", true, -1, config.output(Config::TC_SOLVER).c_str());
					}
				}
				
				// check the status and make sure all is well...
				if (intSystemResult == TC_STAT_SO_CLINGO_FOUND_SOLUTIONS) {
					// Looks like we have solutions... YAY!
					blnFoundSolutions = true;
				} else if (intSystemResult == TC_STAT_SO_CLINGO_NO_SOLUTIONS) {
					utils::pragma("No solutions found.", true);
				} else if (intSystemResult == TC_STAT_BG) {
					// The solver was launched in the background.
				} else if(intSystemResult != TC_STAT_OK) {
					ok = false;
				}


				if (!ok) {
					// something went wrong
					cleanup(config, ran);
					utils::error("An error occurred while executing the solver.",true, utils::EXT_CODE_TOOLCHAIN_SOLVER_ERR);
				}

			}

			/*********************************************************************************************/
			/* Post-processor */
			/*********************************************************************************************/
			// The post-processor is only run outside of reactive mode
			utils::debug("Entering post-processor subroutine.", true);
			if (config.mode() != Config::MODE_REACTIVE) {
				if ((intSystemResult = runTool(config, Config::TC_POSTPROC, "post-processor", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					if (!echoFile(std::cout, config.output(Config::TC_POSTPROC))) {
						utils::error("Unable to read from the post-processor output file '%s'", true, -1, config.output(Config::TC_POSTPROC).c_str());
					}
					// It Ran!
					ran[Config::TC_POSTPROC] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS) {
						// Looks like we have solutions... YAY!
						blnFoundSolutions = true;
					} else if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS) {

					} else if(intSystemResult != TC_STAT_OK) {
						cleanup(config, ran);
						utils::error("An error occurred while executing the post-processor.",true, utils::EXT_CODE_TOOLCHAIN_POSTPROC_ERR);
					}
				}
			}

			/*********************************************************************************************/
			/* Reactive Bridge */
			/*********************************************************************************************/

			// The reactive bridge is run inside of reactive mode.
			// NOTE: If we really are in reactive mode then they solver is still running the background!
			utils::debug("Entering reactive bridge subroutine.", true);

			if (config.mode() == Config::MODE_REACTIVE) { 
#ifdef NO_REACTIVE_BRIDGE
			utils::warning("The reactive bridge has not yet been completed. Due to this, the system will run as if the reactive bridge has been disabled and you will need to connect to oClingo directly.", true);
			utils::warning("Please connect your external agent to oClingo, which is listening on port '%d'.", true, config.intConfigOpt(Config::OPT_EXT_PORT));

#else
				if ((intSystemResult = runTool(config, Config::TC_REACTIVE_BRIDGE, "reactive bridge", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					// It Ran!
					ran[Config::TC_REACTIVE_BRIDGE] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_BG) {
						// The reactive bridge was launched in the background.
					} else if(intSystemResult != TC_STAT_OK) {
						cleanup(config, ran);
						utils::error("An error occurred while executing the reactive bridge.",true, utils::EXT_CODE_TOOLCHAIN_REACTIVE_BRIDGE_ERR);
					}
				}
#endif 
			}

			/*********************************************************************************************/
			/* Maxstep Increment */
			/*********************************************************************************************/

			if (config.mode() == Config::MODE_STATIC_MANUAL) {
				runConfig.maxstep = queryUserForConstant(config, "maximum step", runConfig.maxstep+1);
			} else if (config.mode() == Config::MODE_STATIC_AUTO) {
				runConfig.maxstep++;
			}

		} while(
				// The loop should continue as long as we are:
				// * Running in static-manual mode and the user hasn't told us to stop, or
				// * Running in static-auto mode, we haven't reached the maximum step , and we haven't found solutions.
				(config.mode() == Config::MODE_STATIC_MANUAL && runConfig.maxstep != Config::UNDEFINED)
				|| (config.mode() == Config::MODE_STATIC_AUTO
						&& runConfig.maxstep != Config::UNDEFINED
						&& (maxmaxstep == Config::UNDEFINED || runConfig.maxstep <= maxmaxstep)
						&& !blnFoundSolutions)
				);


		first = false;

	} while
			// The outer loop should run as long as:
			// * We're not suppressing user interaction,
			// * We are running what looks like a grounder/solver,
			// * The user has not selected a query on the command line, and
			// * The user has not selected to exit the outer loop.
			(!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)
			&& (config.run(Config::TC_GROUNDER) || config.run(Config::TC_SOLVER))
			&& config.strOpt(Config::STR_QUERY) =="");

	utils::debug("Exiting interactive loop.", true);
	/**********************************************************************************************************************/
	/* Final Cleanup */
	/**********************************************************************************************************************/

	cleanup(config, ran);

	return 0;
}

OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf) {
	// Process command-line arguments.

	char const* tmpptr;
	size_t tmpoffset;
	char tmpPath[PATH_MAX];
	std::list<char const*> rawInputList;
	std::pair<unsigned int, unsigned int> steps;
	unsigned int tmpInt;
	Config::Mode mode;
	bool tmpBool;



	for(int i = 1; i < argc; i++)
	{
		utils::debug("Parsing option '%s'.", true, argv[i]);
		switch (parseOption(argv[i], tmpptr)) {

		case OPT_AUTO:
			// This is supposed to be an automated run, don't ask the user for anything.
			if (outConf.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION, true)) {
				utils::warning("Detected redefinition of option '%s'. Continuing with value '%s'",true,argv[i],"true");
			}
			break;

		case OPT_BRIDGE:
			// They are specifying a specific command for the bridge.

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_REACTIVE_BRIDGE, tmpptr)) {
				utils::warning("Detected redefinition of bridge command. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_BRIDGE_OPTS:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected pass-through options following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.opts(Config::TC_REACTIVE_BRIDGE, tmpptr)) {
				utils::warning("Detected redefinition of bridge command options. Continuing with value '%s'",true,tmpptr);
			}
			break;
		case OPT_BRIDGE_OUT:

			utils::error("Redirecting the reactive bridge's output is currently unsupported.", true, 0);
			return OPT_STAT_BAD_ARG;

		case OPT_CONST:
			// Constant Declaration...
			if(++i < argc && (tmpptr = strchr(argv[i],'=')) != NULL)
			{
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				utils::debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					utils::warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}

			} else {   // Set up for a constant without actually giving one, bad command line.
				utils::error("Expected a constant definition of the form 'constant=value' after option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_FRM_BRIDGE:
			utils::pragma("Running the toolchain from the reactive bridge is discouraged.",true);
			if (outConf.setRunFrom(Config::TC_REACTIVE_BRIDGE)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_GRD:
			// Don't run anything before the grounder.
			if (outConf.setRunFrom(Config::TC_GROUNDER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_PRE:
			// Don't run anything before the pre-processor.
			if (outConf.setRunFrom(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_POST:
			// Don't call anything before the post-processor (equivalent to "-justpost")
			if (outConf.setRunFrom(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_SO:
			// Don't run anything before the solver.
			if (outConf.setRunFrom(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_TRAN:
			// Don't call anything before the translator (basically a no-op option).
			if (outConf.setRunFrom(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_GRD:
			// They're giving us a specific executable to use as the grounder instead of the default.
			// Make sure a second argument follows, and save the new grounder.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_GROUNDER, tmpptr)) {
				utils::warning("Detected redefinition of grounder command. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_GRD_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.opts(Config::TC_GROUNDER, tmpptr)) {
				utils::warning("Detected redefinition of grounder command options. Continuing with value '%s'",true, tmpptr);
			}

			break;

		case OPT_GRD_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_GROUNDER, tmpptr)) {
				utils::warning("Detected redefinition of the grounder output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_GRINGO_NONE_HACK:
			// Specifying a none_hack value.

			if (!tmpptr) {
				utils::warning("Option '%s' has been deprecated in favor of specifying an explicit none alias value.",true,argv[i]);

				tmpptr = DEF_NONE_HACK_VAL;
			}


			if (outConf.strOpt(Config::STR_NONE_ALIAS, tmpptr)) {
				utils::warning("Detected redefinition of the none alias option. Continuing with value '%s'",true, tmpptr);
			}

			break;


		case OPT_JUST_GRD:
			// Just call the grounder program, no others.
			if (outConf.setOnlyRun(Config::TC_GROUNDER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_PRE:
			// Just call the preprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_POST:
			// Just call the postprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_SO:
			// Just call the solver program, no others.
			if (outConf.setOnlyRun(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_TRANS:
			// Just call the translator program, no others.
			if (outConf.setOnlyRun(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;
		case OPT_LANG:
			Config::Language l;
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
						utils::error("Expected a language specification following option '%s'. Exiting.",true,0, argv[i-1]);
						return OPT_STAT_BAD_ARG;
				}
			}

			if (!outConf.parseLang(tmpptr, l)) {
				utils::error("'%s' is not a supported language specification.", 0, true, tmpptr);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.lang(l)) {
				utils::warning("Detected a redefition of the input language.",true,argv[i]);
			}
			break;

		case OPT_MAXSTEP:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
						utils::error("Expected a maximum step following option '%s'. Exiting.",true,0, argv[i-1]);
						return OPT_STAT_BAD_ARG;
				}
			}

			if ((steps = Config::parseMaxstep(tmpptr)).second == Config::UNDEFINED) {
				utils::error("'%s' is not a valid step value. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MAXSTEP, steps.second)
					|| (steps.first != Config::UNDEFINED && outConf.intConfigOpt(Config::OPT_MINSTEP, steps.first)))
			{
				utils::warning("Detected a redefinition of the maximum step. Continuing with the value '%s'.",true,tmpptr);
			}
			break;

		case OPT_MINSTEP:

			if (!tmpptr) {

				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a minimum step following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}

	
			if (!utils::from_string(tmpInt, tmpptr)) {
				utils::error("'%s' is not a valid step value. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MINSTEP, tmpInt)) {
				utils::warning("Detected a redefinition of the minimum step. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_MODE_SELECT:
			tmpBool = false;
			if (!tmpptr) {
				tmpBool = true;
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a mode option (one of '%s', '%s', '%s', or '%s') following option '%s'. Exiting.",true,0,
							ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, ARG_MODE_REACTIVE, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (!strcmp(tmpptr,ARG_MODE_STATIC_MANUAL)) {
				mode = Config::MODE_STATIC_MANUAL;
			} else if (!strcmp(tmpptr,ARG_MODE_STATIC_AUTO)) {
				mode = Config::MODE_STATIC_AUTO;
			} else if (!strcmp(tmpptr,ARG_MODE_INCREMENTAL)) {
				mode = Config::MODE_INCREMENTAL;
			} else if (!strcmp(tmpptr,ARG_MODE_REACTIVE)) {
				mode = Config::MODE_INCREMENTAL;
			} else {
				utils::error("Unexpected value '%s'. Expected a mode option (one of '%s', '%s', '%s', or '%s'). Exiting.",true,0,
						tmpptr, ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, OPT_MODE_REACTIVE);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.mode(mode)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value '%s.", true, tmpptr);
			}

			break;

		case OPT_NO_DEL:
			tmpBool = false;
			utils::warning("The option '%s' has been deprecated in favor of the '--[PROG]-output=[OUTFILE] option.", true, argv[i]);

			tmpBool = outConf.output(Config::TC_TRANSLATOR, DEF_INT_TRANS_FILE) 
					|/* non-shortcutting bitwise or */ outConf.output(Config::TC_PREPROC, DEF_INT_PREPROC_FILE)
					| outConf.output(Config::TC_GROUNDER, DEF_INT_GRD_FILE)
					| outConf.output(Config::TC_SOLVER, DEF_INT_SO_FILE);

			// Shut off deleting intermediate files.
			if (tmpBool) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_SHIFT:
			if (!tmpptr) {
				// default true
				tmpptr = "true";
			}
			
			bool val;
			if (!strcmp(tmpptr, "true")) {
				val = true;
			} else if (!strcmp(tmpptr, "false")) {
				val = false;
			} else {
				utils::error("Invalid shift value. Expected a Boolean value ('true' or 'false'). Exiting.", true, 0, argv[i]);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.boolConfigOpt(Config::OPT_SHIFT, val)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}

			break;

		case OPT_STATS:
			// Don't include standard files in the final product.
			if (outConf.boolConfigOpt(Config::OPT_STATS, true)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true, argv[i]);
			}

			break;
		case OPT_NO_STD:
			// Don't include standard files in the final product.
			if (outConf.boolConfigOpt(Config::OPT_INCL_STD, false)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_PORT_EXTERNAL:
			// Set the external port to use in reactive mode
			if (!tmpptr) {

				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (!utils::from_string(tmpInt, tmpptr) || tmpInt < 1) {
				utils::error("'%s' is not a valid port. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_EXT_PORT, tmpInt)) {
				utils::warning("Detected a redefinition of the external port. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_PORT_INTERNAL:
			// Set the internal port to use in reactive mode
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (!utils::from_string(tmpInt, tmpptr) || tmpInt < 1) {
				utils::error("'%s' is not a valid port. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_INT_PORT, tmpInt)) {
				utils::warning("Detected a redefinition of the internal port. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_POSTPROC:
			// They're giving us a specific executable to use as the post-processor instead of the default.
			// Make sure a second argument follows, and save the new post-processor.

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of post-processor command. Continuing with value '%s'.",true,argv[i]);
			}
	
			break;

		case OPT_POSTPROC_OPTS:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of post-processor command options. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_POSTPROC_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of the post-processor output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_PREPROC:
			// They're giving us a specific executable to use as the pre-processor instead of the default.
			// Make sure a second argument follows, and save the new pre-processor.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of pre-processor command. Continuing with value '%s'",true,tmpptr);
			}
			break;

		case OPT_PREPROC_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}


			if (outConf.opts(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of pre-processor command options. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_PREPROC_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of the pre-processor output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_SO:
			// They're giving us a specific executable to use as the solver instead of the default.
			// Make sure a second argument follows, and save the new solver.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of solver command. Continuing with value '%s'",true,tmpptr);
			}
			break;

		case OPT_SO_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of solver command options. Continuing with value '%s'",true, tmpptr);
			}

			break;

		case OPT_SO_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of the solver output file. Continuing with value '%s'",true, tmpptr);
			}
			break;
		
		case OPT_SYMTAB:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}

			if (outConf.strOpt(Config::STR_SYMTAB_FILE, tmpptr)) {
				utils::warning("Detected redefinition of the symbol table file. Continuing with value '%s'",true, tmpptr);
			}
			break;


		case OPT_TO_BRIDGE:
			if (outConf.setRunTo(Config::TC_REACTIVE_BRIDGE)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_GRD:
			// Shut off deleting intermediate files.
			if (outConf.setRunTo(Config::TC_GROUNDER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_PRE:
			// Run everything up to the pre-processor.
			if (outConf.setRunTo(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_POST:
			// Run everything up to the post-processor...
			if (outConf.setRunTo(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_SO:
			// Run everything up to the solver...
			if (outConf.setRunTo(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_TRANS:
			// Run everything up to the translator...
			if (outConf.setRunTo(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TRANS:
			// They're giving us a specific executable to use as the translator instead of the default.
			// Make sure a second argument follows, and save the new grounder.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.command(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of translator command. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_TRANS_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of translator command options. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_TRANS_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of the translator output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_VERSION:
			return OPT_STAT_VERSION;

		case OPT_HELP:
			return OPT_STAT_HELP;

		case OPT_QUERY:
			tmpBool = false;
			if (!tmpptr) {
				tmpBool = true;
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a query identifier following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}
			if (outConf.strOpt(Config::STR_QUERY, tmpptr)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,(tmpBool) ? argv[i-1] : argv[i]);
			}
			break;

		case OPT_UNSUPPORTED:
			// Whatever this is, it's unsupported.
			utils::warning("The '%s' option is no longer supported. It will be ignored.",true,argv[i]);
			break;

		case OPT_UNSUPPORTED_ADDITIVE:
			// They want us to include the additive standard file...
			// This option is deprecated and shouldn't be used.
			utils::warning("The '%s' option is no longer supported. The additive file will be included automatically if additive constants are detected.",true,argv[i]);
			break;

		case OPT_UNSUPPORTED_GRSO:
			// They did something involving the explicit grounder/solver
			// We no longer support the explicit grounder/solver calls
			utils::error("The '%s' option is no longer supported. We no longer use a dedicated grounder/solver in the toolchain. Please make use of the solver component instead.",true,0,argv[i]);

			// We probably aren't going to do what they want, go ahead and signal that something went wrong
			return OPT_STAT_BAD_ARG;

		case OPT_UNSUPPORTED_MANUAL_MAXSTEP:
			// Manually advance the maximum step of the program query
			utils::error("The '%s' option is no longer supported. Please use that '--mode=static-manual' option instead.",true,0,argv[i]);
			break;

		case OPT_UNKNOWN:
			utils::debug("The option isn't a recognized flag. Checking other possibilities.", true);
			if (argv[i][0] == '-')
			{
				// It appears to be a bad argument...
				utils::error("Found an unrecognized argument '%s'. Exiting.",true,0,argv[i]);
				return OPT_STAT_BAD_ARG;
			}

			// If there's no "header" on the argument, it's either a constant declaration, an input file, or the number of solutions.
			else if(!strcmp(argv[i], "all") || !strcmp(argv[i], "ALL")) {
				if (outConf.intConfigOpt(Config::OPT_NUM_SOLN, 0)) {
					utils::warning("Detected the redefinition of the number of solutions. Continuing with '%s'.",true,argv[i]);
				}
			}
			else if(utils::isInteger(argv[i]))
			{	// It looks like a number, atoi it and save that as the desired number of solutions.
				int numSolutions = atoi(argv[i]);
				if(numSolutions < 0) {
					utils::warning("The number of solutions cannot be negative. Ignoring the argument.",true);
				} else {
					if (outConf.intConfigOpt(Config::OPT_NUM_SOLN, (unsigned int)numSolutions)) {
						utils::warning("Detected the redefinition of the number of solutions. Continuing with '%s'.",true,argv[i]);
					}
				}
			}
			else if((tmpptr = strchr(argv[i],'=')) != NULL)
			{   // Found an equals sign in the argument, it's probably a "const=value" declaration.
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				utils::debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					utils::warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}
			}
			else
			{	// If it's not a number, it's probably an input file. Make sure it exists, and then save it to the list.

				if(realpath(argv[i], tmpPath) == NULL)
				{
					// Couldn't find the input file...
					utils::error("Unable to locate input file '%s'. Exiting.",true,0,argv[i]);
					return OPT_STAT_BAD_ARG;
				}
				else
				{
					// Save all of the input files until we are done and can handle them...
					rawInputList.push_back(argv[i]);
				}
			}
			break;
		}
	}

	// We've finished parsing all of the arguments... Let's handle those pesky input files.
	utils::debug("Handling input files...", true);
	if (!rawInputList.size()) {
		//uh-oh. They didn't specify any input files. This simply won't do.
		utils::error("One or more input files must be specified.",true,0);
		return OPT_STAT_BAD_ARG;
	}

	// They've insisted on sticking with a given mode. Make sure they're aware if they're using an incompatible
	for (std::list<char const*>::iterator it = rawInputList.begin(); it != rawInputList.end(); it++) {
		Config::FileType type = outConf.addInput(*it);
		if (outConf.customMode() && type.known && !(type.runningMode & outConf.mode())) {
			utils::warning("The file '%s' doesn't appear to be compatible with the current running mode.",true,*it);
		}
	}

	return OPT_STAT_OK;
}

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @param[out] val A string with the value for the option (where applicable) or NULL. 
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt, char const*& val) {
	char const* marker;

	val = NULL;

	
#line 1689 "<stdout>"
	{
		char yych;
		unsigned int yyaccept = 0;

		yych = *opt;
		switch (yych) {
		case '\n':	goto yy2;
		case '-':	goto yy3;
		default:	goto yy5;
		}
yy2:
		opt = marker;
		switch (yyaccept) {
		case 0: 	goto yy4;
		case 1: 	goto yy9;
		case 2: 	goto yy12;
		case 3: 	goto yy24;
		case 4: 	goto yy33;
		case 5: 	goto yy50;
		case 6: 	goto yy106;
		case 7: 	goto yy111;
		case 8: 	goto yy127;
		case 9: 	goto yy154;
		case 10: 	goto yy186;
		case 11: 	goto yy220;
		case 12: 	goto yy236;
		case 13: 	goto yy255;
		case 14: 	goto yy291;
		}
yy3:
		yyaccept = 0;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy6;
		case '?':	goto yy17;
		case 'a':	goto yy16;
		case 'b':	goto yy29;
		case 'c':	goto yy30;
		case 'f':	goto yy15;
		case 'g':	goto yy14;
		case 'i':	goto yy27;
		case 'j':	goto yy13;
		case 'l':	goto yy25;
		case 'm':	goto yy11;
		case 'n':	goto yy10;
		case 'p':	goto yy8;
		case 'q':	goto yy19;
		case 's':	goto yy23;
		case 't':	goto yy7;
		case 'v':	goto yy21;
		default:	goto yy4;
		}
yy4:
#line 1788 "cplus2asp.re2c"
		{ return OPT_UNKNOWN; }
#line 1745 "<stdout>"
yy5:
		yych = *++opt;
		goto yy4;
yy6:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy295;
		case 'b':	goto yy297;
		case 'c':	goto yy296;
		case 'f':	goto yy298;
		case 'g':	goto yy299;
		case 'h':	goto yy310;
		case 'i':	goto yy301;
		case 'j':	goto yy302;
		case 'l':	goto yy303;
		case 'm':	goto yy304;
		case 'n':	goto yy300;
		case 'p':	goto yy306;
		case 'q':	goto yy309;
		case 's':	goto yy305;
		case 't':	goto yy307;
		case 'u':	goto yy311;
		case 'v':	goto yy308;
		default:	goto yy2;
		}
yy7:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy250;
		case 'r':	goto yy251;
		default:	goto yy2;
		}
yy8:
		yyaccept = 1;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy211;
		case 'i':	goto yy215;
		case 'o':	goto yy213;
		case 'r':	goto yy214;
		default:	goto yy9;
		}
yy9:
#line 1732 "cplus2asp.re2c"
		{ return OPT_PORT_EXTERNAL; }
#line 1791 "<stdout>"
yy10:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy174;
		case 'h':	goto yy172;
		case 'o':	goto yy176;
		default:	goto yy2;
		}
yy11:
		yyaccept = 2;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy158;
		case 'a':	goto yy160;
		case 'i':	goto yy161;
		case 'm':	goto yy162;
		default:	goto yy12;
		}
yy12:
#line 1723 "cplus2asp.re2c"
		{ return OPT_MODE_SELECT; }
#line 1813 "<stdout>"
yy13:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy132;
		default:	goto yy2;
		}
yy14:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy110;
		default:	goto yy2;
		}
yy15:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy81;
		default:	goto yy2;
		}
yy16:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy75;
		case 'u':	goto yy74;
		default:	goto yy2;
		}
yy17:
		++opt;
#line 1768 "cplus2asp.re2c"
		{ return OPT_HELP; }
#line 1843 "<stdout>"
yy19:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy72;
		default:	goto yy20;
		}
yy20:
#line 1767 "cplus2asp.re2c"
		{ return OPT_QUERY; }
#line 1853 "<stdout>"
yy21:
		++opt;
#line 1765 "cplus2asp.re2c"
		{ return OPT_VERSION; }
#line 1858 "<stdout>"
yy23:
		yyaccept = 3;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy49;
		case 'y':	goto yy51;
		default:	goto yy24;
		}
yy24:
#line 1729 "cplus2asp.re2c"
		{ return OPT_SHIFT; }
#line 1870 "<stdout>"
yy25:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy47;
		default:	goto yy26;
		}
yy26:
#line 1720 "cplus2asp.re2c"
		{ return OPT_LANG; }
#line 1880 "<stdout>"
yy27:
		++opt;
#line 1714 "cplus2asp.re2c"
		{ return OPT_PORT_INTERNAL; }
#line 1885 "<stdout>"
yy29:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy32;
		default:	goto yy2;
		}
yy30:
		++opt;
#line 1693 "cplus2asp.re2c"
		{ return OPT_CONST; }
#line 1896 "<stdout>"
yy32:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy35;
		case 'o':	goto yy34;
		default:	goto yy33;
		}
yy33:
#line 1695 "cplus2asp.re2c"
		{ return OPT_BRIDGE; }
#line 1908 "<stdout>"
yy34:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy37;
		case 'u':	goto yy38;
		default:	goto yy2;
		}
yy35:
		++opt;
#line 1694 "cplus2asp.re2c"
		{ val = opt; return OPT_BRIDGE; }
#line 1920 "<stdout>"
yy37:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy43;
		default:	goto yy2;
		}
yy38:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy39;
		default:	goto yy2;
		}
yy39:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy41;
		default:	goto yy40;
		}
yy40:
#line 1699 "cplus2asp.re2c"
		{ return OPT_BRIDGE_OUT; }
#line 1942 "<stdout>"
yy41:
		++opt;
#line 1698 "cplus2asp.re2c"
		{ val = opt; return OPT_BRIDGE_OUT; }
#line 1947 "<stdout>"
yy43:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy45;
		default:	goto yy44;
		}
yy44:
#line 1697 "cplus2asp.re2c"
		{ return OPT_BRIDGE_OPTS; }
#line 1957 "<stdout>"
yy45:
		++opt;
#line 1696 "cplus2asp.re2c"
		{ val = opt; return OPT_BRIDGE_OPTS; }
#line 1962 "<stdout>"
yy47:
		++opt;
#line 1722 "cplus2asp.re2c"
		{ val = opt; return OPT_LANG; }
#line 1967 "<stdout>"
yy49:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy60;
		case 'o':	goto yy59;
		default:	goto yy50;
		}
yy50:
#line 1746 "cplus2asp.re2c"
		{ return OPT_SO; }
#line 1979 "<stdout>"
yy51:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy52;
		default:	goto yy2;
		}
yy52:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy53;
		default:	goto yy2;
		}
yy53:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy54;
		default:	goto yy2;
		}
yy54:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy55;
		default:	goto yy2;
		}
yy55:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy57;
		default:	goto yy56;
		}
yy56:
#line 1751 "cplus2asp.re2c"
		{ return OPT_SYMTAB; }
#line 2013 "<stdout>"
yy57:
		++opt;
#line 1752 "cplus2asp.re2c"
		{ val = opt; return OPT_SYMTAB; }
#line 2018 "<stdout>"
yy59:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy62;
		case 'u':	goto yy63;
		default:	goto yy2;
		}
yy60:
		++opt;
#line 1745 "cplus2asp.re2c"
		{ val = opt; return OPT_SO; }
#line 2030 "<stdout>"
yy62:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy68;
		default:	goto yy2;
		}
yy63:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy64;
		default:	goto yy2;
		}
yy64:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy66;
		default:	goto yy65;
		}
yy65:
#line 1750 "cplus2asp.re2c"
		{ return OPT_SO_OUT; }
#line 2052 "<stdout>"
yy66:
		++opt;
#line 1749 "cplus2asp.re2c"
		{ val = opt; return OPT_SO_OUT; }
#line 2057 "<stdout>"
yy68:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy70;
		default:	goto yy69;
		}
yy69:
#line 1748 "cplus2asp.re2c"
		{ return OPT_SO_OPTS; }
#line 2067 "<stdout>"
yy70:
		++opt;
#line 1747 "cplus2asp.re2c"
		{ val = opt; return OPT_SO_OPTS; }
#line 2072 "<stdout>"
yy72:
		++opt;
#line 1766 "cplus2asp.re2c"
		{ val = opt; return OPT_QUERY; }
#line 2077 "<stdout>"
yy74:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy78;
		default:	goto yy2;
		}
yy75:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy76;
		default:	goto yy2;
		}
yy76:
		++opt;
#line 1774 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_ADDITIVE; }
#line 2094 "<stdout>"
yy78:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy79;
		default:	goto yy2;
		}
yy79:
		++opt;
#line 1692 "cplus2asp.re2c"
		{ return OPT_AUTO; }
#line 2105 "<stdout>"
yy81:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy82;
		default:	goto yy2;
		}
yy82:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy83;
		default:	goto yy2;
		}
yy83:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy88;
		case 'g':	goto yy84;
		case 'p':	goto yy87;
		case 's':	goto yy86;
		case 't':	goto yy85;
		default:	goto yy2;
		}
yy84:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy105;
		default:	goto yy2;
		}
yy85:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy100;
		default:	goto yy2;
		}
yy86:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy98;
		default:	goto yy2;
		}
yy87:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy92;
		case 'r':	goto yy91;
		default:	goto yy2;
		}
yy88:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy89;
		default:	goto yy2;
		}
yy89:
		++opt;
#line 1700 "cplus2asp.re2c"
		{ return OPT_FRM_BRIDGE; }
#line 2163 "<stdout>"
yy91:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy96;
		default:	goto yy2;
		}
yy92:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy93;
		default:	goto yy2;
		}
yy93:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy94;
		default:	goto yy2;
		}
yy94:
		++opt;
#line 1703 "cplus2asp.re2c"
		{ return OPT_FRM_POST; }
#line 2186 "<stdout>"
yy96:
		++opt;
#line 1702 "cplus2asp.re2c"
		{ return OPT_FRM_PRE; }
#line 2191 "<stdout>"
yy98:
		++opt;
#line 1704 "cplus2asp.re2c"
		{ return OPT_FROM_SO; }
#line 2196 "<stdout>"
yy100:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy101;
		default:	goto yy2;
		}
yy101:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy102;
		default:	goto yy2;
		}
yy102:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy103;
		default:	goto yy2;
		}
yy103:
		++opt;
#line 1705 "cplus2asp.re2c"
		{ return OPT_FROM_TRAN; }
#line 2219 "<stdout>"
yy105:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy107;
		default:	goto yy106;
		}
yy106:
#line 1701 "cplus2asp.re2c"
		{ return OPT_FRM_GRD; }
#line 2230 "<stdout>"
yy107:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy108;
		default:	goto yy2;
		}
yy108:
		++opt;
#line 1775 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2241 "<stdout>"
yy110:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy114;
		case 'o':	goto yy113;
		case 's':	goto yy112;
		default:	goto yy111;
		}
yy111:
#line 1707 "cplus2asp.re2c"
		{ return OPT_GRD; }
#line 2254 "<stdout>"
yy112:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy126;
		default:	goto yy2;
		}
yy113:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy116;
		case 'u':	goto yy117;
		default:	goto yy2;
		}
yy114:
		++opt;
#line 1706 "cplus2asp.re2c"
		{ val = opt; return OPT_GRD; }
#line 2272 "<stdout>"
yy116:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy122;
		default:	goto yy2;
		}
yy117:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy118;
		default:	goto yy2;
		}
yy118:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy120;
		default:	goto yy119;
		}
yy119:
#line 1711 "cplus2asp.re2c"
		{ return OPT_GRD_OUT; }
#line 2294 "<stdout>"
yy120:
		++opt;
#line 1710 "cplus2asp.re2c"
		{ val = opt; return OPT_GRD_OUT; }
#line 2299 "<stdout>"
yy122:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy124;
		default:	goto yy123;
		}
yy123:
#line 1709 "cplus2asp.re2c"
		{ return OPT_GRD_OPTS; }
#line 2309 "<stdout>"
yy124:
		++opt;
#line 1708 "cplus2asp.re2c"
		{ val = opt; return OPT_GRD_OPTS; }
#line 2314 "<stdout>"
yy126:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy128;
		default:	goto yy127;
		}
yy127:
#line 1776 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2325 "<stdout>"
yy128:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy129;
		default:	goto yy2;
		}
yy129:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy130;
		default:	goto yy2;
		}
yy130:
		++opt;
#line 1777 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2342 "<stdout>"
yy132:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy133;
		default:	goto yy2;
		}
yy133:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy134;
		default:	goto yy2;
		}
yy134:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy135;
		case 'p':	goto yy138;
		case 's':	goto yy137;
		case 't':	goto yy136;
		default:	goto yy2;
		}
yy135:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy153;
		default:	goto yy2;
		}
yy136:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy148;
		default:	goto yy2;
		}
yy137:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy146;
		default:	goto yy2;
		}
yy138:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy140;
		case 'r':	goto yy139;
		default:	goto yy2;
		}
yy139:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy144;
		default:	goto yy2;
		}
yy140:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy141;
		default:	goto yy2;
		}
yy141:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy142;
		default:	goto yy2;
		}
yy142:
		++opt;
#line 1717 "cplus2asp.re2c"
		{ return OPT_JUST_POST; }
#line 2411 "<stdout>"
yy144:
		++opt;
#line 1716 "cplus2asp.re2c"
		{ return OPT_JUST_PRE; }
#line 2416 "<stdout>"
yy146:
		++opt;
#line 1718 "cplus2asp.re2c"
		{ return OPT_JUST_SO; }
#line 2421 "<stdout>"
yy148:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy149;
		default:	goto yy2;
		}
yy149:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy150;
		default:	goto yy2;
		}
yy150:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy151;
		default:	goto yy2;
		}
yy151:
		++opt;
#line 1719 "cplus2asp.re2c"
		{ return OPT_JUST_TRANS; }
#line 2444 "<stdout>"
yy153:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy155;
		default:	goto yy154;
		}
yy154:
#line 1715 "cplus2asp.re2c"
		{ return OPT_JUST_GRD; }
#line 2455 "<stdout>"
yy155:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy156;
		default:	goto yy2;
		}
yy156:
		++opt;
#line 1778 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2466 "<stdout>"
yy158:
		++opt;
#line 1721 "cplus2asp.re2c"
		{ val = opt; return OPT_MODE_SELECT; }
#line 2471 "<stdout>"
yy160:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy168;
		default:	goto yy2;
		}
yy161:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy164;
		default:	goto yy2;
		}
yy162:
		++opt;
#line 1779 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED_MANUAL_MAXSTEP; }
#line 2488 "<stdout>"
yy164:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy166;
		default:	goto yy165;
		}
yy165:
#line 1727 "cplus2asp.re2c"
		{ return OPT_MINSTEP; }
#line 2498 "<stdout>"
yy166:
		++opt;
#line 1726 "cplus2asp.re2c"
		{ val = opt; return OPT_MINSTEP; }
#line 2503 "<stdout>"
yy168:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy170;
		default:	goto yy169;
		}
yy169:
#line 1725 "cplus2asp.re2c"
		{ return OPT_MAXSTEP; }
#line 2513 "<stdout>"
yy170:
		++opt;
#line 1724 "cplus2asp.re2c"
		{ val = opt; return OPT_MAXSTEP; }
#line 2518 "<stdout>"
yy172:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy209;
		default:	goto yy173;
		}
yy173:
#line 1771 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK; }
#line 2528 "<stdout>"
yy174:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy207;
		default:	goto yy175;
		}
yy175:
#line 1772 "cplus2asp.re2c"
		{ return OPT_GRINGO_NONE_HACK; }
#line 2538 "<stdout>"
yy176:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy181;
		case 'g':	goto yy180;
		case 'p':	goto yy179;
		case 's':	goto yy178;
		case 't':	goto yy177;
		default:	goto yy2;
		}
yy177:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy202;
		default:	goto yy2;
		}
yy178:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy198;
		case 't':	goto yy197;
		default:	goto yy2;
		}
yy179:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy191;
		case 'r':	goto yy190;
		default:	goto yy2;
		}
yy180:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy185;
		default:	goto yy2;
		}
yy181:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy182;
		default:	goto yy2;
		}
yy182:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy183;
		default:	goto yy2;
		}
yy183:
		++opt;
#line 1770 "cplus2asp.re2c"
		{ return OPT_NO_DEL; }
#line 2591 "<stdout>"
yy185:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy187;
		default:	goto yy186;
		}
yy186:
#line 1780 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2602 "<stdout>"
yy187:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy188;
		default:	goto yy2;
		}
yy188:
		++opt;
#line 1781 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2613 "<stdout>"
yy190:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy195;
		default:	goto yy2;
		}
yy191:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy192;
		default:	goto yy2;
		}
yy192:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy193;
		default:	goto yy2;
		}
yy193:
		++opt;
#line 1783 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2636 "<stdout>"
yy195:
		++opt;
#line 1782 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2641 "<stdout>"
yy197:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy200;
		default:	goto yy2;
		}
yy198:
		++opt;
#line 1784 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2652 "<stdout>"
yy200:
		++opt;
#line 1728 "cplus2asp.re2c"
		{ return OPT_NO_STD; }
#line 2657 "<stdout>"
yy202:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy203;
		default:	goto yy2;
		}
yy203:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy204;
		default:	goto yy2;
		}
yy204:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy205;
		default:	goto yy2;
		}
yy205:
		++opt;
#line 1785 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2680 "<stdout>"
yy207:
		++opt;
#line 1713 "cplus2asp.re2c"
		{ val = opt; return OPT_GRINGO_NONE_HACK; }
#line 2685 "<stdout>"
yy209:
		++opt;
#line 1712 "cplus2asp.re2c"
		{ val = opt; return OPT_GRINGO_NONE_HACK; }
#line 2690 "<stdout>"
yy211:
		++opt;
#line 1731 "cplus2asp.re2c"
		{ val = opt; return OPT_PORT_EXTERNAL; }
#line 2695 "<stdout>"
yy213:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy234;
		default:	goto yy2;
		}
yy214:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy219;
		default:	goto yy2;
		}
yy215:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy216;
		default:	goto yy2;
		}
yy216:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy217;
		default:	goto yy2;
		}
yy217:
		++opt;
#line 1786 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 2724 "<stdout>"
yy219:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy221;
		case 'o':	goto yy223;
		default:	goto yy220;
		}
yy220:
#line 1740 "cplus2asp.re2c"
		{ return OPT_PREPROC; }
#line 2736 "<stdout>"
yy221:
		++opt;
#line 1739 "cplus2asp.re2c"
		{ val = opt; return OPT_PREPROC; }
#line 2741 "<stdout>"
yy223:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy225;
		case 'u':	goto yy224;
		default:	goto yy2;
		}
yy224:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy230;
		default:	goto yy2;
		}
yy225:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy226;
		default:	goto yy2;
		}
yy226:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy228;
		default:	goto yy227;
		}
yy227:
#line 1742 "cplus2asp.re2c"
		{ return OPT_PREPROC_OPTS; }
#line 2770 "<stdout>"
yy228:
		++opt;
#line 1741 "cplus2asp.re2c"
		{ val = opt; return OPT_PREPROC_OPTS; }
#line 2775 "<stdout>"
yy230:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy232;
		default:	goto yy231;
		}
yy231:
#line 1744 "cplus2asp.re2c"
		{ return OPT_PREPROC_OUT; }
#line 2785 "<stdout>"
yy232:
		++opt;
#line 1743 "cplus2asp.re2c"
		{ val = opt; return OPT_PREPROC_OUT; }
#line 2790 "<stdout>"
yy234:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy235;
		default:	goto yy2;
		}
yy235:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy238;
		case 'o':	goto yy237;
		default:	goto yy236;
		}
yy236:
#line 1734 "cplus2asp.re2c"
		{ return OPT_POSTPROC; }
#line 2808 "<stdout>"
yy237:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy240;
		case 'u':	goto yy241;
		default:	goto yy2;
		}
yy238:
		++opt;
#line 1733 "cplus2asp.re2c"
		{ val = opt; return OPT_POSTPROC; }
#line 2820 "<stdout>"
yy240:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy246;
		default:	goto yy2;
		}
yy241:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy242;
		default:	goto yy2;
		}
yy242:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy244;
		default:	goto yy243;
		}
yy243:
#line 1738 "cplus2asp.re2c"
		{ return OPT_POSTPROC_OUT; }
#line 2842 "<stdout>"
yy244:
		++opt;
#line 1737 "cplus2asp.re2c"
		{ val = opt; return OPT_POSTPROC_OUT; }
#line 2847 "<stdout>"
yy246:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy248;
		default:	goto yy247;
		}
yy247:
#line 1736 "cplus2asp.re2c"
		{ return OPT_POSTPROC_OPTS; }
#line 2857 "<stdout>"
yy248:
		++opt;
#line 1735 "cplus2asp.re2c"
		{ val = opt; return OPT_POSTPROC_OPTS; }
#line 2862 "<stdout>"
yy250:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy270;
		case 'g':	goto yy269;
		case 'p':	goto yy273;
		case 's':	goto yy272;
		case 't':	goto yy271;
		default:	goto yy2;
		}
yy251:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy252;
		default:	goto yy2;
		}
yy252:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy253;
		default:	goto yy2;
		}
yy253:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy254;
		default:	goto yy2;
		}
yy254:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy256;
		case 'o':	goto yy258;
		default:	goto yy255;
		}
yy255:
#line 1760 "cplus2asp.re2c"
		{ return OPT_TRANS; }
#line 2902 "<stdout>"
yy256:
		++opt;
#line 1759 "cplus2asp.re2c"
		{ val = opt; return OPT_TRANS; }
#line 2907 "<stdout>"
yy258:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy260;
		case 'u':	goto yy259;
		default:	goto yy2;
		}
yy259:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy265;
		default:	goto yy2;
		}
yy260:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy261;
		default:	goto yy2;
		}
yy261:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy263;
		default:	goto yy262;
		}
yy262:
#line 1762 "cplus2asp.re2c"
		{ return OPT_TRANS_OPTS; }
#line 2936 "<stdout>"
yy263:
		++opt;
#line 1761 "cplus2asp.re2c"
		{ val = opt; return OPT_TRANS_OPTS; }
#line 2941 "<stdout>"
yy265:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy267;
		default:	goto yy266;
		}
yy266:
#line 1764 "cplus2asp.re2c"
		{ return OPT_TRANS_OUT; }
#line 2951 "<stdout>"
yy267:
		++opt;
#line 1763 "cplus2asp.re2c"
		{ val = opt; return OPT_TRANS_OUT; }
#line 2956 "<stdout>"
yy269:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy290;
		default:	goto yy2;
		}
yy270:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy288;
		default:	goto yy2;
		}
yy271:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy283;
		default:	goto yy2;
		}
yy272:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy281;
		default:	goto yy2;
		}
yy273:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy275;
		case 'r':	goto yy274;
		default:	goto yy2;
		}
yy274:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy279;
		default:	goto yy2;
		}
yy275:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy276;
		default:	goto yy2;
		}
yy276:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy277;
		default:	goto yy2;
		}
yy277:
		++opt;
#line 1755 "cplus2asp.re2c"
		{ return OPT_TO_POST; }
#line 3010 "<stdout>"
yy279:
		++opt;
#line 1754 "cplus2asp.re2c"
		{ return OPT_TO_PRE; }
#line 3015 "<stdout>"
yy281:
		++opt;
#line 1756 "cplus2asp.re2c"
		{ return OPT_TO_SO; }
#line 3020 "<stdout>"
yy283:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy284;
		default:	goto yy2;
		}
yy284:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy285;
		default:	goto yy2;
		}
yy285:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy286;
		default:	goto yy2;
		}
yy286:
		++opt;
#line 1757 "cplus2asp.re2c"
		{ return OPT_TO_TRANS; }
#line 3043 "<stdout>"
yy288:
		++opt;
#line 1758 "cplus2asp.re2c"
		{ return OPT_TO_BRIDGE;	}
#line 3048 "<stdout>"
yy290:
		yyaccept = 14;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy292;
		default:	goto yy291;
		}
yy291:
#line 1753 "cplus2asp.re2c"
		{ return OPT_TO_GRD; }
#line 3059 "<stdout>"
yy292:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy293;
		default:	goto yy2;
		}
yy293:
		++opt;
#line 1787 "cplus2asp.re2c"
		{ return OPT_UNSUPPORTED; }
#line 3070 "<stdout>"
yy295:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy773;
		case 'u':	goto yy774;
		default:	goto yy2;
		}
yy296:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy770;
		default:	goto yy2;
		}
yy297:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy755;
		default:	goto yy2;
		}
yy298:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy694;
		default:	goto yy2;
		}
yy299:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy667;
		default:	goto yy2;
		}
yy300:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy590;
		default:	goto yy2;
		}
yy301:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy579;
		default:	goto yy2;
		}
yy302:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy523;
		default:	goto yy2;
		}
yy303:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy516;
		default:	goto yy2;
		}
yy304:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy490;
		case 'i':	goto yy491;
		case 'o':	goto yy492;
		default:	goto yy2;
		}
yy305:
		yych = *++opt;
		switch (yych) {
		case 'h':	goto yy458;
		case 'o':	goto yy456;
		case 't':	goto yy457;
		case 'y':	goto yy455;
		default:	goto yy2;
		}
yy306:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy409;
		case 'r':	goto yy408;
		default:	goto yy2;
		}
yy307:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy330;
		case 'r':	goto yy331;
		default:	goto yy2;
		}
yy308:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy325;
		default:	goto yy2;
		}
yy309:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy321;
		default:	goto yy2;
		}
yy310:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy319;
		default:	goto yy2;
		}
yy311:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy312;
		default:	goto yy2;
		}
yy312:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy313;
		default:	goto yy2;
		}
yy313:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy314;
		default:	goto yy2;
		}
yy314:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy315;
		default:	goto yy2;
		}
yy315:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy316;
		default:	goto yy2;
		}
yy316:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy317;
		default:	goto yy2;
		}
yy317:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy318;
		default:	goto yy2;
		}
yy318:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy217;
		default:	goto yy2;
		}
yy319:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy320;
		default:	goto yy2;
		}
yy320:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy17;
		default:	goto yy2;
		}
yy321:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy322;
		default:	goto yy2;
		}
yy322:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy323;
		default:	goto yy2;
		}
yy323:
		yych = *++opt;
		switch (yych) {
		case 'y':	goto yy324;
		default:	goto yy2;
		}
yy324:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy72;
		default:	goto yy20;
		}
yy325:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy326;
		default:	goto yy2;
		}
yy326:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy327;
		default:	goto yy2;
		}
yy327:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy328;
		default:	goto yy2;
		}
yy328:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy329;
		default:	goto yy2;
		}
yy329:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy21;
		default:	goto yy2;
		}
yy330:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy350;
		default:	goto yy2;
		}
yy331:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy332;
		default:	goto yy2;
		}
yy332:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy333;
		default:	goto yy2;
		}
yy333:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy334;
		default:	goto yy2;
		}
yy334:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy335;
		default:	goto yy2;
		}
yy335:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy336;
		default:	goto yy2;
		}
yy336:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy337;
		default:	goto yy2;
		}
yy337:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy338;
		default:	goto yy2;
		}
yy338:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy339;
		default:	goto yy2;
		}
yy339:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy340;
		case '=':	goto yy256;
		default:	goto yy255;
		}
yy340:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy341;
		default:	goto yy2;
		}
yy341:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy342;
		case 'u':	goto yy343;
		default:	goto yy2;
		}
yy342:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy348;
		default:	goto yy2;
		}
yy343:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy344;
		default:	goto yy2;
		}
yy344:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy345;
		default:	goto yy2;
		}
yy345:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy346;
		default:	goto yy2;
		}
yy346:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy347;
		default:	goto yy2;
		}
yy347:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy267;
		default:	goto yy266;
		}
yy348:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy349;
		default:	goto yy2;
		}
yy349:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy263;
		default:	goto yy262;
		}
yy350:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy352;
		case 'g':	goto yy351;
		case 'p':	goto yy355;
		case 's':	goto yy354;
		case 't':	goto yy353;
		default:	goto yy2;
		}
yy351:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy395;
		default:	goto yy2;
		}
yy352:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy391;
		default:	goto yy2;
		}
yy353:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy383;
		default:	goto yy2;
		}
yy354:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy379;
		default:	goto yy2;
		}
yy355:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy357;
		case 'r':	goto yy356;
		default:	goto yy2;
		}
yy356:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy369;
		default:	goto yy2;
		}
yy357:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy358;
		default:	goto yy2;
		}
yy358:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy359;
		default:	goto yy2;
		}
yy359:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy360;
		default:	goto yy2;
		}
yy360:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy361;
		default:	goto yy2;
		}
yy361:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy362;
		default:	goto yy2;
		}
yy362:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy363;
		default:	goto yy2;
		}
yy363:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy364;
		default:	goto yy2;
		}
yy364:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy365;
		default:	goto yy2;
		}
yy365:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy366;
		default:	goto yy2;
		}
yy366:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy367;
		default:	goto yy2;
		}
yy367:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy368;
		default:	goto yy2;
		}
yy368:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy277;
		default:	goto yy2;
		}
yy369:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy370;
		default:	goto yy2;
		}
yy370:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy371;
		default:	goto yy2;
		}
yy371:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy372;
		default:	goto yy2;
		}
yy372:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy373;
		default:	goto yy2;
		}
yy373:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy374;
		default:	goto yy2;
		}
yy374:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy375;
		default:	goto yy2;
		}
yy375:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy376;
		default:	goto yy2;
		}
yy376:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy377;
		default:	goto yy2;
		}
yy377:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy378;
		default:	goto yy2;
		}
yy378:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy279;
		default:	goto yy2;
		}
yy379:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy380;
		default:	goto yy2;
		}
yy380:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy381;
		default:	goto yy2;
		}
yy381:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy382;
		default:	goto yy2;
		}
yy382:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy281;
		default:	goto yy2;
		}
yy383:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy384;
		default:	goto yy2;
		}
yy384:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy385;
		default:	goto yy2;
		}
yy385:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy386;
		default:	goto yy2;
		}
yy386:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy387;
		default:	goto yy2;
		}
yy387:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy388;
		default:	goto yy2;
		}
yy388:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy389;
		default:	goto yy2;
		}
yy389:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy390;
		default:	goto yy2;
		}
yy390:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy286;
		default:	goto yy2;
		}
yy391:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy392;
		default:	goto yy2;
		}
yy392:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy393;
		default:	goto yy2;
		}
yy393:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy394;
		default:	goto yy2;
		}
yy394:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy288;
		default:	goto yy2;
		}
yy395:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy396;
		default:	goto yy2;
		}
yy396:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy397;
		default:	goto yy2;
		}
yy397:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy398;
		default:	goto yy2;
		}
yy398:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy399;
		default:	goto yy2;
		}
yy399:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy400;
		default:	goto yy2;
		}
yy400:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy401;
		default:	goto yy2;
		}
yy401:
		yyaccept = 14;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy402;
		default:	goto yy291;
		}
yy402:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy403;
		default:	goto yy2;
		}
yy403:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy404;
		default:	goto yy2;
		}
yy404:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy405;
		default:	goto yy2;
		}
yy405:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy406;
		default:	goto yy2;
		}
yy406:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy407;
		default:	goto yy2;
		}
yy407:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy293;
		default:	goto yy2;
		}
yy408:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy434;
		default:	goto yy2;
		}
yy409:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy410;
		case 's':	goto yy411;
		default:	goto yy2;
		}
yy410:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy433;
		default:	goto yy2;
		}
yy411:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy412;
		default:	goto yy2;
		}
yy412:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy413;
		default:	goto yy2;
		}
yy413:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy414;
		default:	goto yy2;
		}
yy414:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy415;
		default:	goto yy2;
		}
yy415:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy416;
		default:	goto yy2;
		}
yy416:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy417;
		default:	goto yy2;
		}
yy417:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy418;
		default:	goto yy2;
		}
yy418:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy419;
		default:	goto yy2;
		}
yy419:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy420;
		default:	goto yy2;
		}
yy420:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy421;
		default:	goto yy2;
		}
yy421:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy422;
		default:	goto yy2;
		}
yy422:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy423;
		case '=':	goto yy238;
		default:	goto yy236;
		}
yy423:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy424;
		default:	goto yy2;
		}
yy424:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy425;
		case 'u':	goto yy426;
		default:	goto yy2;
		}
yy425:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy431;
		default:	goto yy2;
		}
yy426:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy427;
		default:	goto yy2;
		}
yy427:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy428;
		default:	goto yy2;
		}
yy428:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy429;
		default:	goto yy2;
		}
yy429:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy430;
		default:	goto yy2;
		}
yy430:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy244;
		default:	goto yy243;
		}
yy431:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy432;
		default:	goto yy2;
		}
yy432:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy248;
		default:	goto yy247;
		}
yy433:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy211;
		default:	goto yy9;
		}
yy434:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy435;
		default:	goto yy2;
		}
yy435:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy436;
		default:	goto yy2;
		}
yy436:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy437;
		default:	goto yy2;
		}
yy437:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy438;
		default:	goto yy2;
		}
yy438:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy439;
		default:	goto yy2;
		}
yy439:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy440;
		default:	goto yy2;
		}
yy440:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy441;
		default:	goto yy2;
		}
yy441:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy442;
		default:	goto yy2;
		}
yy442:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy443;
		default:	goto yy2;
		}
yy443:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy444;
		default:	goto yy2;
		}
yy444:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy445;
		case '=':	goto yy221;
		default:	goto yy220;
		}
yy445:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy446;
		default:	goto yy2;
		}
yy446:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy448;
		case 'u':	goto yy447;
		default:	goto yy2;
		}
yy447:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy451;
		default:	goto yy2;
		}
yy448:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy449;
		default:	goto yy2;
		}
yy449:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy450;
		default:	goto yy2;
		}
yy450:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy228;
		default:	goto yy227;
		}
yy451:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy452;
		default:	goto yy2;
		}
yy452:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy453;
		default:	goto yy2;
		}
yy453:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy454;
		default:	goto yy2;
		}
yy454:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy232;
		default:	goto yy231;
		}
yy455:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy480;
		default:	goto yy2;
		}
yy456:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy466;
		default:	goto yy2;
		}
yy457:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy462;
		default:	goto yy2;
		}
yy458:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy459;
		default:	goto yy2;
		}
yy459:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy460;
		default:	goto yy2;
		}
yy460:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy461;
		default:	goto yy2;
		}
yy461:
		yych = *++opt;
		goto yy24;
yy462:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy463;
		default:	goto yy2;
		}
yy463:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy464;
		default:	goto yy2;
		}
yy464:
		++opt;
#line 1730 "cplus2asp.re2c"
		{ return OPT_STATS; }
#line 4110 "<stdout>"
yy466:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy467;
		default:	goto yy2;
		}
yy467:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy468;
		default:	goto yy2;
		}
yy468:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy469;
		default:	goto yy2;
		}
yy469:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy470;
		case '=':	goto yy60;
		default:	goto yy50;
		}
yy470:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy471;
		default:	goto yy2;
		}
yy471:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy472;
		case 'u':	goto yy473;
		default:	goto yy2;
		}
yy472:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy478;
		default:	goto yy2;
		}
yy473:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy474;
		default:	goto yy2;
		}
yy474:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy475;
		default:	goto yy2;
		}
yy475:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy476;
		default:	goto yy2;
		}
yy476:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy477;
		default:	goto yy2;
		}
yy477:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy66;
		default:	goto yy65;
		}
yy478:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy479;
		default:	goto yy2;
		}
yy479:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy70;
		default:	goto yy69;
		}
yy480:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy481;
		default:	goto yy2;
		}
yy481:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy482;
		default:	goto yy2;
		}
yy482:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy483;
		default:	goto yy2;
		}
yy483:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy484;
		default:	goto yy2;
		}
yy484:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy485;
		default:	goto yy2;
		}
yy485:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy486;
		default:	goto yy2;
		}
yy486:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy487;
		default:	goto yy2;
		}
yy487:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy488;
		default:	goto yy2;
		}
yy488:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy489;
		default:	goto yy2;
		}
yy489:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy57;
		default:	goto yy56;
		}
yy490:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy501;
		case 'x':	goto yy500;
		default:	goto yy2;
		}
yy491:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy495;
		default:	goto yy2;
		}
yy492:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy493;
		default:	goto yy2;
		}
yy493:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy494;
		default:	goto yy2;
		}
yy494:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy158;
		default:	goto yy12;
		}
yy495:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy496;
		default:	goto yy2;
		}
yy496:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy497;
		default:	goto yy2;
		}
yy497:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy498;
		default:	goto yy2;
		}
yy498:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy499;
		default:	goto yy2;
		}
yy499:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy166;
		default:	goto yy165;
		}
yy500:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy512;
		default:	goto yy2;
		}
yy501:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy502;
		default:	goto yy2;
		}
yy502:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy503;
		default:	goto yy2;
		}
yy503:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy504;
		default:	goto yy2;
		}
yy504:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy505;
		default:	goto yy2;
		}
yy505:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy506;
		default:	goto yy2;
		}
yy506:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy507;
		default:	goto yy2;
		}
yy507:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy508;
		default:	goto yy2;
		}
yy508:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy509;
		default:	goto yy2;
		}
yy509:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy510;
		default:	goto yy2;
		}
yy510:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy511;
		default:	goto yy2;
		}
yy511:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy162;
		default:	goto yy2;
		}
yy512:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy513;
		default:	goto yy2;
		}
yy513:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy514;
		default:	goto yy2;
		}
yy514:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy515;
		default:	goto yy2;
		}
yy515:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy170;
		default:	goto yy169;
		}
yy516:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy517;
		default:	goto yy2;
		}
yy517:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy518;
		default:	goto yy2;
		}
yy518:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy519;
		default:	goto yy2;
		}
yy519:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy520;
		default:	goto yy2;
		}
yy520:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy521;
		default:	goto yy2;
		}
yy521:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy522;
		default:	goto yy2;
		}
yy522:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy47;
		default:	goto yy26;
		}
yy523:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy524;
		default:	goto yy2;
		}
yy524:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy525;
		default:	goto yy2;
		}
yy525:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy526;
		default:	goto yy2;
		}
yy526:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy527;
		case 'p':	goto yy530;
		case 's':	goto yy529;
		case 't':	goto yy528;
		default:	goto yy2;
		}
yy527:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy566;
		default:	goto yy2;
		}
yy528:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy558;
		default:	goto yy2;
		}
yy529:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy554;
		default:	goto yy2;
		}
yy530:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy532;
		case 'r':	goto yy531;
		default:	goto yy2;
		}
yy531:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy544;
		default:	goto yy2;
		}
yy532:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy533;
		default:	goto yy2;
		}
yy533:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy534;
		default:	goto yy2;
		}
yy534:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy535;
		default:	goto yy2;
		}
yy535:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy536;
		default:	goto yy2;
		}
yy536:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy537;
		default:	goto yy2;
		}
yy537:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy538;
		default:	goto yy2;
		}
yy538:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy539;
		default:	goto yy2;
		}
yy539:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy540;
		default:	goto yy2;
		}
yy540:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy541;
		default:	goto yy2;
		}
yy541:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy542;
		default:	goto yy2;
		}
yy542:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy543;
		default:	goto yy2;
		}
yy543:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy142;
		default:	goto yy2;
		}
yy544:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy545;
		default:	goto yy2;
		}
yy545:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy546;
		default:	goto yy2;
		}
yy546:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy547;
		default:	goto yy2;
		}
yy547:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy548;
		default:	goto yy2;
		}
yy548:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy549;
		default:	goto yy2;
		}
yy549:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy550;
		default:	goto yy2;
		}
yy550:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy551;
		default:	goto yy2;
		}
yy551:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy552;
		default:	goto yy2;
		}
yy552:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy553;
		default:	goto yy2;
		}
yy553:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy144;
		default:	goto yy2;
		}
yy554:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy555;
		default:	goto yy2;
		}
yy555:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy556;
		default:	goto yy2;
		}
yy556:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy557;
		default:	goto yy2;
		}
yy557:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy146;
		default:	goto yy2;
		}
yy558:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy559;
		default:	goto yy2;
		}
yy559:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy560;
		default:	goto yy2;
		}
yy560:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy561;
		default:	goto yy2;
		}
yy561:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy562;
		default:	goto yy2;
		}
yy562:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy563;
		default:	goto yy2;
		}
yy563:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy564;
		default:	goto yy2;
		}
yy564:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy565;
		default:	goto yy2;
		}
yy565:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy151;
		default:	goto yy2;
		}
yy566:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy567;
		default:	goto yy2;
		}
yy567:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy568;
		default:	goto yy2;
		}
yy568:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy569;
		default:	goto yy2;
		}
yy569:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy570;
		default:	goto yy2;
		}
yy570:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy571;
		default:	goto yy2;
		}
yy571:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy572;
		default:	goto yy2;
		}
yy572:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy573;
		default:	goto yy154;
		}
yy573:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy574;
		default:	goto yy2;
		}
yy574:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy575;
		default:	goto yy2;
		}
yy575:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy576;
		default:	goto yy2;
		}
yy576:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy577;
		default:	goto yy2;
		}
yy577:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy578;
		default:	goto yy2;
		}
yy578:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy156;
		default:	goto yy2;
		}
yy579:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy580;
		default:	goto yy2;
		}
yy580:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy581;
		default:	goto yy2;
		}
yy581:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy582;
		default:	goto yy2;
		}
yy582:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy583;
		default:	goto yy2;
		}
yy583:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy584;
		default:	goto yy2;
		}
yy584:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy585;
		default:	goto yy2;
		}
yy585:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy586;
		default:	goto yy2;
		}
yy586:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy587;
		default:	goto yy2;
		}
yy587:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy588;
		default:	goto yy2;
		}
yy588:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy589;
		default:	goto yy2;
		}
yy589:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy27;
		default:	goto yy2;
		}
yy590:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy592;
		case 'n':	goto yy591;
		default:	goto yy2;
		}
yy591:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy656;
		default:	goto yy2;
		}
yy592:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy597;
		case 'g':	goto yy596;
		case 'p':	goto yy595;
		case 's':	goto yy594;
		case 't':	goto yy593;
		default:	goto yy2;
		}
yy593:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy648;
		default:	goto yy2;
		}
yy594:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy639;
		case 't':	goto yy638;
		default:	goto yy2;
		}
yy595:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy616;
		case 'r':	goto yy615;
		default:	goto yy2;
		}
yy596:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy602;
		default:	goto yy2;
		}
yy597:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy598;
		default:	goto yy2;
		}
yy598:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy599;
		default:	goto yy2;
		}
yy599:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy600;
		default:	goto yy2;
		}
yy600:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy601;
		default:	goto yy2;
		}
yy601:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy183;
		default:	goto yy2;
		}
yy602:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy603;
		default:	goto yy2;
		}
yy603:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy604;
		default:	goto yy2;
		}
yy604:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy605;
		default:	goto yy2;
		}
yy605:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy606;
		default:	goto yy2;
		}
yy606:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy607;
		default:	goto yy2;
		}
yy607:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy608;
		default:	goto yy2;
		}
yy608:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy609;
		default:	goto yy186;
		}
yy609:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy610;
		default:	goto yy2;
		}
yy610:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy611;
		default:	goto yy2;
		}
yy611:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy612;
		default:	goto yy2;
		}
yy612:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy613;
		default:	goto yy2;
		}
yy613:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy614;
		default:	goto yy2;
		}
yy614:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy188;
		default:	goto yy2;
		}
yy615:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy628;
		default:	goto yy2;
		}
yy616:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy617;
		default:	goto yy2;
		}
yy617:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy618;
		default:	goto yy2;
		}
yy618:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy619;
		default:	goto yy2;
		}
yy619:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy620;
		default:	goto yy2;
		}
yy620:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy621;
		default:	goto yy2;
		}
yy621:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy622;
		default:	goto yy2;
		}
yy622:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy623;
		default:	goto yy2;
		}
yy623:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy624;
		default:	goto yy2;
		}
yy624:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy625;
		default:	goto yy2;
		}
yy625:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy626;
		default:	goto yy2;
		}
yy626:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy627;
		default:	goto yy2;
		}
yy627:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy193;
		default:	goto yy2;
		}
yy628:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy629;
		default:	goto yy2;
		}
yy629:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy630;
		default:	goto yy2;
		}
yy630:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy631;
		default:	goto yy2;
		}
yy631:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy632;
		default:	goto yy2;
		}
yy632:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy633;
		default:	goto yy2;
		}
yy633:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy634;
		default:	goto yy2;
		}
yy634:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy635;
		default:	goto yy2;
		}
yy635:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy636;
		default:	goto yy2;
		}
yy636:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy637;
		default:	goto yy2;
		}
yy637:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy195;
		default:	goto yy2;
		}
yy638:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy643;
		default:	goto yy2;
		}
yy639:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy640;
		default:	goto yy2;
		}
yy640:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy641;
		default:	goto yy2;
		}
yy641:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy642;
		default:	goto yy2;
		}
yy642:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy198;
		default:	goto yy2;
		}
yy643:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy644;
		default:	goto yy2;
		}
yy644:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy645;
		default:	goto yy2;
		}
yy645:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy646;
		default:	goto yy2;
		}
yy646:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy647;
		default:	goto yy2;
		}
yy647:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy200;
		default:	goto yy2;
		}
yy648:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy649;
		default:	goto yy2;
		}
yy649:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy650;
		default:	goto yy2;
		}
yy650:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy651;
		default:	goto yy2;
		}
yy651:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy652;
		default:	goto yy2;
		}
yy652:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy653;
		default:	goto yy2;
		}
yy653:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy654;
		default:	goto yy2;
		}
yy654:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy655;
		default:	goto yy2;
		}
yy655:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy205;
		default:	goto yy2;
		}
yy656:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy657;
		default:	goto yy2;
		}
yy657:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy658;
		case 'h':	goto yy659;
		default:	goto yy2;
		}
yy658:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy663;
		default:	goto yy2;
		}
yy659:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy660;
		default:	goto yy2;
		}
yy660:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy661;
		default:	goto yy2;
		}
yy661:
		yych = *++opt;
		switch (yych) {
		case 'k':	goto yy662;
		default:	goto yy2;
		}
yy662:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy209;
		default:	goto yy173;
		}
yy663:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy664;
		default:	goto yy2;
		}
yy664:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy665;
		default:	goto yy2;
		}
yy665:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy666;
		default:	goto yy2;
		}
yy666:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy207;
		default:	goto yy175;
		}
yy667:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy668;
		default:	goto yy2;
		}
yy668:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy669;
		default:	goto yy2;
		}
yy669:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy670;
		default:	goto yy2;
		}
yy670:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy671;
		default:	goto yy2;
		}
yy671:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy672;
		default:	goto yy2;
		}
yy672:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy673;
		default:	goto yy2;
		}
yy673:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy674;
		case '=':	goto yy114;
		default:	goto yy111;
		}
yy674:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy676;
		case 's':	goto yy675;
		default:	goto yy2;
		}
yy675:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy685;
		default:	goto yy2;
		}
yy676:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy677;
		case 'u':	goto yy678;
		default:	goto yy2;
		}
yy677:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy683;
		default:	goto yy2;
		}
yy678:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy679;
		default:	goto yy2;
		}
yy679:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy680;
		default:	goto yy2;
		}
yy680:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy681;
		default:	goto yy2;
		}
yy681:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy682;
		default:	goto yy2;
		}
yy682:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy120;
		default:	goto yy119;
		}
yy683:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy684;
		default:	goto yy2;
		}
yy684:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy124;
		default:	goto yy123;
		}
yy685:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy686;
		default:	goto yy2;
		}
yy686:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy687;
		default:	goto yy2;
		}
yy687:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy688;
		default:	goto yy2;
		}
yy688:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy689;
		default:	goto yy2;
		}
yy689:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy690;
		default:	goto yy127;
		}
yy690:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy691;
		default:	goto yy2;
		}
yy691:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy692;
		default:	goto yy2;
		}
yy692:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy693;
		default:	goto yy2;
		}
yy693:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy130;
		default:	goto yy2;
		}
yy694:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy695;
		default:	goto yy2;
		}
yy695:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy696;
		default:	goto yy2;
		}
yy696:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy697;
		default:	goto yy2;
		}
yy697:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy702;
		case 'g':	goto yy698;
		case 'p':	goto yy701;
		case 's':	goto yy700;
		case 't':	goto yy699;
		default:	goto yy2;
		}
yy698:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy742;
		default:	goto yy2;
		}
yy699:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy734;
		default:	goto yy2;
		}
yy700:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy730;
		default:	goto yy2;
		}
yy701:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy708;
		case 'r':	goto yy707;
		default:	goto yy2;
		}
yy702:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy703;
		default:	goto yy2;
		}
yy703:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy704;
		default:	goto yy2;
		}
yy704:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy705;
		default:	goto yy2;
		}
yy705:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy706;
		default:	goto yy2;
		}
yy706:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy89;
		default:	goto yy2;
		}
yy707:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy720;
		default:	goto yy2;
		}
yy708:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy709;
		default:	goto yy2;
		}
yy709:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy710;
		default:	goto yy2;
		}
yy710:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy711;
		default:	goto yy2;
		}
yy711:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy712;
		default:	goto yy2;
		}
yy712:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy713;
		default:	goto yy2;
		}
yy713:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy714;
		default:	goto yy2;
		}
yy714:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy715;
		default:	goto yy2;
		}
yy715:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy716;
		default:	goto yy2;
		}
yy716:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy717;
		default:	goto yy2;
		}
yy717:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy718;
		default:	goto yy2;
		}
yy718:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy719;
		default:	goto yy2;
		}
yy719:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy94;
		default:	goto yy2;
		}
yy720:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy721;
		default:	goto yy2;
		}
yy721:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy722;
		default:	goto yy2;
		}
yy722:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy723;
		default:	goto yy2;
		}
yy723:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy724;
		default:	goto yy2;
		}
yy724:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy725;
		default:	goto yy2;
		}
yy725:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy726;
		default:	goto yy2;
		}
yy726:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy727;
		default:	goto yy2;
		}
yy727:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy728;
		default:	goto yy2;
		}
yy728:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy729;
		default:	goto yy2;
		}
yy729:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy96;
		default:	goto yy2;
		}
yy730:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy731;
		default:	goto yy2;
		}
yy731:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy732;
		default:	goto yy2;
		}
yy732:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy733;
		default:	goto yy2;
		}
yy733:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy98;
		default:	goto yy2;
		}
yy734:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy735;
		default:	goto yy2;
		}
yy735:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy736;
		default:	goto yy2;
		}
yy736:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy737;
		default:	goto yy2;
		}
yy737:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy738;
		default:	goto yy2;
		}
yy738:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy739;
		default:	goto yy2;
		}
yy739:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy740;
		default:	goto yy2;
		}
yy740:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy741;
		default:	goto yy2;
		}
yy741:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy103;
		default:	goto yy2;
		}
yy742:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy743;
		default:	goto yy2;
		}
yy743:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy744;
		default:	goto yy2;
		}
yy744:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy745;
		default:	goto yy2;
		}
yy745:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy746;
		default:	goto yy2;
		}
yy746:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy747;
		default:	goto yy2;
		}
yy747:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy748;
		default:	goto yy2;
		}
yy748:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy749;
		default:	goto yy106;
		}
yy749:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy750;
		default:	goto yy2;
		}
yy750:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy751;
		default:	goto yy2;
		}
yy751:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy752;
		default:	goto yy2;
		}
yy752:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy753;
		default:	goto yy2;
		}
yy753:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy754;
		default:	goto yy2;
		}
yy754:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy108;
		default:	goto yy2;
		}
yy755:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy756;
		default:	goto yy2;
		}
yy756:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy757;
		default:	goto yy2;
		}
yy757:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy758;
		default:	goto yy2;
		}
yy758:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy759;
		default:	goto yy2;
		}
yy759:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy760;
		case '=':	goto yy35;
		default:	goto yy33;
		}
yy760:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy761;
		default:	goto yy2;
		}
yy761:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy762;
		case 'u':	goto yy763;
		default:	goto yy2;
		}
yy762:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy768;
		default:	goto yy2;
		}
yy763:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy764;
		default:	goto yy2;
		}
yy764:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy765;
		default:	goto yy2;
		}
yy765:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy766;
		default:	goto yy2;
		}
yy766:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy767;
		default:	goto yy2;
		}
yy767:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy41;
		default:	goto yy40;
		}
yy768:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy769;
		default:	goto yy2;
		}
yy769:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy45;
		default:	goto yy44;
		}
yy770:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy771;
		default:	goto yy2;
		}
yy771:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy772;
		default:	goto yy2;
		}
yy772:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy30;
		default:	goto yy2;
		}
yy773:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy781;
		default:	goto yy2;
		}
yy774:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy775;
		default:	goto yy2;
		}
yy775:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy776;
		default:	goto yy2;
		}
yy776:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy777;
		default:	goto yy2;
		}
yy777:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy778;
		default:	goto yy2;
		}
yy778:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy779;
		default:	goto yy2;
		}
yy779:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy780;
		default:	goto yy2;
		}
yy780:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy79;
		default:	goto yy2;
		}
yy781:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy782;
		default:	goto yy2;
		}
yy782:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy783;
		default:	goto yy2;
		}
yy783:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy784;
		default:	goto yy2;
		}
yy784:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy785;
		default:	goto yy2;
		}
yy785:
		++opt;
		switch ((yych = *opt)) {
		case 'e':	goto yy76;
		default:	goto yy2;
		}
	}
#line 1789 "cplus2asp.re2c"

}

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out) {
	out   << "Usage: " << execName << " <INPUT_FILES> [<OPTIONS>] [<CONSTANTS>] [<NUM_SOLUTIONS>]" << std::endl
		  << std::endl
		  << "Calls cplus2asp.bin (translator), f2lp (pre-processor), gringo (grounder)," << std::endl
		  << "clasp (solver), and as2transition (post-processor) on the input files" << std::endl
		  << "(CCalc-style files that have been translated to ASP/f2lp syntax), adding " << std::endl
		  << "\"standard\" CCalc to ASP translation support files and outputting the results " << std::endl
		  << "from as2transition." << std::endl
		  << std::endl
		  << "  <INPUT_FILES> --------- A series of files in CCalc, ASP, or f2lp syntax." << std::endl
		  << "                          At least one input file is required." << std::endl
		  << "                          Any input files that have extensions \".f2lp\" or \".lp\"" << std::endl
		  << "                          will automatically not be passed to the translator." << std::endl
		  << std::endl
		  << "  <OPTIONS> ------------- Optional arguments that change the program's behavior." << std::endl
		  << std::endl
		  << "  <CONSTANTS> ----------- Constant definitions that are passed to the grounder." << std::endl
		  << "                          There are three special constants that are often seen in" << std::endl
		  << "                          CCalc programs, and so can be useful to manually set." << std::endl
		  << "                          These are not required to be defined if special \"hint\"" << std::endl
		  << "                          comments are placed in the output from the translator." << std::endl
		  << "                          * maxAdditive - The maximum additive integer (only needed if" << std::endl
		  << "                                          using additive fluents/actions)." << std::endl
		  << "                          * maxstep ----- The maximum time step to consider." << std::endl
		  << "                          * minstep ----- The minimum time step to consider." << std::endl
		  << "                          * query   ----- The query number (i.e., label) to select." << std::endl
		  << std::endl
		  << "  <NUM_SOLUTIONS> ------- The desired number of solutions for the solver to find, or 'all'." << std::endl
		  << "                          This should be a non-negative integer (0 or greater)." << std::endl
		  << "                          If not specified, defaults to 1." << std::endl
		  << std::endl
		  << "Normal Program Options:" << std::endl
		  << "  -auto" << std::endl
		  << "  --automated ----------- Makes the program run in automated mode, so it won't prompt" << std::endl
		  << "                          or ask for any information from the user." << std::endl
		  << std::endl
		  << "  <CONST>=<VALUE>, -c <CONST>=<VALUE>" << std::endl
		  << "  --const <CONST>=<VALUE> Declares a constant & value pair to pass to gringo." << std::endl
		  << "                          You will probably need to at least declare values for" << std::endl
		  << "                          the constants maxstep, query, and possibly maxAdditive." << std::endl
		  << std::endl
		  << "  --help ---------------- Shows this usage message." << std::endl
		  << "  -v" << std::endl
		  << "  --version ------------- Outputs version information." << std::endl
		  << std::endl
		  << "  -m <MODE, -m=<MODE>, --mode <MODE>" << std::endl
		  << "  --mode=<MODE> --------- Sets the program to run in the specified running mode." << std::endl
		  << "                          <MODE> can be one of the following: " << std::endl
		  << "                          * static-auto --- uses a static translation and automatically " << std::endl
		  << "                                            advances the queries maximum time step." << std::endl
		  << "                          * static-manual - uses a static translation and queries the " << std::endl
		  << "                                            user each time a solution isn't found for a " << std::endl
		  << "                                            new time step." << std::endl
		  << "                          * incremental --- [default] uses an incremental translation " << std::endl
		  << "                                            and solver for better efficiency while " << std::endl
		  << "                                            ranging over maxsteps in a query." << std::endl
		  << "                          * reactive ------ uses a incremental translation and reactive " << std::endl
		  << "                                            solver in order to dynamically adding abnormality " << std::endl
		  << "                                            constants during execution."  << std::endl
		  << std::endl
		  << " -q <QUERY>, -q=<QUERY>, --query <QUERY>, query=<QUERY>"  << std::endl
		  << " --query=<QUERY> -------- Sets the query to use from those available in the C+ domain. " << std::endl
		  << "                          <QUERY> should be a positive integer and should be defined in " << std::endl
		  << "                          the domain file." << std::endl
		  << std::endl
		  << " -max <STEP>, -max=<STEP>, --maxstep <STEP>, maxstep=<STEP>" << std::endl
		  << " --maxstep=<STEP> ------- Sets the maximum step to solve for to <STEP>. <STEP> must be a " << std::endl
		  << "                          positive integer or a finite positive range (i.e. '1..5')." << std::endl
		  << "                          A range is seen as shorthand for a combined minimum and maximum " << std::endl
		  << "                          step definition." << std::endl
		  << std::endl
		  << " -min <STEP>, -min=<STEP>, --minstep <STEP>, minstep=<STEP>" << std::endl
		  << " --minstep=<STEP> ------- Sets the minimum step to solve for to <STEP>. <STEP> must be a " << std::endl
		  << "                          positive integer." << std::endl
		  << std::endl
// TODO: Uncomment this when we have the reactive bridge complete w/ remote program support.
#ifndef NO_REACTIVE_BRIDGE
#if 0
		  << " -p <PORT]" << std::endl
		  << " --port [PORT] ---------- Sets the port used to connect with external client programs instead " << std::endl
		  << "                          of using the console to gather online input. This option is only " << std::endl
		  << "                          valid in reactive mode." << std::endl
#endif
		  << " -i <PORT>, -i=<PORT>, --internal-port <PORT>" << std::endl
		  << " --internal-port=<PORT> - Sets the port used for internal communication between the " << std::endl
		  << "                          reactive solver and bridge. This option is only valid in " << std::endl
		  << "                          reactive mode." << std::endl
#else
		  << " -p <PORT>, -p=<PORT>, --port <PORT>" << std::endl
		  << " --port=<PORT> ---------- Sets the port used to connect with external client programs." << std::endl
#endif
		  << std::endl
		  << " -na[=<VALUE>]" << std::endl
		  << " --none-alias[=<VALUE>]   Indicates that we should simulate 'none' with <VALUE> [default: '" << DEF_NONE_HACK_VAL << "']" << std::endl
		  << "                          This is helpful for circumventing a bug in Gringo 3.0.4 that " << std::endl
		  << "                          sometimes prevents domains from properly grounding due to " << std::endl
		  << "                          unification issues." << std::endl
		  << std::endl
		  << " -s[=<BOOLEAN>]" << std::endl
		  << " --shift[=<BOOLEAN>] ---- Sets whether to allow the solver to shift disjunction in the head of a rule " << std::endl
		  << "                          generated by the pre-processor into the body. This is useful when " << std::endl
		  << "                          the preprocessor generate disjunctive rules and a disjunctive " << std::endl
		  << "                          solver isn't available. May not be guaranteed to preserve stable " << std::endl
		  << "                          models." << std::endl
		  << std::endl
		  << " --stats ---------------- Indicates additional solving statistics should be requested from" << std::endl
		  << "                          the solver and displayed after each solver run." << std::endl
		  << std::endl
		  << " --language=<LANG> ------ Sets the input language that will be accepted for translation/running." << std::endl
		  << "                          <LANG> can be one of the following:" << std::endl
		  << "                          * c+, C+ -------- [default] The action language C+." << std::endl
 		  << "                          * bc, BC -------- The action language BC." << std::endl
		  << "                          * bc+, BC+ ------ An experimental extension to language BC." << std::endl
		  << std::endl
		  << "Extra Program Options:" << std::endl
		  << "  Options with <PROG> or <PROGRAM> in their name affect individual" << std::endl
		  << "  programs in the tool chain, depending on <PROG> or <PROGRAM>'s value." << std::endl
		  << "  Any option with <PROG> in its name should have <PROG> replaced with one of:" << std::endl
		  << "    gr (grounder), pre (pre-processor), post (post-processor), so (solver)," << std::endl
		  << "    trans (translator), or br (reactive bridge)." << std::endl
		  << "  Replace <PROGRAM> in the applicable options with one of the following:" << std::endl
		  << "    grounder, pre-processor, post-processor, solver, translator, or bridge." << std::endl
		  << std::endl
		  << "  -<PROG> <PATH>, -<PROG>=<PATH>, --<PROGRAM> <PATH> " << std::endl
		  << "  --<PROGRAM>=<PATH> ------ Gives a new path to the desired tool chain program." << std::endl
		  << std::endl
		  << "  -<PROG>opt <OPTS>, -<PROG>opt=<OPTS>, --<PROGRAM>-opts <OPTS>" << std::endl
		  << "  --<PROGRAM>-opts=<OPTS> -- Passes <OPTS> to the given tool chain program." << std::endl
		  << std::endl
		  << "  -<PROG>out <FILE>, -<PROG>out=<FILE>, --<PROGRAM>-output <FILE>" << std::endl
		  << "  --[PROGRAM]-output=<FILE> Write the output of the specified tool to <FILE>." << std::endl
		  << std::endl
		  << "  -from<PROG> " << std::endl
		  << "  --from-<PROGRAM> -------- Starts running the tool chain from the given program." << std::endl
		  << std::endl
		  << "  -just<PROG>" << std::endl
		  << "  --just-<PROGRAM> -------- Removes all but the given program from the tool chain." << std::endl
		  << std::endl
		  << "  -to<PROG>" << std::endl
		  << "  --to-<PROGRAM> ---------- Stops running the tool chain after the given program." << std::endl
		  << std::endl
		  << "  -nostd" << std::endl
		  << "  --no-standard ----------- Removes the standard translation files from the call to the" << std::endl
		  << "                            pre-processor. Useful if supplying different \"standard\"" << std::endl
		  << "                            files, or for debugging of input file errors." << std::endl
		  << std::endl
		  << " -symtab <FILE>, -symtab=<FILE>, --symbol-table=<FILE> " << std::endl
		  << " --symbol-table=<FILE> -- Writes the program's symbol table to <FILE> for use in other programs." << std::endl
		  << std::endl
		  << "  Example: " << execName << " myProgram.cp" << std::endl
		  << "           would translate and process the file \"myProgram.cp\"," << std::endl
		  << "           interactively asking which query from the file to run, returning" << std::endl
		  << "           the first solution found (if any)." << std::endl
		  << "  Example: " << execName << " myProgram.cp query=1 2" << std::endl
		  << "           does the same as above, except it automatically runs Query 1" << std::endl
		  << "           (assuming it can find or derive maxstep), and tries to find two" << std::endl
		  << "           solutions to the query." << std::endl
		  << "  Example: " << execName << " myProgram.cp query=1 maxstep=3 -so cmodels 2" << std::endl
		  << "           would do the same as above, but it changes the solver to cmodels" << std::endl
		  << "           and forces maxstep to be 3." << std::endl
		  << "  Example: " << execName << " myProgram.f2lp --just-pre-processor" << std::endl
		  << "           skips running the translator because the input file has" << std::endl
		  << "           the .f2lp extension, just running f2lp (the pre-processor)" << std::endl
		  << "           on the contents of \"myProgram.f2lp\", outputting the results." << std::endl;
	return out;
}

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out) {
	// Show version information and quit.
	out << execName << " version " << VERSION_MAJOR;
	out << "." << VERSION_MINOR;
	if(VERSION_REV > 0) { out << "." << VERSION_REV; }
	out << std::endl;
	return out;
}


void scanFilesForConstants(Config& config, bool ranTranslator) {


	// Go through the input file(s) looking for special "hint" comments
	// that tell us the value of maxAdditive, maxstep, and/or query.
	// Loop through the file(s) looking for hints for any undefined constants.

	// Start with the output of the translator
	if(config.run(Config::TC_TRANSLATOR))
	{	// Start with the output from the translator.
		utils::debug("Starting with the translator output file...",true);
		scanForConstants(config, config.output(Config::TC_TRANSLATOR));
	}


	// Scan all other input files
	for (Config::Toolchain tool = Config::_TC_BEGIN_; tool < Config::_TC_END_; tool = (Config::Toolchain)(((int) tool) + 1)) {
		for (Config::InputList::const_iterator it = config.beginInput(tool); it != config.endInput(tool); it++) {
			scanForConstants(config, *it);
		}

	}
}





void scanForConstants(Config& config, std::string const& file) {
	std::string tempLine = "";
	std::string tempString;
	std::ifstream fin;

	std::string findText = "";
	size_t tempPos, tempPos2;
	size_t currentLine = 0;

	bool foundQuery = false;
	unsigned int tempInt;
	unsigned int queryNum = 0;
	Config::Query tempQuery;					// Temporary place to store query information.
	std::stringstream nameBuilder;


	// Open the file
	fin.open(file.c_str());

	// If at any point we fail to open an input file, just skip over it...
	if(fin.fail()) {
		// Throw a warning!
		utils::warning("Unable to open file '%s' for scanning. Skipping it.", true, file.c_str());
	}


	while(!fin.eof()) {
		// Go line by line looking for specially-formatted comments.
		getline(fin, tempLine);
		currentLine++;
		if (tempLine.empty()) continue;

		// Look for a maxadditive definition
		if ( config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED) {
			// Look for a maxAdditive hint comment.
			// If one is found, set maxAdditive

			findText = "% [MaxAdditive:";
			tempPos = tempLine.find(findText);

			if(tempPos != std::string::npos)
			{
				utils::debug("Found what appears to be a maxAdditive definition: '%s'", true, tempLine.c_str());
				tempPos += findText.length();
				tempPos2 = tempLine.find("]", tempPos);
				if(tempPos2 != std::string::npos && tempPos2 > tempPos)
				{
					tempString = tempLine.substr(tempPos, tempPos2 - tempPos);
					if(utils::from_string(tempInt, tempString))
					{
						// Found maxAdditive, set it and flag that we need the additive standard file.
						utils::pragma("Found a maxAdditive hint. Setting maxAdditive to '%d'.", true, tempInt);
						config.intConfigOpt(Config::OPT_MAXADDITIVE, tempInt);
					} else {
						// It looks like this hint is malformed. Be sure to warn them!
						utils::warning("The maxAdditive hint '%s' is malformed. Ignoring it.", true, tempLine.c_str());
					}
				}
			}
		}

		// Look for a query hint comment.
		// Collect any that are found.
		findText = "% [Query: Label:";

		if((tempPos = tempLine.find(findText)) != std::string::npos
				&& (tempPos += findText.length())
				&& (tempPos2 = tempLine.find_first_of(",]", tempPos)) != std::string::npos
				&& tempPos2 > tempPos)
		{
			foundQuery = false;
			utils::debug("Found what appears to be a query definition: '%s'", true, tempLine.c_str());
			tempString = tempLine.substr(tempPos, tempPos2 - tempPos);

			// Found a query's label, keep it and look for the maxstep...
			tempQuery.cmd = tempString;

			findText = "Maxstep:";
			if (tempLine.at(tempPos2) != ']' // Don't bother if we're at the end of the hint...
					&& (tempPos = tempLine.find(findText, tempPos2)) != std::string::npos
					&& (tempPos += findText.length())
					&& (tempPos2 = tempLine.find("]", tempPos)) != std::string::npos
					&& tempPos2 > tempPos) {

				// This would be a maximum step definition
				// This could be an integer M
				// Or this could be a range M::N or M..N
				tempString = tempLine.substr(tempPos, tempPos2 - tempPos);

				size_t sepBegin, sepEnd;

				if (((sepBegin = tempString.find("::")) != std::string::npos
						|| (sepBegin = tempString.find("..")) != std::string::npos)
					&& (sepEnd = sepBegin + 2)
					&& utils::from_string(tempQuery.minstep, tempString.substr(0, sepBegin))
					&& utils::from_string(tempQuery.maxstep, tempString.substr(sepEnd, std::string::npos))){
					// The query is good and contains a minstep and maxstep.
					foundQuery = true;
				} else if (utils::from_string(tempQuery.maxstep, tempString)) {
					// The query is good and contains only a maxstep.
					// The minstep is undefined.
					tempQuery.minstep = tempQuery.maxstep;
					foundQuery = true;
				} else {
					// The step information is malformed.
					// Warn them...
					utils::warning("[%s:%d]: The query hint '%s' has a malformed step maxstep parameter. Ignoring the maximum step information...", true, file.c_str(), currentLine, tempLine.c_str());
					tempQuery.minstep = Config::UNDEFINED;
					tempQuery.maxstep = Config::UNDEFINED;
					foundQuery = true;
				}
			} else {
				// No maxstep information to be found. This is ok.
				tempQuery.maxstep = Config::UNDEFINED;
				tempQuery.maxstep = Config::UNDEFINED;
				foundQuery = true;
			}

			if (foundQuery) {
				// The query was good. We can go ahead and register it.
				// Generate a name...
				nameBuilder.str("");
				nameBuilder << "Query '" << tempQuery.cmd << "'";

				//if (tempQuery.minstep != Config::UNDEFINED && tempQuery.maxstep != Config::UNDEFINED)
				//	nameBuilder << " (" << tempQuery.minstep << ".." << tempQuery.maxstep <<")";
				//else if (tempQuery.maxstep != Config::UNDEFINED)
				//	nameBuilder << " (" << tempQuery.maxstep <<")";

				tempQuery.name = nameBuilder.str();

				// Attempt to register it.
				utils::debug("Registering query '%s'...", true, tempQuery.name.c_str());
				if (!config.addQuery(tempQuery)) {
					utils::warning("[%s:%d]: Detected duplicate queries with label '%s'. Ignoring the most recent one found.", true, file.c_str(), currentLine, tempQuery.cmd.c_str());
				}
			}
		}
	}

	// Clean up and move on...
	fin.close();
}


// [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig, bool first)
{
	std::string line, value;
	Config::Query const* query;
	Interpreter::Action action;
	bool goodInput = false;
	std::pair<unsigned int, unsigned int> steps;


	if (first) {
		showQueries(config, std::cout);
		std::cout << std::endl;
		Interpreter::showHelp(std::cout);
	}

	while (!goodInput) {

		// Get user input
		goodInput = true;
		query = NULL;

		do {
			std::cout << "$- ";
			std::getline(std::cin,line);

			if (std::cin.eof()) {
				// gracefully handle ctrl-d
				return false;
			}


			// Interpret the command.
			action = Interpreter::interpret(line, value);
			switch (action) {
			case Interpreter::SHOW_QUERIES:
				showQueries(config, std::cout);
				break;
			case Interpreter::SHOW_CONFIG:
				showConfig(config, runconfig, std::cout);
				break;
			case Interpreter::SET_QUERY:

				// Scan through the queries and try to find the one they (hopefully) selected.
				for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries() && !query; it++) {
					if (it->second.cmd == value) {
						query = &(it->second);
					}
				}

				// make sure we got a query...
				if (!query) {
					goodInput = false;
					std::cout << "Invalid query selection.";
				}

				break;

			case Interpreter::SET_NUMSOLN:
				if (value == CONST_DEFAULT) runconfig.numSoln = Config::UNDEFINED;
				else goodInput = utils::from_string(runconfig.numSoln, value);
				break;

			case Interpreter::SET_MAXSTEP:
				if (value == CONST_DEFAULT) runconfig.maxstep = Config::UNDEFINED;
				else {
					steps = Config::parseMaxstep(value);
					if (steps.second == Config::UNDEFINED) goodInput = false;
					else {
						if (steps.first != Config::UNDEFINED) runconfig.minstep = steps.first;
						runconfig.maxstep = steps.second;
	
						if (runconfig.minstep == Config::UNDEFINED) {
							std::cout << "Autosetting minstep to 0." << std::endl;
							runconfig.minstep = 0;
						}
					}
				}

				break;

			case Interpreter::SET_MINSTEP:
				if (value == CONST_DEFAULT) runconfig.minstep = Config::UNDEFINED;
				else goodInput = utils::from_string(runconfig.minstep, value);
				break;
		
	
			case Interpreter::SHOW_HELP:
				Interpreter::showHelp(std::cout);
				break;

			case Interpreter::EXIT:
				// signal the exit.
				return false;
			default:
				// bad input
				goodInput = false;
				break;
			}

		} while ( goodInput && !query );

		if (!goodInput) {
			std::cout << "Error: Invalid choice.\n";
			std::cout << "Type 'help' to list the available commands.\n";
		}
	} while (!goodInput && !query);

	runconfig.query = query->cmd;
	return true;
}

// Displays the queries which have been found.
void showQueries(Config const& config, std::ostream& output) {

	output << "The following queries are available to run:" << std::endl << std::endl;


	for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries(); it++) {
		output << '\t' << std::setw(15) << std::right << it->second.cmd << ": " << std::setw(20) << std::left << it->second.name;

		if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)
				|| (!config.customConfigOpt(Config::OPT_MAXSTEP) && it->second.maxstep != Config::UNDEFINED) ) {
			output << " [ ";
	
			if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)) {
				output << it->second.minstep;
			} else {
				output << "0";
			}


			if (it->second.maxstep == Config::UNDEFINED)
				output << "...";
			else if ((it->second.minstep == Config::UNDEFINED && it->second.maxstep != 0)
					|| it->second.minstep != it->second.maxstep)
				output << ".." << it->second.maxstep;

			output << " ]";
		}
		output << std::endl;
	}

}

// Displays the current run-time configuration for the system.
void showConfig(Config const& config, Config::RunConfig const& runconfig, std::ostream& output) {
	unsigned int tmp, tmp2;

	// TODO: This REALLY needs to be cleaned up.

	output << "Current configuration:\n\n";

	// translation mode
	output << "\t\t" << std::setw(30) << std::left << "Translation Mode:";

	output << std::setw(20) << std::left;
	switch (config.mode()) {
	case Config::MODE_INCREMENTAL:
		output << "Incremental";
		break;

	case Config::MODE_REACTIVE:
		output << "Reactive";
		break;

	case Config::MODE_STATIC_AUTO:
		output << "Static (auto)";
		break;

	case Config::MODE_STATIC_MANUAL:
		output << "Static (manual)";
		break;
	}
 	output << std::endl;

	// number of solutions
	tmp2 = (config.intConfigOpt(Config::OPT_NUM_SOLN) != Config::UNDEFINED) ? config.intConfigOpt(Config::OPT_NUM_SOLN) : 1;
	tmp = (runconfig.numSoln != Config::UNDEFINED) ? runconfig.numSoln : tmp2;

	output << "\t\t" << std::setw(30) << std::left << "Number of solutions:";

	output << std::setw(20) << std::left;
	if (tmp) output << tmp;
	else output << "all";

	output << "[default: ";
 	if (tmp2) output << tmp2;
	else output << "all";
	output << " ]\n";

	// maximum soln step
	tmp2 = config.intConfigOpt(Config::OPT_MAXSTEP);
	tmp = (runconfig.maxstep != Config::UNDEFINED) ? runconfig.maxstep : tmp2;

	output << "\t\t" << std::setw(30) << std::left << "Maximum solution step:";
	
	output << std::setw(20) << std::left;
	if (tmp == Config::INF) output << CONST_MAXSTEP_INFINITE;
	else if (tmp != Config::UNDEFINED) output << tmp;
	else output << "query selected";
	
	output << "[default: ";
	if (tmp2 == Config::INF) output << CONST_MAXSTEP_INFINITE;
	else if (tmp2 != Config::UNDEFINED) output << tmp2;
	else output << "query selected";
	output << " ]\n";


	// minimum soln step	
	tmp2 = config.intConfigOpt(Config::OPT_MINSTEP);
	tmp = (runconfig.minstep != Config::UNDEFINED) ? runconfig.minstep : tmp2;
	
	output << "\t\t" << std::setw(30) << std::left << "Minimum solution step:";
	
	output << std::setw(20) << std::left;
	if (tmp != Config::UNDEFINED) output << tmp;
	else output << "query selected";
	
	output << "[default: ";
	if (tmp2 != Config::UNDEFINED) output << tmp2;
	else output << "query selected";
	output << " ]\n";
	 
}

// Asks the user to select a max step.
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defVal) {
	unsigned int ret = Config::UNDEFINED;
	std::string line;
	bool goodInput = false;

	while (!goodInput) {

		// Prompt user input
		std::cout << "Please select a (non-negative) value for the " << constant << ". You may input 'exit' to exit the program." << std::endl;
		std::cout << "Selected value";
		if (defVal != Config::UNDEFINED) std::cout << " [" << defVal << "]";
		std::cout << ": ";



		std::getline(std::cin,line);
		line = utils::trimWhitespace(line);

		// Make sure they don't want to exit.
		if (line == EXIT_CMD) {
			// crap, they do. returning UNDEFINED will indicate this.
			goodInput = true;
			ret = Config::UNDEFINED;
		}
		// Check if they want to go for a default value
		else if (defVal != Config::UNDEFINED && line == "") {
			ret = defVal;
			goodInput = true;
		}
		// Check if they have provided any other valid input...
		else if (utils::from_string(ret, line)) {
			goodInput = true;
		}

		if (!goodInput) {
			std::cout << "Error: Invalid selection." << std::endl;
		}

	}

	return ret;
}

int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig) {
	int ret = TC_STAT_TOOLSKIPPED;

	bio::file_descriptor_sink fsink, errsink;


	if (!config.run(tool)) {
		utils::debug("Skipping %s execution.", true, name.c_str());
	} else if (!config.cumulativeInputCount(tool)) {
		utils::pragma("No input files for the %s have been specified. Skipping it.", true, name.c_str());
	} else {
		// Run the translator...
//		std::string tmpCmd = config.compileCommandLine(tool, subconfig);
		std::list<std::string> arglist;
		config.compileArgs(tool, arglist, subconfig);
		utils::debug("Running the '%s' (program: '%s') with command: '%s'",true,name.c_str(), config.command(tool).c_str(), config.compileCommandLine(tool, subconfig).c_str());

		
		try {
			fsink = bio::file_descriptor_sink(config.output(tool), std::ios_base::trunc);
		} catch (std::ios_base::failure& e) {
			utils::debug("Caught exception '%s'.", true, e.what());
		}


	
		if (!fsink.is_open()) {
			if (config.customOut(tool))
				utils::error("Unable to open '%s' for writing.", true, 0, config.output(tool).c_str());
			else
				utils::error("Unable to open temporary file '%s' for writing.", true, 0, config.output(tool).c_str());
			return TC_STAT_IO_ERR;
		}


		try {
			errsink = bio::file_descriptor_sink(config.errFile(), std::ios_base::trunc);
		} catch (std::ios_base::failure& e) {
			utils::debug("Caught exception '%s'.", true, e.what());
		}

		if (!errsink.is_open()) {
			utils::error("Unable to open temporary file '%s' for writing.", true, 0, config.errFile().c_str());
			return TC_STAT_IO_ERR;
		}

		

		if (tool == Config::TC_REACTIVE_BRIDGE) {

			bp::child c = bp::execute(
				bp::initializers::run_exe(bp::search_path(config.command(tool))),
				bp::initializers::set_args(arglist)
			);

		} else {
	
			bp::child c = bp::execute(
				bp::initializers::run_exe(bp::search_path(config.command(tool))),
				bp::initializers::set_args(arglist),
				bp::initializers::bind_stdout(fsink),
				bp::initializers::bind_stderr(errsink)
//				bp::initializers::start_in_dir(boost::filesystem::current_path().string())
			);	
		
			if (config.mode() != Config::MODE_REACTIVE || tool != Config::TC_SOLVER) {
					try {
						int tmp = bp::wait_for_exit(c);
						ret = BOOST_PROCESS_EXITSTATUS(tmp);
					} catch (boost::system::system_error& e) {
						utils::debug("Caught exception '%s'.", true, e.what());
						ret = TC_STAT_EXEC_ERR;
					}
			} else ret = TC_STAT_BG;
		}

		// TODO: Do I need to close the sink?



		utils::debug("Command exited with status '%d'.", true, ret);

		if (!processErrors(config, tool, config.errFile())) {
			utils::warning("Could not read from the error stream file.", true);
		}

//		int stat = system(tmpCmd.c_str());
//		ret = WEXITSTATUS(stat);
	}

	return ret;
}

/**
 * @brief Processes the provided error file applying any error filters and printing the rest.
 * @param config The system configuration.
 * @param tool The tool that generated the error file.
 * @param file The error file.
 * @return True if the file exists and was successfully opened, false otherwise.
 */
bool processErrors(Config const& config, Config::Toolchain tool, std::string const& file) {
	std::ifstream in(file.c_str());
	std::string line;
	bool show, unificationError = false;

	if (in.fail()) {
		return false;
	}

	while (std::getline(in, line)) {
		show = true;

		switch (tool) {
		case Config::TC_TRANSLATOR:
			
			break;
		case Config::TC_PREPROC:

			break;
		case Config::TC_GROUNDER:

			break;
		case Config::TC_SOLVER:

			// Filter the usual warnings.
			if (line.find("never defined") != std::string::npos) {
				if (
					line.find("constant_sort/2") != std::string::npos
					|| line.find("rigid/1") != std::string::npos
					|| line.find("inertialFluent/1") != std::string::npos
					|| line.find("abFluent/1") != std::string::npos
					|| line.find("exogenousAction/1") != std::string::npos
					|| line.find("abAction/1") != std::string::npos
					|| line.find("attribute/1") != std::string::npos
					|| line.find("additiveAction/1") != std::string::npos
					|| line.find("staticAbnormality/1") != std::string::npos
					|| line.find("dynamicAbnormality/1") != std::string::npos
					|| line.find("action_attribute/2") != std::string::npos
					|| line.find("staticAbnormality/1") != std::string::npos
					|| line.find("noconcurrency/0") != std::string::npos
					|| line.find("strong_noconcurrency/0") != std::string::npos
					|| line.find("false/0") != std::string::npos
					|| line.find("computed/1") != std::string::npos
					)
					show = false;
			}
			else if (line.find("convert") != std::string::npos
					&& line.find("none") != std::string::npos) {
				unificationError = true;

			}

			break;
		case Config::TC_POSTPROC:

			break;
		case Config::TC_REACTIVE_BRIDGE:

			break;
		}

		if (show) std::cerr << line << std::endl;
	}

	if (unificationError) {
		utils::error("Detected an error that appears to be caused by a bug in Gringo 3.0.5 which prevents", true, 0);
		utils::error("  certain programs from being grounded properly. Adding '--none-alias[=VALUE]' to", true, 0);
		utils::error("  the command-line arguments may fix this problem.", true, 0); 
	}

	in.close();

	return true;
}

void cleanup(Config const& config, bool const* ran) {
	utils::debug("Deleting appropriate temporary files.", true);

	if (config.boolConfigOpt(Config::OPT_DISCARD_F2LP)) {
		// Discard F2LP intermediates...
		if (ran[Config::TC_PREPROC]) {
			bfs::remove(F2LP_INPUT_FILE);
			bfs::remove(F2LP_OUTPUT_FILE);
		}
	}

	bfs::remove(config.errFile());

	for (int i = 0; i < (int)Config::_TC_LENGTH_; i++) {
		if (!config.customOut((Config::Toolchain)i)) {
			utils::debug("Deleting '%s'.", true, config.output((Config::Toolchain)i).c_str());
			bfs::remove(config.output((Config::Toolchain)i));	
		}
	}
}

// Attempts to echo the specified file to the specified output stream.
bool echoFile(std::ostream& out, std::string const& filename) {
	std::ifstream file(filename.c_str());
	char buf[4096];

	if (file.fail()) {
		return false;
	}

	while (!file.eof()) {
		file.read(buf, 4096);
		out.write(buf, file.gcount());
	}

	return true;
}

// Attempts to echo the solver stats from the specified file.
bool echoStats(std::ostream& out, std::string const& filename) {
	std::string tmp;
	bool found = false;
	

	std::ifstream file(filename.c_str());

	if (file.fail()) {
		return false;
	}

	while (std::getline(file, tmp)) {
		if (!strncmp("Models", tmp.c_str(), strlen("Models"))) {
			found = true;
			break;
		}
	}

	if (!found) return false;
	do {
		out << tmp << std::endl;
	} while (std::getline(file, tmp));

	return true;
}

