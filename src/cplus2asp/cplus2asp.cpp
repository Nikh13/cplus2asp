/* Generated by re2c 0.13.5 on Thu Mar 17 22:10:45 2016 */
#line 1 "cplus2asp.r2c"
/* 
 * Copyright (c) 2010-2013 <Joseph Babb, Michael Cassollary, Joohyung Lee>
 *
 * For information on how to contact the authors, please visit
 *	http://reasoning.eas.asu.edu/cplus2asp
 *
 * This file is part of the cplus2asp system.
 *
 * cplus2asp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cplus2asp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/** @file cplus2asp.cpp
 *  @brief Calls a tool chain of a translator, pre-processor, answer set solver, and post-processor on a CCalc program translated to ASP syntax.
 *  @author v2.0+ Joseph Babb (v1.0 Michael Casolary)
 *  @date 07/2011
 */

/* History:
 * v3.0 - Integration with the cplus2asp.bin v3.0 for enhanced language support.
 * v2.3 - Fixed several small issues. Added Syntactic checking for BC. Added experimental language BC+ as a proper extension of BC allowing arbitrary formulas in the body and choice rules in the head.
 * v2.2 - Major revision of command-line arguments. Revised command line calls to provide system portability.
 * v2.1 - Restructured the interactive interface for more user friendly interactions.
 * v2.0 - Restructured options parser. Added incremental translation functionality. Added automated detection and handling of additive/abnormal constants.
 * v1.7 - Implemented "-from[PROG]" and "-to[PROG]" options to give better control over running a partial tool chain.
 * v1.6.2 - Fixed bugs, "-notrans" wasn't shutting off the translator, "-gropt" and "-grsoopt" were mixed up. Set up system to track when tool chain programs have errors.
 * v1.6.1 - Fixed bug where program might get wrong values back from system calls (depending on OS).
 * v1.6 - cplus2asp now supports integrated grounder-solvers (like clingo), using the option -grso / --grounder-solver. Added automatic searching though queries with ranged maxsteps, with an option to switch to manual mode (-mm). Removed support for using piped tool chain commands. Added automated "non-interactive" mode option (-auto).
 * v1.5.2 - Tweaked status outputs to be compatible with benchmarking scripts, adjusted output messages to make more sense.
 * v1.5.1 - Renamed to cplus2asp, also renamed translator & standard file dependencies.
 * v1.5 - Skips translating any files with .f2lp or .lp extensions, not just if all files have those extensions.
 * v1.4.1 - Made file name output more friendly, ensured all steps of the tool chain work together properly.
 * v1.4 - Added ccalc2asp.bin (translator) to tool chain, including options to control its usage, and an ability to interactively guess critical constant values based on hints given in comments in the input files.
 * v1.3.5 - Fixed bug with post-processor not receiving options correctly.
 * v1.3.4 - Now passes input file to solver via standard in redirection.
 * v1.3.3 - Added option to use pipes instead of intermediate files to send data between tool chain programs (i.e., pre-v1.3 behavior).
 * v1.3.2 - Sends input files to the first tool in the tool chain that isn't disabled.
 * v1.3.1 - Fixed bug with spaces in path causing odd behavior and errors from tool chain.
 * v1.3 - Changed default post-processor to as2transition, changed default standard files to ccalc2asp_std.f2lp & ccalc2asp_additive.f2lp, changed argument handler to allow generic "const=value" arguments without needing "-c" before them, added intermediate file usage and auto-deletion, added options to pass command-line options directly to any of the tool chain programs.
 * v1.2 - Added option to un-include the standard translation files from the call to the pre-processor.
 * v1.1 - Added options to turn off programs in the tool chain.
 * v1.0 - First working version.
 */


#include <fstream>
#include <iostream>
#include <sstream>
#include <string>
#include <iterator>
#include <algorithm>
#include <utility>
#include <vector>
#include <list>
//#include <climits> // for PATH_MAX, INT_MIN
#include <cstring>
//#include <string.h>
//#include <cstdlib>
#include <iomanip>
#include <exception>

// Next 3 includes are for getting the home directory in linux
#include <unistd.h>
#include <sys/types.h>
#include <pwd.h>

//Next 3 includes are for reading config files using Boost
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/ini_parser.hpp>
#include <boost/algorithm/string.hpp>


#ifndef BOOST_FILESYSTEM_VERSION
#define BOOST_FILESYSTEM_VERSION 3
#endif
#define BOOST_NO_CXX11_SCOPED_ENUMS
#include <boost/filesystem.hpp>
#undef BOOST_NO_CXX11_SCOPED_ENUMS
#include <boost/iostreams/device/file_descriptor.hpp>
#include "boost/process.hpp"
#include <boost/foreach.hpp>
#include <boost/lexical_cast.hpp>

#include "babb/utils/memory.h"
#include "bcplus/symbols/SymbolTable.h"
#include "bcplus/symbols/Symbol.h"
#include "bcplus/symbols/QuerySymbol.h"
#include "bcplus/symbols/ConstantSymbol.h"


#include "Config.h"
#include "utils.h"
#include "Interpreter.h"

namespace bp = boost::process;
namespace bfs = boost::filesystem;
namespace bio = boost::iostreams;

namespace u = babb::utils;
namespace bcp = bcplus;
namespace sy = bcplus::symbols;

#define VERSION_MAJOR 3
#define VERSION_MINOR 0
#define VERSION_REV 0

#ifndef PATH_MAX
  #define PATH_MAX 4096
#endif



/// An enum of the various command line options available.
enum Option {
	OPT_AUTO,
	OPT_BRIDGE,
	OPT_BRIDGE_OPTS,
	OPT_BRIDGE_OUT,
	OPT_CONST,
	OPT_FRM_BRIDGE,
	// OPT_FRM_GRD,
	OPT_FRM_PRE,
	OPT_FRM_POST,
	OPT_FROM_SO,
	OPT_FROM_TRAN,
	OPT_GRD,
	OPT_GRD_OPTS,
	OPT_GRD_OUT,
	OPT_GRINGO_NONE_HACK,
	OPT_JUST_GRD,
	OPT_JUST_PRE,
	OPT_JUST_POST,
	OPT_JUST_SO,
	OPT_JUST_TRANS,
	OPT_LANG,
	OPT_MAXSTEP,
	OPT_MINSTEP,
	OPT_MODE_SELECT,
	OPT_MODE_STATIC_AUTO,
	OPT_MODE_STATIC_MANUAL,
	OPT_MODE_INCREMENTAL,
	OPT_MODE_REACTIVE,
	OPT_NO_DEL,
	OPT_NO_DOMAIN_ENFORCE,
	OPT_NO_ADD_DOMAIN_ENFORCE,
	OPT_PORT_INTERNAL,
	OPT_PORT_EXTERNAL,
	OPT_POSTPROC,
	OPT_POSTPROC_OPTS,
	OPT_POSTPROC_OUT,
	OPT_PREPROC,
	OPT_PREPROC_OPTS,
	OPT_PREPROC_OUT,
	OPT_SHIFT,
	OPT_SO,
	OPT_SO_OPTS,
	OPT_SO_OUT,
	OPT_STATS,
	OPT_SYMTAB,
	OPT_TO_BRIDGE,
	OPT_TO_GRD,
	OPT_TO_PRE,
	OPT_TO_POST,
	OPT_TO_SO,
	OPT_TO_TRANS,
	OPT_TRANS,
	OPT_TRANS_OPTS,
	OPT_TRANS_OUT,
	OPT_VERSION,
	OPT_HELP,
	OPT_QUERY,
	OPT_UNSUPPORTED,
	OPT_UNSUPPORTED_NO_STD,
	OPT_UNSUPPORTED_ADDITIVE,
	OPT_UNSUPPORTED_GRSO,
	OPT_UNSUPPORTED_MANUAL_MAXSTEP,
	OPT_UNKNOWN
};

/// Return codes from known tool chain programs indicating their final status.
enum StatusFlags
{
	TC_STAT_OK = 0,												///< Universal OK.
	TC_STAT_BG = 130,											///< Exit code indicating that the task is running in the background.
	TC_STAT_IO_ERR = -8274,										///< Psuedo exit code indicating that we couldn't open the output file.
	TC_STAT_EXEC_ERR = -8273,									///, Psuedo exit code indicating that the tool failed to execute.
	TC_STAT_TOOLSKIPPED = INT_MIN,								///< Psuedo return code indicating that the tool execution was skipped for some reason.
	TC_STAT_SO_CLINGO_FOUND_SOLUTIONS = 10,						///< return code indicating that clingo (or other similar programs) found solutions.
	TC_STAT_SO_CLINGO_NO_SOLUTIONS = 20,						///< return code indicating that clingo (or other similar programs) failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS = 100,			///< return code indicating that as2transition failed to find solutions.
	TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS = 101		///< return code indicating that as2transition found solutions.
};

/// Status flags that can be returned by the options parser.
enum OptionStatus
{
	OPT_STAT_OK,			///< Everything is ok, continue execution.
	OPT_STAT_BAD_ARG,		///< One or more bad arguments was found. Stop execution.
	OPT_STAT_HELP,			///< The user requested the help message be displayed.
	OPT_STAT_VERSION		///< The user requested the version message be displayed.
};

/// Mode selection constants (for argument parsing)
#define ARG_MODE_STATIC_MANUAL  "static-manual"
#define ARG_MODE_STATIC_AUTO 	"static-auto"
#define ARG_MODE_INCREMENTAL	"incremental"
#define ARG_MODE_REACTIVE		"reactive"

/// Flags used to efficiently indicate that we're missing a constant.
#define CONST_MAXSTEP_MASK 		0x80
#define CONST_QUERY_MASK 		0x40
#define CONST_MAXADDITIVE_MASK  0x20
#define CONST_MINSTEP_MASK		0x10
#define CONST_EXT_PORT_MASK		0x08

/// The command used to exit the program during interactive prompts.
#define EXIT_CMD				"exit"

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @param val A value for the option, where applicable (NULL otherwise).
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt, char const*& val);

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out);

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to write the dialog to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out);

/**
 * Parses the provided command line arguments and sets the configurations appropriately.
 * @param argc The number of command line arguments provided to the program.
 * @param argv The command line arguments provided to the program.
 * @param[out] outConf The configurations object to write to.
 * @return A status flag indicating the results of the parsing.
 */
OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf);

 /**
  * [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
  * @param config The program's configuration options.
  * @param runconfig The run's configurations that will be updated.
  * @param first Whether this is the first run or not.
  * @param[out] runconfig The run's configurations that will be updated.
  * @return True if the program should continue execution, false otherwise.
  */


bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig, bool first = false);

OptionStatus parseConfigOptions(Config& outConf);

/**
 * Displays the queries which have been found.
 * @param config The program's configuration.
 * @param[out] output The output stream to write to.
 */
void showQueries(Config const& config, std::ostream& output);

/**
 * Displays the current run-time configuration for the system.
 * @param config the master configuration.
 * @param runconfig The overridin run configuration.
 * @param output The stream to output to.
 */
void showConfig(Config const& config, Config::RunConfig const& runconfig, std::ostream& output);

/**
 * [interactive] Queries the user to select a value for the specified constant.
 * @param config The program's configuration options.
 * @param constant The constant's name to ask for.
 * @param defval The default value of the constant (Config::UNDEFINED for no default).
 * @return The selected value or Config::UNDEFINED to indicate the user wishes to exit the program.
 */
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defval = Config::UNDEFINED);


/**
 * Runs the specified tool in the toolchain IF it is not disabled in the toolchain configuration.
 * @param config The configuration for the program.
 * @param tool The tool to run.
 * @param name The human readable name of the tool (for output purposes).
 * @param subconfig The sub configuration settings which will override the configuration settings.
 * @return The status code from running the program (TC_STAT_TOOLSKIPPED indicates that it did not run).
 */
int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig = NULL);


/**
 * @brief Processes the provided error file applying any error filters and printing the rest.
 * @param config The system configuration.
 * @param tool The tool that generated the error file.
 * @param file The error file.
 * @return True if the file exists and was successfully opened, false otherwise.
 */
bool processErrors(Config const& config, Config::Toolchain tool, std::string const& file);


/**
 * Cleans up the intermediate files generated during program execution.
 * @param config The program's configuration.
 * @param ran An array of booleans of length Config::_TC_LENGTH_ detailing which components have ran.
 */
#ifdef DEBUG
void cleanup(Config config, bool const* ran, bfs::path path);
#else
void cleanup(Config const& config, bool const* ran);
#endif


/**
 * Attempts to echo the specified file to the specified output stream.
 * @param out The output stream to print to.
 * @param filename The file to open.
 * @return True if the file exists, false otherwise.
 */
bool echoFile(std::ostream& out, std::string const& filename);

/**
 * Attempts to echo the solver stats from the specified file.
 * @param out The output stream to print to.
 * @param filename The file to read from.
 * @return True if the file exists and contains stats data that was printed, false otherwise.
 */
bool echoStats(std::ostream& out, std::string const& filename);

int main(int argc, char** argv)
{

	std::string strEXEName = argv[0]; 						// Name of this executable.
	std::string tmpCmd;				 						// temporary command string.

	std::vector<std::string> vecConstants; 						// List of constants to pass to the grounder.
	int intSystemResult = 0; 							// Holds what comes back from system().
	

	Config config(argv[0]);								// The almighty system configuration.

	bool ran[Config::_TC_LENGTH_];						// Variable used to track which toolchain components we have ran so far.
	memset(ran, 0, Config::_TC_LENGTH_);


	bool blnFoundSolutions = false; 					// Set to true if the solver or post-processor indicates solutions were found.


	#ifdef DEBUG
	bfs::path selfpath = argv[0];
	#endif
	/***************************************************************************************************/
	/* Command Line Parsing */
	/***************************************************************************************************/
	
	// Process command-line arguments.
	utils::debug("Parsing Options...", true);

	//Read config options from config file and give it lower precedence by executing it first
	OptionStatus optConf = parseConfigOptions(config);
	// Read config options from command line
	OptionStatus optCmd = parseCommandOptions(argc, argv, config);

	if(optCmd != OPT_STAT_OK || optConf != OPT_STAT_OK){

		//Switch on config options from command line because errors in config file would most likely be thrown in parseConfigOptions
		switch (optCmd) {
		case OPT_STAT_OK:
			// We're good to go!
			break;
		case OPT_STAT_BAD_ARG:
			utils::error("A problem occurred parsing program arguments. Exiting.", true, 0);
			showHelp(strEXEName, std::cout);
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::nice_exit(utils::EXT_CODE_BAD_ARGS,NULL);
			break;
		case OPT_STAT_HELP:
			showHelp(strEXEName, std::cout);
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::nice_exit(utils::EXT_CODE_GOOD,NULL);
			break;
		case OPT_STAT_VERSION:
			showVersion(strEXEName, std::cout);
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::nice_exit(utils::EXT_CODE_GOOD,NULL);
			break;
		default:
			break;
		}
	}
	
	/***************************************************************************************************/
	/* Command Sanity Checks */
	/***************************************************************************************************/

	// Sanity checks...
	// Make sure that we aren't in manual mode with suppressed user interaction...
	if (config.mode() == Config::MODE_STATIC_MANUAL && config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {
		utils::warning("Unable to manually advance the time step in with the '--auto' flag asserted. Switching to '%s' mode.", true, ARG_MODE_STATIC_AUTO);
		config.mode(Config::MODE_STATIC_AUTO);
	}

	// Ensure we are doing _something_
	bool doingSomething = false;
	for (Config::Toolchain tool = Config::_TC_BEGIN_; tool < Config::_TC_END_ && !doingSomething; tool = (Config::Toolchain)(((int) tool) + 1)) {
		if (config.run(tool) && config.command(tool) != "")
			doingSomething = true;
	}
	if (!doingSomething) {
		// Everything is disabled.
		utils::pragma("The toolchain is empty. Exiting.", true, utils::EXT_CODE_GOOD);
	}

	utils::debug("The command line options are sane.", true);
	/***************************************************************************************************/
	/* Translator */
	/***************************************************************************************************/

	
	// Run the translator if it's called for.
	utils::debug("Beginning translator subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_TRANSLATOR, "translator")) != TC_STAT_TOOLSKIPPED) {

		// It Ran!
		ran[Config::TC_TRANSLATOR] = true;

		if (!config.run(Config::TC_PREPROC)) {
			if (!echoFile(std::cout, config.output(Config::TC_TRANSLATOR))) {
				utils::error("Unable to read from the translator output file '%s'", true, -1, config.output(Config::TC_TRANSLATOR).c_str());
			}
		}


		// check the status and make sure all is well...

		if(intSystemResult != TC_STAT_OK)
		{
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::error("An error occurred while executing the translator.",true, utils::EXT_CODE_TOOLCHAIN_TRANS_ERR);
		}


	}

	/**********************************************************************************************************************/
	/* Pre-processor */
	/**********************************************************************************************************************/
	utils::debug("Entering pre-processor subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_PREPROC, "pre-processor")) != TC_STAT_TOOLSKIPPED)  {
		// It Ran!
		ran[Config::TC_PREPROC] = true;

		if (!config.run(Config::TC_SOLVER)) {
			if (!echoFile(std::cout, config.output(Config::TC_PREPROC))) {
				utils::error("Unable to read from the pre-processor output file '%s'", true, -1, config.output(Config::TC_PREPROC).c_str());
			}
		}
		
		// check the status and make sure all is well...
		if(intSystemResult != TC_STAT_OK)
		{
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::error("An error occurred while executing the pre-processor.",true, utils::EXT_CODE_TOOLCHAIN_PREPROC_ERR);
		}

	}

	utils::debug("Entering clingo3to4 translator subroutine.", true);
	if ((intSystemResult = runTool(config, Config::TC_C4_PREPROC, "c4-pre-processor")) != TC_STAT_TOOLSKIPPED)  {
		// It Ran!
		ran[Config::TC_C4_PREPROC] = true;

		if (!config.run(Config::TC_SOLVER)) {
			if (!echoFile(std::cout, config.output(Config::TC_PREPROC))) {
				utils::error("Unable to read from the c4 pre-processor output file '%s'", true, -1, config.output(Config::TC_PREPROC).c_str());
			}
		}
		
		// check the status and make sure all is well...
		if(intSystemResult != TC_STAT_OK)
		{
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::error("An error occurred while executing the c4 pre-processor.",true, utils::EXT_CODE_TOOLCHAIN_PREPROC_ERR);
		}

	}

	/**********************************************************************************************************************/
	/* Intermediate Processing & Final Configuration */
	/**********************************************************************************************************************/

	utils::debug("Translation done. Performing intermediate processing and final configuration.", true);



	// Load the input symbol table
	u::ref_ptr<bcp::Configuration> bcpconf = new bcp::Configuration(NULL, NULL);
	bcpconf->symtabInput(new ReferencedPath(config.strOpt(Config::STR_SYMTAB_FILE)));
	u::ref_ptr<sy::SymbolTable> symtab = new sy::SymbolTable(bcpconf);

	// Load queries from the symbol table...
	for(sy::SymbolTable::const_iterator it = symtab->begin(sy::Symbol::Type::QUERY);it != symtab->end(sy::Symbol::Type::QUERY); it++) {
	
		sy::QuerySymbol const* q = (sy::QuerySymbol const*)(it->get());

		if (!config.addQuery(*q->base(), *q->base(), q->maxmax(), q->minmax())) {
			utils::error("Could not add query \"%s\" as it appears to be a duplicate.",true,0,q->base()->c_str());
		}

	}


	// Load constants from the symbol table...

	if (config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED) {
		// check maxAdditive, then check maxAFValue
		u::ref_ptr<const ReferencedString> v = symtab->getData("maxAdditive");
		if (!v) v = symtab->getData("maxAFValue");
		if (v) {
			config.intConfigOpt(Config::OPT_MAXADDITIVE, boost::lexical_cast<unsigned int>(*v));
		}
	}
		

	// Check for abnormalities...
	if (symtab->cmask() & sy::ConstantSymbol::Type::M_EXTERNAL) {
		// The abnormality mask is set, meaning that there is at least one abnormality...

		if (!config.customMode()) {
			// They haven't specified a mode. Default to REACTIVE.
			utils::pragma("One or more external constants have been detected. Defaulting to the '%s' mode.", true, ARG_MODE_REACTIVE);
			config.mode(Config::MODE_REACTIVE);
		} else {
			utils::warning("One or more external constants have been detected while operating in a non-reactive mode.", true);
		}
	}


	// Ask the user about other constants...


	// If any of the "critical" constants aren't defined and one of the
	// "active" tool chain programs is going to need the constants, try
	// finding "hint" comments in the input that we can use to fill in details.
	if (config.run(Config::TC_SOLVER)) {

		// If all else fails, ask the user (unless we're not allowed to).
		unsigned int tmpVal = Config::UNDEFINED;
		if (config.intConfigOpt(Config::OPT_MAXADDITIVE) == Config::UNDEFINED
				&& (symtab->cmask() & sy::ConstantSymbol::Type::M_ADDITIVE)) {

			if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				if ((tmpVal = queryUserForConstant(config, "maxAdditive")) != Config::UNDEFINED) {
					// They gave us a maxAdditive value.
					config.intConfigOpt(Config::OPT_MAXADDITIVE, tmpVal);
				} else {
					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					#ifdef DEBUG
					cleanup(config, ran, selfpath);
					#else
					cleanup(config, ran);
					#endif
					utils::nice_exit(0, "Exiting.");
				}
			} else {
				// we can't ask the user
				utils::error("The maxAdditive constant was never defined and is required for program's containing additive constants. Exiting.", true, 0);
				#ifdef DEBUG
				cleanup(config, ran, selfpath);
				#else
				cleanup(config, ran);
				#endif
				utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}
		}

		if (config.run(Config::TC_SOLVER)) {
/*
			if (config.intConfigOpt(Config::OPT_EXT_PORT) == Config::UNDEFINED
					&& config.mode() == Config::MODE_REACTIVE) {

				if (!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

					if ((tmpVal = queryUserForConstant(config, "external port")) != Config::UNDEFINED) {
						// They gave us a maxAdditive value.
						config.intConfigOpt(Config::OPT_EXT_PORT, tmpVal);
					} else {
						// They elected to exit instead of answer a simple question.
						// Life moves on but we do not.
						cleanup(config, ran);
						utils::nice_exit(0, "Exiting.");
					}
				} else {
					// We can't ask the user.
					 utils::error("The port to listen on for client connections is undefined and is required for the given running mode. Exiting.", true, 0);
					 cleanup(config, ran);
					 utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
				}
			}
*/
		}

	}


	/************************************************************************************************/
	/* Outer Interactive Loop */
	/************************************************************************************************/

	Config::RunConfig runConfig;
	runConfig.numSoln = config.intConfigOpt(Config::OPT_NUM_SOLN);
	bool first = true;	
	do {
		unsigned int maxmaxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		Config::Query const* activeQuery = NULL;

		runConfig.maxstep = config.intConfigOpt(Config::OPT_MAXSTEP);
		runConfig.minstep = config.intConfigOpt(Config::OPT_MINSTEP);

		runConfig.query = config.strOpt(Config::STR_QUERY);

		

		/********************************************************************************************/
		/*  Run configurations */
		/********************************************************************************************/

		// Query
		if (config.run(Config::TC_SOLVER)
				&& (config.strOpt(Config::STR_QUERY) == ""
						|| config.intConfigOpt(Config::OPT_MINSTEP) == Config::UNDEFINED
						|| config.intConfigOpt(Config::OPT_MAXSTEP) == Config::UNDEFINED)){


			// Query...
			if (runConfig.query == "" && !config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)) {

				// The query hasn't been specified, try prompting them for it
				if (!queryUserForQuery(config, runConfig, first)) {

					// They elected to exit instead of answer a simple question.
					// Life moves on but we do not.
					#ifdef DEBUG
					cleanup(config, ran, selfpath);
					#else
					cleanup(config, ran);
					#endif
					utils::nice_exit(0, "Exiting.");
				}

			} else if (runConfig.query == "") {
				// Not specified and we can't prompt the for it.
				utils::error("The query to execute was never specified. Exiting.", true, 0);
				#ifdef DEBUG
				cleanup(config, ran, selfpath);
				#else
				cleanup(config, ran);
				#endif
				utils::nice_exit(utils::EXT_CODE_UNDEFINED_CONSTANTS, NULL);
			}

			if ((activeQuery = config.query(runConfig.query)) == NULL) {
				utils::error("The specified query was not found.", true, 0);
				#ifdef DEBUG
				cleanup(config, ran, selfpath);
				#else
				cleanup(config, ran);
				#endif
				utils::nice_exit(utils::EXT_CODE_INVALID_QUERY, NULL);
			}

			// Maxstep...
			// This can be solved if we have a query and it has a maxstep...
			if (runConfig.maxstep != Config::UNDEFINED) {
				maxmaxstep = runConfig.maxstep;
			} else if (activeQuery && activeQuery->maxstep != Config::UNDEFINED) {
				maxmaxstep = activeQuery->maxstep;
			} 

			// Minstep...
			// This can be solved if we have a query and it has a minstep...
			if (runConfig.minstep == Config::UNDEFINED) {

				if ( activeQuery && activeQuery->minstep != Config::UNDEFINED)
					runConfig.minstep = activeQuery->minstep;
				else
					runConfig.minstep = 0; // default to 0.
					// runConfig.minstep = 1; //default to 1. In clingo4 minstep=0 is UNKNOWN unlike in clingo3 
			}
			

		} else {
			// Look for the active query anyways.
			// Chances are we didn't end up parsing the files so we probably haven't seen it.
			activeQuery = config.query(runConfig.query);
		}

		/**********************************************************************************************************************/
		/* Interactive Loop */
		/**********************************************************************************************************************/


		/*********************************************************************************************/
		/* Initial Maxstep */
		/*********************************************************************************************/

		runConfig.maxstep = (config.mode() == Config::MODE_STATIC_AUTO || config.mode() == Config::MODE_STATIC_MANUAL)
				? runConfig.minstep
				: maxmaxstep;
		

		// Final sanity check on the min and max steps...
		if (runConfig.maxstep != Config::UNDEFINED && runConfig.minstep > runConfig.maxstep) {
			utils::error("The maxstep value must be at least that of the minstep.", true, 0);
			#ifdef DEBUG
			cleanup(config, ran, selfpath);
			#else
			cleanup(config, ran);
			#endif
			utils::nice_exit(utils::EXT_CODE_INVALID_STEP_VALUE, NULL);
		}

		// run the rest of the tool chain at least once, but we may have to run it multiple times in one of the STATIC modes...
		utils::debug("Entering primary interactive loop.", true);
		do
		{

			/*********************************************************************************************/
			/* Grounder */
			/*********************************************************************************************/
			// utils::debug("Entering grounder subroutine.", true);
			// if ((intSystemResult = runTool(config, Config::TC_GROUNDER, "grounder", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
			// 	// It Ran!
			// 	ran[Config::TC_GROUNDER] = true;
			// 	if (!config.run(Config::TC_SOLVER)) {
			// 		if (!echoFile(std::cout, config.output(Config::TC_GROUNDER))) {
			// 			utils::error("Unable to read from the grounder output file '%s'", true, -1, config.output(Config::TC_GROUNDER).c_str());
			// 		}
			// 	}

			// 	// check the status and make sure all is well...
			// 	if(intSystemResult != TC_STAT_OK)
			// 	{
			// 		cleanup(config, ran);
			// 		utils::error("An error occurred while executing the grounder.",true, utils::EXT_CODE_TOOLCHAIN_GROUNDER_ERR);
			// 	}

			// }

			/*********************************************************************************************/
			/* Header Logic */
			/*********************************************************************************************/

			// Print the solution header!
			if (config.run(Config::TC_SOLVER))
			{
				if (activeQuery)utils::pragma("Running Query '%s'.", true, activeQuery->name.c_str());
				else utils::pragma("Running Query '%s'.", true, runConfig.query.c_str());

				switch (config.mode()) {
				case Config::MODE_STATIC_AUTO:
				case Config::MODE_STATIC_MANUAL:
					if (runConfig.maxstep != Config::UNDEFINED)
						utils::pragma("Maximum Step = '%d'.", true, runConfig.maxstep);
					else
						utils::pragma("No Maximum Step.", true);
					break;

				case Config::MODE_INCREMENTAL:
				case Config::MODE_REACTIVE:
					// We can guarantee that at this point the minimum step is defined.
					if (runConfig.maxstep != Config::UNDEFINED)
						utils::pragma("Minimum Step = '%d', Maximum Step = '%d'.", true, runConfig.minstep, runConfig.maxstep);
					else
						utils::pragma("Minimum Step = '%d', No Maximum Step.", true, runConfig.minstep);
					break;

				default:
					break;
				}

				if (runConfig.numSoln == 0)
					utils::pragma("Searching for all solutions.", true);
				else
					utils::pragma("Searching for %d solutions.", true, runConfig.numSoln );
			}

			/*********************************************************************************************/
			/* Solver */
			/*********************************************************************************************/
			utils::debug("Entering solver subroutine.", true);
			if ((intSystemResult = runTool(config, Config::TC_SOLVER, "solver", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
				// It Ran!
				ran[Config::TC_SOLVER] = true;
				bool ok = true;

				if (!config.run(Config::TC_POSTPROC) && config.mode() != Config::MODE_REACTIVE) {
					if (!echoFile(std::cout, config.output(Config::TC_SOLVER))) {
						utils::error("Unable to read from the solver output file '%s'", true, -1, config.output(Config::TC_SOLVER).c_str());
					}
				}
				
				// check the status and make sure all is well...
				if (intSystemResult == TC_STAT_SO_CLINGO_FOUND_SOLUTIONS) {
					// Looks like we have solutions... YAY!
					blnFoundSolutions = true;
				} else if (intSystemResult == TC_STAT_SO_CLINGO_NO_SOLUTIONS) {
					utils::pragma("No solutions found.", true);
				} else if (intSystemResult == TC_STAT_BG) {
					// The solver was launched in the background.
				} else if(intSystemResult != TC_STAT_OK) {
					ok = false;
				}


				if (!ok) {
					// something went wrong
					#ifdef DEBUG
					cleanup(config, ran, selfpath);
					#else
					cleanup(config, ran);
					#endif
					utils::error("An error occurred while executing the solver.",true, utils::EXT_CODE_TOOLCHAIN_SOLVER_ERR);
				}

			}

			/*********************************************************************************************/
			/* Post-processor */
			/*********************************************************************************************/
			// The post-processor is only run outside of reactive mode
			utils::debug("Entering post-processor subroutine.", true);
			if (config.mode() != Config::MODE_REACTIVE) {
				if ((intSystemResult = runTool(config, Config::TC_POSTPROC, "post-processor", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					if (!echoFile(std::cout, config.output(Config::TC_POSTPROC))) {
						utils::error("Unable to read from the post-processor output file '%s'", true, -1, config.output(Config::TC_POSTPROC).c_str());
					}
					// It Ran!
					ran[Config::TC_POSTPROC] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_FOUND_SOLUTIONS) {
						// Looks like we have solutions... YAY!
						blnFoundSolutions = true;
					} else if (intSystemResult == TC_STAT_POSTPROC_AS2TRANSITION_NO_SOLUTIONS) {

					} else if(intSystemResult != TC_STAT_OK) {
						#ifdef DEBUG
						cleanup(config, ran, selfpath);
						#else
						cleanup(config, ran);
						#endif
						utils::error("An error occurred while executing the post-processor.",true, utils::EXT_CODE_TOOLCHAIN_POSTPROC_ERR);
					}
				}
			}

			/*********************************************************************************************/
			/* Reactive Bridge */
			/*********************************************************************************************/

			// The reactive bridge is run inside of reactive mode.
			// NOTE: If we really are in reactive mode then they solver is still running the background!
			utils::debug("Entering reactive bridge subroutine.", true);

			if (config.mode() == Config::MODE_REACTIVE) { 
#ifdef NO_REACTIVE_BRIDGE
			utils::warning("The reactive bridge has not yet been completed. Due to this, the system will run as if the reactive bridge has been disabled and you will need to connect to oClingo directly.", true);
			utils::warning("Please connect your external agent to oClingo, which is listening on port '%d'.", true, config.intConfigOpt(Config::OPT_EXT_PORT));

#else
				if ((intSystemResult = runTool(config, Config::TC_REACTIVE_BRIDGE, "reactive bridge", &runConfig)) != TC_STAT_TOOLSKIPPED)  {
					// It Ran!
					ran[Config::TC_REACTIVE_BRIDGE] = true;

					// check the status and make sure all is well...
					if (intSystemResult == TC_STAT_BG) {
						// The reactive bridge was launched in the background.
					} else if(intSystemResult != TC_STAT_OK) {
						#ifdef DEBUG
						cleanup(config, ran, selfpath);
						#else
						cleanup(config, ran);
						#endif
						utils::error("An error occurred while executing the reactive bridge.",true, utils::EXT_CODE_TOOLCHAIN_REACTIVE_BRIDGE_ERR);
					}
				}
#endif 
			}

			/*********************************************************************************************/
			/* Maxstep Increment */
			/*********************************************************************************************/

			if (config.mode() == Config::MODE_STATIC_MANUAL) {
				runConfig.maxstep = queryUserForConstant(config, "maximum step", runConfig.maxstep+1);
			} else if (config.mode() == Config::MODE_STATIC_AUTO) {
				runConfig.maxstep++;
			}

		} while(
				// The loop should continue as long as we are:
				// * Running in static-manual mode and the user hasn't told us to stop, or
				// * Running in static-auto mode, we haven't reached the maximum step , and we haven't found solutions.
				// AND
				// * We have something to do
				((config.mode() == Config::MODE_STATIC_MANUAL && runConfig.maxstep != Config::UNDEFINED)
				|| (config.mode() == Config::MODE_STATIC_AUTO
						&& runConfig.maxstep != Config::UNDEFINED
						&& (maxmaxstep == Config::UNDEFINED || runConfig.maxstep <= maxmaxstep)
						&& !blnFoundSolutions))
				&& (
					// config.run(Config::TC_GROUNDER) ||
					config.run(Config::TC_SOLVER) 
					|| config.run(Config::TC_POSTPROC)
					|| (config.mode() == Config::MODE_REACTIVE && config.run(Config::TC_REACTIVE_BRIDGE))
				)
				);


		first = false;

	} while
			// The outer loop should run as long as:
			// * We're not suppressing user interaction,
			// * We are running what looks like a grounder/solver,
			// * The user has not selected a query on the command line, and
			// * The user has not selected to exit the outer loop.
			(!config.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION)
			&& config.run(Config::TC_SOLVER)
			&& config.strOpt(Config::STR_QUERY) =="");

	utils::debug("Exiting interactive loop.", true);
	/**********************************************************************************************************************/
	/* Final Cleanup */
	/**********************************************************************************************************************/
	#ifdef DEBUG
	cleanup(config, ran, argv[0]);
	#else
	cleanup(config, ran);
	#endif
	return 0;
}

OptionStatus parseCommandOptions(int argc, char const* const* argv, Config& outConf) {
	// Process command-line arguments.

	char const* tmpptr;
	size_t tmpoffset;
	char tmpPath[PATH_MAX];
	std::list<char const*> rawInputList;
	std::pair<unsigned int, unsigned int> steps;
	unsigned int tmpInt;
	Config::Mode mode;
	bool tmpBool;



	for(int i = 1; i < argc; i++)
	{
		utils::debug("Parsing option '%s'.", true, argv[i]);
		switch (parseOption(argv[i], tmpptr)) {

		case OPT_AUTO:
			// This is supposed to be an automated run, don't ask the user for anything.
			if (outConf.boolConfigOpt(Config::OPT_SUPPRESS_INTERACTION, true)) {
				utils::warning("Detected redefinition of option '%s'. Continuing with value '%s'",true,argv[i],"true");
			}
			break;

		case OPT_BRIDGE:
			// They are specifying a specific command for the bridge.

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_REACTIVE_BRIDGE, tmpptr)) {
				utils::warning("Detected redefinition of bridge command. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_BRIDGE_OPTS:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected pass-through options following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.opts(Config::TC_REACTIVE_BRIDGE, tmpptr)) {
				utils::warning("Detected redefinition of bridge command options. Continuing with value '%s'",true,tmpptr);
			}
			break;
		case OPT_BRIDGE_OUT:

			utils::error("Redirecting the reactive bridge's output is currently unsupported.", true, 0);
			return OPT_STAT_BAD_ARG;

		case OPT_CONST:
			// Constant Declaration...
			if(++i < argc && (tmpptr = strchr(argv[i],'=')) != NULL)
			{
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				utils::debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					utils::warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}

			} else {   // Set up for a constant without actually giving one, bad command line.
				utils::error("Expected a constant definition of the form 'constant=value' after option '%s'. Exiting.",true,0,argv[i-1]);
				return OPT_STAT_BAD_ARG;
			}
			break;

		case OPT_FRM_BRIDGE:
			utils::pragma("Running the toolchain from the reactive bridge is discouraged.",true);
			if (outConf.setRunFrom(Config::TC_REACTIVE_BRIDGE)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		// case OPT_FRM_GRD:
		// 	// Don't run anything before the grounder.
		// 	if (outConf.setRunFrom(Config::TC_GROUNDER)) {
		// 		utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
		// 	}
		// 	break;

		case OPT_FRM_PRE:
			// Don't run anything before the pre-processor.
			if (outConf.setRunFrom(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FRM_POST:
			// Don't call anything before the post-processor (equivalent to "-justpost")
			if (outConf.setRunFrom(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_SO:
			// Don't run anything before the solver.
			if (outConf.setRunFrom(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_FROM_TRAN:
			// Don't call anything before the translator (basically a no-op option).
			if (outConf.setRunFrom(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		// case OPT_GRD:
		// 	// They're giving us a specific executable to use as the grounder instead of the default.
		// 	// Make sure a second argument follows, and save the new grounder.
		// 	if (!tmpptr) {
		// 		if (++i < argc) {
		// 			tmpptr = argv[i];
		// 		} else {
		// 			// setup for a command but they didn't deliver.
		// 			utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
		// 			return OPT_STAT_BAD_ARG;
		// 		}
		// 	}

		// 	if (outConf.command(Config::TC_GROUNDER, tmpptr)) {
		// 		utils::warning("Detected redefinition of grounder command. Continuing with value '%s'",true,tmpptr);
		// 	}

		// 	break;

		// case OPT_GRD_OPTS:
		// 	if (!tmpptr) {
		// 		if (++i < argc) {
		// 			tmpptr = argv[i];
		// 		} else {
		// 			// setup for options but they didn't deliver
		// 			utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
		// 			return OPT_STAT_BAD_ARG;
		// 		}
		// 	}

		// 	if (outConf.opts(Config::TC_GROUNDER, tmpptr)) {
		// 		utils::warning("Detected redefinition of grounder command options. Continuing with value '%s'",true, tmpptr);
		// 	}

		// 	break;

		// case OPT_GRD_OUT:

		// 	if (!tmpptr) {
		// 		if (++i < argc) {
		// 			tmpptr = argv[i];
		// 		} else {
		// 			// setup for a command but they didn't deliver.
		// 			utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
		// 			return OPT_STAT_BAD_ARG;
		// 		}
		// 	}

		// 	if (outConf.output(Config::TC_GROUNDER, tmpptr)) {
		// 		utils::warning("Detected redefinition of the grounder output file. Continuing with value '%s'",true, tmpptr);
		// 	}
		// 	break;

		case OPT_GRINGO_NONE_HACK:
			// Specifying a none_hack value.

			if (!tmpptr) {
				utils::warning("Option '%s' has been deprecated in favor of specifying an explicit none alias value.",true,argv[i]);

				tmpptr = DEF_NONE_HACK_VAL;
			}


			if (outConf.strOpt(Config::STR_NONE_ALIAS, tmpptr)) {
				utils::warning("Detected redefinition of the none alias option. Continuing with value '%s'",true, tmpptr);
			}

			break;


		// case OPT_JUST_GRD:
		// 	// Just call the grounder program, no others.
		// 	if (outConf.setOnlyRun(Config::TC_GROUNDER)) {
		// 		utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
		// 	}
		// 	break;

		case OPT_JUST_PRE:
			// Just call the preprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_POST:
			// Just call the postprocessor program, no others.
			if (outConf.setOnlyRun(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_SO:
			// Just call the solver program, no others.
			if (outConf.setOnlyRun(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_JUST_TRANS:
			// Just call the translator program, no others.
			if (outConf.setOnlyRun(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;
		case OPT_LANG:
			Config::Language l;
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
						utils::error("Expected a language specification following option '%s'. Exiting.",true,0, argv[i-1]);
						return OPT_STAT_BAD_ARG;
				}
			}

			if (!outConf.parseLang(tmpptr, l)) {
				utils::error("'%s' is not a supported language specification.", 0, true, tmpptr);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.lang(l)) {
				utils::warning("Detected a redefition of the input language.",true,argv[i]);
			}
			break;

		case OPT_MAXSTEP:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
						utils::error("Expected a maximum step following option '%s'. Exiting.",true,0, argv[i-1]);
						return OPT_STAT_BAD_ARG;
				}
			}

			if ((steps = Config::parseMaxstep(tmpptr)).second == Config::UNDEFINED) {
				utils::error("'%s' is not a valid step value. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MAXSTEP, steps.second)
					|| (steps.first != Config::UNDEFINED && outConf.intConfigOpt(Config::OPT_MINSTEP, steps.first)))
			{
				utils::warning("Detected a redefinition of the maximum step. Continuing with the value '%s'.",true,tmpptr);
			}
			break;

		case OPT_MINSTEP:

			if (!tmpptr) {

				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a minimum step following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}

	
			if (!utils::from_string(tmpInt, tmpptr)) {
				utils::error("'%s' is not a valid step value. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_MINSTEP, tmpInt)) {
				utils::warning("Detected a redefinition of the minimum step. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_NO_DOMAIN_ENFORCE:
			outConf.boolConfigOpt(Config::OPT_NO_DOMAIN_ENFORCE, true);
			break;
		case OPT_NO_ADD_DOMAIN_ENFORCE:
			outConf.boolConfigOpt(Config::OPT_NO_ADD_DOMAIN_ENFORCE, true);
			break;

		case OPT_MODE_SELECT:
			tmpBool = false;
			if (!tmpptr) {
				tmpBool = true;
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a mode option (one of '%s', '%s', '%s', or '%s') following option '%s'. Exiting.",true,0,
							ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, ARG_MODE_REACTIVE, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (!strcmp(tmpptr,ARG_MODE_STATIC_MANUAL)) {
				mode = Config::MODE_STATIC_MANUAL;
			} else if (!strcmp(tmpptr,ARG_MODE_STATIC_AUTO)) {
				mode = Config::MODE_STATIC_AUTO;
			} else if (!strcmp(tmpptr,ARG_MODE_INCREMENTAL)) {
				mode = Config::MODE_INCREMENTAL;
			} else if (!strcmp(tmpptr,ARG_MODE_REACTIVE)) {
				mode = Config::MODE_INCREMENTAL;
			} else {
				utils::error("Unexpected value '%s'. Expected a mode option (one of '%s', '%s', '%s', or '%s'). Exiting.",true,0,
						tmpptr, ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, OPT_MODE_REACTIVE);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.mode(mode)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value '%s'.", true, tmpptr);
			}

			break;
		case OPT_MODE_STATIC_AUTO:
			if (outConf.mode(Config::MODE_STATIC_AUTO)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'static-auto'.", true);
			}
			break;
		case OPT_MODE_STATIC_MANUAL:
			if (outConf.mode(Config::MODE_STATIC_MANUAL)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'static-manual'.", true);
			}
			break;
		case OPT_MODE_INCREMENTAL:
			if (outConf.mode(Config::MODE_INCREMENTAL)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'incremental'", true);
			}
			break;
		case OPT_MODE_REACTIVE:
			if (outConf.mode(Config::MODE_REACTIVE)) {
				utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'reactive'.", true);
			}
			break;

		case OPT_NO_DEL:
			tmpBool = false;
			utils::warning("The option '%s' has been deprecated in favor of the '--[PROG]-output=[OUTFILE] option.", true, argv[i]);

			tmpBool = outConf.output(Config::TC_TRANSLATOR, DEF_INT_TRANS_FILE) 
					|/* non-shortcutting bitwise or */ outConf.output(Config::TC_PREPROC, DEF_INT_PREPROC_FILE)

					| outConf.output(Config::TC_SOLVER, DEF_INT_SO_FILE);

			// Shut off deleting intermediate files.
			if (tmpBool) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_SHIFT:
			if (!tmpptr) {
				// default true
				tmpptr = "true";
			}
			
			bool val;
			if (!strcmp(tmpptr, "true")) {
				val = true;
			} else if (!strcmp(tmpptr, "false")) {
				val = false;
			} else {
				utils::error("Invalid shift value. Expected a Boolean value ('true' or 'false'). Exiting.", true, 0, argv[i]);
				return OPT_STAT_BAD_ARG;
			}

			if (outConf.boolConfigOpt(Config::OPT_SHIFT, val)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}

			break;

		case OPT_STATS:
			// Don't include standard files in the final product.
			if (outConf.boolConfigOpt(Config::OPT_STATS, true)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true, argv[i]);
			}

			break;

		case OPT_PORT_EXTERNAL:
			// Set the external port to use in reactive mode
			if (!tmpptr) {

				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (!utils::from_string(tmpInt, tmpptr) || tmpInt < 1) {
				utils::error("'%s' is not a valid port. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_EXT_PORT, tmpInt)) {
				utils::warning("Detected a redefinition of the external port. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_PORT_INTERNAL:
			// Set the internal port to use in reactive mode
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a port number following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (!utils::from_string(tmpInt, tmpptr) || tmpInt < 1) {
				utils::error("'%s' is not a valid port. Exiting.",true,0, tmpptr);
				return OPT_STAT_BAD_ARG;
			} else if (outConf.intConfigOpt(Config::OPT_INT_PORT, tmpInt)) {
				utils::warning("Detected a redefinition of the internal port. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_POSTPROC:
			// They're giving us a specific executable to use as the post-processor instead of the default.
			// Make sure a second argument follows, and save the new post-processor.

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of post-processor command. Continuing with value '%s'.",true,argv[i]);
			}
	
			break;

		case OPT_POSTPROC_OPTS:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of post-processor command options. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_POSTPROC_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_POSTPROC, tmpptr)) {
				utils::warning("Detected redefinition of the post-processor output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_PREPROC:
			// They're giving us a specific executable to use as the pre-processor instead of the default.
			// Make sure a second argument follows, and save the new pre-processor.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of pre-processor command. Continuing with value '%s'",true,tmpptr);
			}
			break;

		case OPT_PREPROC_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}


			if (outConf.opts(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of pre-processor command options. Continuing with value '%s'",true,tmpptr);
			}

			break;

		case OPT_PREPROC_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_PREPROC, tmpptr)) {
				utils::warning("Detected redefinition of the pre-processor output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_SO:
			// They're giving us a specific executable to use as the solver instead of the default.
			// Make sure a second argument follows, and save the new solver.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.command(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of solver command. Continuing with value '%s'",true,tmpptr);
			}
			break;

		case OPT_SO_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of solver command options. Continuing with value '%s'",true, tmpptr);
			}

			break;

		case OPT_SO_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_SOLVER, tmpptr)) {
				utils::warning("Detected redefinition of the solver output file. Continuing with value '%s'",true, tmpptr);
			}
			break;
		
		case OPT_SYMTAB:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}

			}

			if (outConf.strOpt(Config::STR_SYMTAB_FILE, tmpptr)) {
				utils::warning("Detected redefinition of the symbol table file. Continuing with value '%s'",true, tmpptr);
			}
			break;


		case OPT_TO_BRIDGE:
			if (outConf.setRunTo(Config::TC_REACTIVE_BRIDGE)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		// case OPT_TO_GRD:
		// 	// Shut off deleting intermediate files.
		// 	if (outConf.setRunTo(Config::TC_GROUNDER)) {
		// 		utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
		// 	}
		// 	break;

		case OPT_TO_PRE:
			// Run everything up to the pre-processor.
			if (outConf.setRunTo(Config::TC_PREPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_POST:
			// Run everything up to the post-processor...
			if (outConf.setRunTo(Config::TC_POSTPROC)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_SO:
			// Run everything up to the solver...
			if (outConf.setRunTo(Config::TC_SOLVER)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TO_TRANS:
			// Run everything up to the translator...
			if (outConf.setRunTo(Config::TC_TRANSLATOR)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,argv[i]);
			}
			break;

		case OPT_TRANS:
			// They're giving us a specific executable to use as the translator instead of the default.
			// Make sure a second argument follows, and save the new grounder.
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a command following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.command(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of translator command. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_TRANS_OPTS:
			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for options but they didn't deliver
					utils::error("Expected pass-through options following the option '%s'. Exiting.", true, 0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}


			if (outConf.opts(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of translator command options. Continuing with value '%s'.",true,tmpptr);
			}

			break;

		case OPT_TRANS_OUT:

			if (!tmpptr) {
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					// setup for a command but they didn't deliver.
					utils::error("Expected a file name following option '%s'. Exiting.",true,0,argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}

			if (outConf.output(Config::TC_TRANSLATOR, tmpptr)) {
				utils::warning("Detected redefinition of the translator output file. Continuing with value '%s'",true, tmpptr);
			}
			break;

		case OPT_VERSION:
			return OPT_STAT_VERSION;

		case OPT_HELP:
			return OPT_STAT_HELP;

		case OPT_QUERY:
			tmpBool = false;
			if (!tmpptr) {
				tmpBool = true;
				if (++i < argc) {
					tmpptr = argv[i];
				} else {
					utils::error("Expected a query identifier following option '%s'. Exiting.",true,0, argv[i-1]);
					return OPT_STAT_BAD_ARG;
				}
			}
			if (outConf.strOpt(Config::STR_QUERY, tmpptr)) {
				utils::warning("The option '%s' has overridden one or more previous choices.",true,(tmpBool) ? argv[i-1] : argv[i]);
			}
			break;

		case OPT_UNSUPPORTED:
			// Whatever this is, it's unsupported.
			utils::warning("The '%s' option is no longer supported. It will be ignored.",true,argv[i]);
			break;
		case OPT_UNSUPPORTED_NO_STD:
			// they want us to not include the standard file...
			// we don't use a standard file anymore.
			utils::warning("The '%s' option is no longer supported as standard files are no longer used.", true, argv[i]);
			break;

		case OPT_UNSUPPORTED_ADDITIVE:
			// They want us to include the additive standard file...
			utils::warning("The '%s' option is no longer supported as standard files are no longer used.",true,argv[i]);
			break;

		case OPT_UNSUPPORTED_GRSO:
			// They did something involving the explicit grounder/solver
			// We no longer support the explicit grounder/solver calls
			utils::error("The '%s' option is no longer supported. We no longer use a dedicated grounder/solver in the toolchain. Please make use of the solver component instead.",true,0,argv[i]);

			// We probably aren't going to do what they want, go ahead and signal that something went wrong
			return OPT_STAT_BAD_ARG;

		case OPT_UNSUPPORTED_MANUAL_MAXSTEP:
			// Manually advance the maximum step of the program query
			utils::error("The '%s' option is no longer supported. Please use that '--mode=static-manual' option instead.",true,0,argv[i]);
			break;

		case OPT_UNKNOWN:
			utils::debug("The option isn't a recognized flag. Checking other possibilities.", true);
			if (argv[i][0] == '-')
			{
				// It appears to be a bad argument...
				utils::error("Found an unrecognized argument '%s'. Exiting.",true,0,argv[i]);
				return OPT_STAT_BAD_ARG;
			}

			// If there's no "header" on the argument, it's either a constant declaration, an input file, or the number of solutions.
			else if(!strcmp(argv[i], "all") || !strcmp(argv[i], "ALL")) {
				if (outConf.intConfigOpt(Config::OPT_NUM_SOLN, 0)) {
					utils::warning("Detected the redefinition of the number of solutions. Continuing with '%s'.",true,argv[i]);
				}
			}
			else if(utils::isInteger(argv[i]))
			{	// It looks like a number, atoi it and save that as the desired number of solutions.
				int numSolutions = atoi(argv[i]);
				if(numSolutions < 0) {
					utils::warning("The number of solutions cannot be negative. Ignoring the argument.",true);
				} else {
					if (outConf.intConfigOpt(Config::OPT_NUM_SOLN, (unsigned int)numSolutions)) {
						utils::warning("Detected the redefinition of the number of solutions. Continuing with '%s'.",true,argv[i]);
					}
				}
			}
			else if((tmpptr = strchr(argv[i],'=')) != NULL)
			{   // Found an equals sign in the argument, it's probably a "const=value" declaration.
				tmpoffset = (size_t)(tmpptr - argv[i]);

				// Get the constant name/value
				std::string name = std::string(argv[i], tmpoffset);
				std::string value = std::string(&(argv[i][tmpoffset+1]));

				utils::debug("Parsed constant declaration name='%s', value='%s'",true, name.c_str(), value.c_str());

				if (outConf.def(name,value)) {
					utils::warning("Detected redefinition of constant '%s'. Continuing with value '%s'",true,name.c_str(),value.c_str());
				}
			}
			else
			{	// If it's not a number, it's probably an input file. Make sure it exists, and then save it to the list.

				if(realpath(argv[i], tmpPath) == NULL)
				{
					// Couldn't find the input file...
					utils::error("Unable to locate input file '%s'. Exiting.",true,0,argv[i]);
					return OPT_STAT_BAD_ARG;
				}
				else
				{
					// Save all of the input files until we are done and can handle them...
					rawInputList.push_back(argv[i]);
				}
			}
			break;
		}
	}

	// We've finished parsing all of the arguments... Let's handle those pesky input files.
	utils::debug("Handling input files...", true);
	if (!rawInputList.size()) {
		//uh-oh. They didn't specify any input files. This simply won't do.
		utils::error("One or more input files must be specified.",true,0);
		return OPT_STAT_BAD_ARG;
	}

	// They've insisted on sticking with a given mode. Make sure they're aware if they're using an incompatible
	for (std::list<char const*>::iterator it = rawInputList.begin(); it != rawInputList.end(); it++) {
		Config::FileType type = outConf.addInput(*it);
		if (outConf.customMode() && type.known && !(type.runningMode & outConf.mode())) {
			utils::warning("The file '%s' doesn't appear to be compatible with the current running mode.",true,*it);
		}
	}

	return OPT_STAT_OK;
}

/**
 * Parses a string and determines what (if any) command line option it contains.
 * @param opt - The string to parse.
 * @param[out] val A string with the value for the option (where applicable) or NULL. 
 * @return The command line option contained within the string (or OPT_UNKNOWN).
 */
Option parseOption(char const* opt, char const*& val) {
	char const* marker;

	val = NULL;

	
#line 1858 "<stdout>"
	{
		char yych;
		unsigned int yyaccept = 0;

		yych = *opt;
		switch (yych) {
		case '\n':	goto yy2;
		case '-':	goto yy3;
		case 'l':	goto yy5;
		case 'm':	goto yy6;
		default:	goto yy7;
		}
yy2:
		opt = marker;
		switch (yyaccept) {
		case 0: 	goto yy4;
		case 1: 	goto yy23;
		case 2: 	goto yy11;
		case 3: 	goto yy37;
		case 4: 	goto yy45;
		case 5: 	goto yy62;
		case 6: 	goto yy122;
		case 7: 	goto yy138;
		case 8: 	goto yy165;
		case 9: 	goto yy199;
		case 10: 	goto yy235;
		case 11: 	goto yy251;
		case 12: 	goto yy270;
		case 13: 	goto yy306;
		}
yy3:
		yyaccept = 0;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy20;
		case '?':	goto yy30;
		case 'a':	goto yy29;
		case 'b':	goto yy41;
		case 'c':	goto yy42;
		case 'f':	goto yy28;
		case 'g':	goto yy27;
		case 'i':	goto yy39;
		case 'j':	goto yy26;
		case 'l':	goto yy38;
		case 'm':	goto yy25;
		case 'n':	goto yy24;
		case 'p':	goto yy22;
		case 'q':	goto yy32;
		case 's':	goto yy36;
		case 't':	goto yy21;
		case 'v':	goto yy34;
		default:	goto yy4;
		}
yy4:
#line 1959 "cplus2asp.r2c"
		{ return OPT_UNKNOWN; }
#line 1915 "<stdout>"
yy5:
		yyaccept = 0;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'a':	goto yy12;
		default:	goto yy4;
		}
yy6:
		yyaccept = 0;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy8;
		default:	goto yy4;
		}
yy7:
		yych = *++opt;
		goto yy4;
yy8:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy9;
		default:	goto yy2;
		}
yy9:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy10;
		default:	goto yy2;
		}
yy10:
		++opt;
yy11:
#line 1892 "cplus2asp.r2c"
		{ return OPT_MODE_SELECT; }
#line 1950 "<stdout>"
yy12:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy13;
		default:	goto yy2;
		}
yy13:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy14;
		default:	goto yy2;
		}
yy14:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy15;
		default:	goto yy2;
		}
yy15:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy16;
		default:	goto yy2;
		}
yy16:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy17;
		default:	goto yy2;
		}
yy17:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy18;
		default:	goto yy2;
		}
yy18:
		++opt;
yy19:
#line 1889 "cplus2asp.r2c"
		{ return OPT_LANG; }
#line 1992 "<stdout>"
yy20:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy310;
		case 'b':	goto yy312;
		case 'c':	goto yy311;
		case 'f':	goto yy313;
		case 'g':	goto yy314;
		case 'h':	goto yy325;
		case 'i':	goto yy316;
		case 'j':	goto yy317;
		case 'l':	goto yy318;
		case 'm':	goto yy319;
		case 'n':	goto yy315;
		case 'p':	goto yy321;
		case 'q':	goto yy324;
		case 's':	goto yy320;
		case 't':	goto yy322;
		case 'u':	goto yy326;
		case 'v':	goto yy323;
		default:	goto yy2;
		}
yy21:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy265;
		case 'r':	goto yy266;
		default:	goto yy2;
		}
yy22:
		yyaccept = 1;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy226;
		case 'i':	goto yy230;
		case 'o':	goto yy228;
		case 'r':	goto yy229;
		default:	goto yy23;
		}
yy23:
#line 1902 "cplus2asp.r2c"
		{ return OPT_PORT_EXTERNAL; }
#line 2035 "<stdout>"
yy24:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy185;
		case 'd':	goto yy187;
		case 'h':	goto yy183;
		case 'o':	goto yy189;
		default:	goto yy2;
		}
yy25:
		yyaccept = 2;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy169;
		case 'a':	goto yy171;
		case 'i':	goto yy172;
		case 'm':	goto yy173;
		default:	goto yy11;
		}
yy26:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy143;
		default:	goto yy2;
		}
yy27:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy121;
		default:	goto yy2;
		}
yy28:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy93;
		default:	goto yy2;
		}
yy29:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy87;
		case 'u':	goto yy86;
		default:	goto yy2;
		}
yy30:
		++opt;
#line 1938 "cplus2asp.r2c"
		{ return OPT_HELP; }
#line 2084 "<stdout>"
yy32:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy84;
		default:	goto yy33;
		}
yy33:
#line 1937 "cplus2asp.r2c"
		{ return OPT_QUERY; }
#line 2094 "<stdout>"
yy34:
		++opt;
#line 1935 "cplus2asp.r2c"
		{ return OPT_VERSION; }
#line 2099 "<stdout>"
yy36:
		yyaccept = 3;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy61;
		case 'y':	goto yy63;
		default:	goto yy37;
		}
yy37:
#line 1899 "cplus2asp.r2c"
		{ return OPT_SHIFT; }
#line 2111 "<stdout>"
yy38:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy59;
		default:	goto yy19;
		}
yy39:
		++opt;
#line 1883 "cplus2asp.r2c"
		{ return OPT_PORT_INTERNAL; }
#line 2122 "<stdout>"
yy41:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy44;
		default:	goto yy2;
		}
yy42:
		++opt;
#line 1862 "cplus2asp.r2c"
		{ return OPT_CONST; }
#line 2133 "<stdout>"
yy44:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy47;
		case 'o':	goto yy46;
		default:	goto yy45;
		}
yy45:
#line 1864 "cplus2asp.r2c"
		{ return OPT_BRIDGE; }
#line 2145 "<stdout>"
yy46:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy49;
		case 'u':	goto yy50;
		default:	goto yy2;
		}
yy47:
		++opt;
#line 1863 "cplus2asp.r2c"
		{ val = opt; return OPT_BRIDGE; }
#line 2157 "<stdout>"
yy49:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy55;
		default:	goto yy2;
		}
yy50:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy51;
		default:	goto yy2;
		}
yy51:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy53;
		default:	goto yy52;
		}
yy52:
#line 1868 "cplus2asp.r2c"
		{ return OPT_BRIDGE_OUT; }
#line 2179 "<stdout>"
yy53:
		++opt;
#line 1867 "cplus2asp.r2c"
		{ val = opt; return OPT_BRIDGE_OUT; }
#line 2184 "<stdout>"
yy55:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy57;
		default:	goto yy56;
		}
yy56:
#line 1866 "cplus2asp.r2c"
		{ return OPT_BRIDGE_OPTS; }
#line 2194 "<stdout>"
yy57:
		++opt;
#line 1865 "cplus2asp.r2c"
		{ val = opt; return OPT_BRIDGE_OPTS; }
#line 2199 "<stdout>"
yy59:
		++opt;
#line 1891 "cplus2asp.r2c"
		{ val = opt; return OPT_LANG; }
#line 2204 "<stdout>"
yy61:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy72;
		case 'o':	goto yy71;
		default:	goto yy62;
		}
yy62:
#line 1916 "cplus2asp.r2c"
		{ return OPT_SO; }
#line 2216 "<stdout>"
yy63:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy64;
		default:	goto yy2;
		}
yy64:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy65;
		default:	goto yy2;
		}
yy65:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy66;
		default:	goto yy2;
		}
yy66:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy67;
		default:	goto yy2;
		}
yy67:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy69;
		default:	goto yy68;
		}
yy68:
#line 1921 "cplus2asp.r2c"
		{ return OPT_SYMTAB; }
#line 2250 "<stdout>"
yy69:
		++opt;
#line 1922 "cplus2asp.r2c"
		{ val = opt; return OPT_SYMTAB; }
#line 2255 "<stdout>"
yy71:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy74;
		case 'u':	goto yy75;
		default:	goto yy2;
		}
yy72:
		++opt;
#line 1915 "cplus2asp.r2c"
		{ val = opt; return OPT_SO; }
#line 2267 "<stdout>"
yy74:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy80;
		default:	goto yy2;
		}
yy75:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy76;
		default:	goto yy2;
		}
yy76:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy78;
		default:	goto yy77;
		}
yy77:
#line 1920 "cplus2asp.r2c"
		{ return OPT_SO_OUT; }
#line 2289 "<stdout>"
yy78:
		++opt;
#line 1919 "cplus2asp.r2c"
		{ val = opt; return OPT_SO_OUT; }
#line 2294 "<stdout>"
yy80:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy82;
		default:	goto yy81;
		}
yy81:
#line 1918 "cplus2asp.r2c"
		{ return OPT_SO_OPTS; }
#line 2304 "<stdout>"
yy82:
		++opt;
#line 1917 "cplus2asp.r2c"
		{ val = opt; return OPT_SO_OPTS; }
#line 2309 "<stdout>"
yy84:
		++opt;
#line 1936 "cplus2asp.r2c"
		{ val = opt; return OPT_QUERY; }
#line 2314 "<stdout>"
yy86:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy90;
		default:	goto yy2;
		}
yy87:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy88;
		default:	goto yy2;
		}
yy88:
		++opt;
#line 1945 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_ADDITIVE; }
#line 2331 "<stdout>"
yy90:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy91;
		default:	goto yy2;
		}
yy91:
		++opt;
#line 1861 "cplus2asp.r2c"
		{ return OPT_AUTO; }
#line 2342 "<stdout>"
yy93:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy94;
		default:	goto yy2;
		}
yy94:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy95;
		default:	goto yy2;
		}
yy95:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy100;
		case 'g':	goto yy96;
		case 'p':	goto yy99;
		case 's':	goto yy98;
		case 't':	goto yy97;
		default:	goto yy2;
		}
yy96:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy117;
		default:	goto yy2;
		}
yy97:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy112;
		default:	goto yy2;
		}
yy98:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy110;
		default:	goto yy2;
		}
yy99:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy104;
		case 'r':	goto yy103;
		default:	goto yy2;
		}
yy100:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy101;
		default:	goto yy2;
		}
yy101:
		++opt;
#line 1869 "cplus2asp.r2c"
		{ return OPT_FRM_BRIDGE; }
#line 2400 "<stdout>"
yy103:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy108;
		default:	goto yy2;
		}
yy104:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy105;
		default:	goto yy2;
		}
yy105:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy106;
		default:	goto yy2;
		}
yy106:
		++opt;
#line 1872 "cplus2asp.r2c"
		{ return OPT_FRM_POST; }
#line 2423 "<stdout>"
yy108:
		++opt;
#line 1871 "cplus2asp.r2c"
		{ return OPT_FRM_PRE; }
#line 2428 "<stdout>"
yy110:
		++opt;
#line 1873 "cplus2asp.r2c"
		{ return OPT_FROM_SO; }
#line 2433 "<stdout>"
yy112:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy113;
		default:	goto yy2;
		}
yy113:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy114;
		default:	goto yy2;
		}
yy114:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy115;
		default:	goto yy2;
		}
yy115:
		++opt;
#line 1874 "cplus2asp.r2c"
		{ return OPT_FROM_TRAN; }
#line 2456 "<stdout>"
yy117:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy118;
		default:	goto yy2;
		}
yy118:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy119;
		default:	goto yy2;
		}
yy119:
		++opt;
#line 1946 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2473 "<stdout>"
yy121:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy125;
		case 'o':	goto yy124;
		case 's':	goto yy123;
		default:	goto yy122;
		}
yy122:
#line 1876 "cplus2asp.r2c"
		{ return OPT_GRD; }
#line 2486 "<stdout>"
yy123:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy137;
		default:	goto yy2;
		}
yy124:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy127;
		case 'u':	goto yy128;
		default:	goto yy2;
		}
yy125:
		++opt;
#line 1875 "cplus2asp.r2c"
		{ val = opt; return OPT_GRD; }
#line 2504 "<stdout>"
yy127:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy133;
		default:	goto yy2;
		}
yy128:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy129;
		default:	goto yy2;
		}
yy129:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy131;
		default:	goto yy130;
		}
yy130:
#line 1880 "cplus2asp.r2c"
		{ return OPT_GRD_OUT; }
#line 2526 "<stdout>"
yy131:
		++opt;
#line 1879 "cplus2asp.r2c"
		{ val = opt; return OPT_GRD_OUT; }
#line 2531 "<stdout>"
yy133:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy135;
		default:	goto yy134;
		}
yy134:
#line 1878 "cplus2asp.r2c"
		{ return OPT_GRD_OPTS; }
#line 2541 "<stdout>"
yy135:
		++opt;
#line 1877 "cplus2asp.r2c"
		{ val = opt; return OPT_GRD_OPTS; }
#line 2546 "<stdout>"
yy137:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case 'o':	goto yy139;
		default:	goto yy138;
		}
yy138:
#line 1947 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2557 "<stdout>"
yy139:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy140;
		default:	goto yy2;
		}
yy140:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy141;
		default:	goto yy2;
		}
yy141:
		++opt;
#line 1948 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2574 "<stdout>"
yy143:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy144;
		default:	goto yy2;
		}
yy144:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy145;
		default:	goto yy2;
		}
yy145:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy146;
		case 'p':	goto yy149;
		case 's':	goto yy148;
		case 't':	goto yy147;
		default:	goto yy2;
		}
yy146:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy164;
		default:	goto yy2;
		}
yy147:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy159;
		default:	goto yy2;
		}
yy148:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy157;
		default:	goto yy2;
		}
yy149:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy151;
		case 'r':	goto yy150;
		default:	goto yy2;
		}
yy150:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy155;
		default:	goto yy2;
		}
yy151:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy152;
		default:	goto yy2;
		}
yy152:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy153;
		default:	goto yy2;
		}
yy153:
		++opt;
#line 1886 "cplus2asp.r2c"
		{ return OPT_JUST_POST; }
#line 2643 "<stdout>"
yy155:
		++opt;
#line 1885 "cplus2asp.r2c"
		{ return OPT_JUST_PRE; }
#line 2648 "<stdout>"
yy157:
		++opt;
#line 1887 "cplus2asp.r2c"
		{ return OPT_JUST_SO; }
#line 2653 "<stdout>"
yy159:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy160;
		default:	goto yy2;
		}
yy160:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy161;
		default:	goto yy2;
		}
yy161:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy162;
		default:	goto yy2;
		}
yy162:
		++opt;
#line 1888 "cplus2asp.r2c"
		{ return OPT_JUST_TRANS; }
#line 2676 "<stdout>"
yy164:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy166;
		default:	goto yy165;
		}
yy165:
#line 1884 "cplus2asp.r2c"
		{ return OPT_JUST_GRD; }
#line 2687 "<stdout>"
yy166:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy167;
		default:	goto yy2;
		}
yy167:
		++opt;
#line 1949 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_GRSO; }
#line 2698 "<stdout>"
yy169:
		++opt;
#line 1890 "cplus2asp.r2c"
		{ val = opt; return OPT_MODE_SELECT; }
#line 2703 "<stdout>"
yy171:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy179;
		default:	goto yy2;
		}
yy172:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy175;
		default:	goto yy2;
		}
yy173:
		++opt;
#line 1950 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_MANUAL_MAXSTEP; }
#line 2720 "<stdout>"
yy175:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy177;
		default:	goto yy176;
		}
yy176:
#line 1896 "cplus2asp.r2c"
		{ return OPT_MINSTEP; }
#line 2730 "<stdout>"
yy177:
		++opt;
#line 1895 "cplus2asp.r2c"
		{ val = opt; return OPT_MINSTEP; }
#line 2735 "<stdout>"
yy179:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy181;
		default:	goto yy180;
		}
yy180:
#line 1894 "cplus2asp.r2c"
		{ return OPT_MAXSTEP; }
#line 2745 "<stdout>"
yy181:
		++opt;
#line 1893 "cplus2asp.r2c"
		{ val = opt;return OPT_MAXSTEP; }
#line 2750 "<stdout>"
yy183:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy224;
		default:	goto yy184;
		}
yy184:
#line 1941 "cplus2asp.r2c"
		{ return OPT_GRINGO_NONE_HACK; }
#line 2760 "<stdout>"
yy185:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy222;
		case 'd':	goto yy220;
		default:	goto yy186;
		}
yy186:
#line 1942 "cplus2asp.r2c"
		{ return OPT_GRINGO_NONE_HACK; }
#line 2771 "<stdout>"
yy187:
		++opt;
#line 1897 "cplus2asp.r2c"
		{ return OPT_NO_DOMAIN_ENFORCE; }
#line 2776 "<stdout>"
yy189:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy194;
		case 'g':	goto yy193;
		case 'p':	goto yy192;
		case 's':	goto yy191;
		case 't':	goto yy190;
		default:	goto yy2;
		}
yy190:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy215;
		default:	goto yy2;
		}
yy191:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy211;
		case 't':	goto yy210;
		default:	goto yy2;
		}
yy192:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy204;
		case 'r':	goto yy203;
		default:	goto yy2;
		}
yy193:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy198;
		default:	goto yy2;
		}
yy194:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy195;
		default:	goto yy2;
		}
yy195:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy196;
		default:	goto yy2;
		}
yy196:
		++opt;
#line 1940 "cplus2asp.r2c"
		{ return OPT_NO_DEL; }
#line 2829 "<stdout>"
yy198:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy200;
		default:	goto yy199;
		}
yy199:
#line 1951 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2840 "<stdout>"
yy200:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy201;
		default:	goto yy2;
		}
yy201:
		++opt;
#line 1952 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2851 "<stdout>"
yy203:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy208;
		default:	goto yy2;
		}
yy204:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy205;
		default:	goto yy2;
		}
yy205:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy206;
		default:	goto yy2;
		}
yy206:
		++opt;
#line 1954 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2874 "<stdout>"
yy208:
		++opt;
#line 1953 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2879 "<stdout>"
yy210:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy213;
		default:	goto yy2;
		}
yy211:
		++opt;
#line 1955 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2890 "<stdout>"
yy213:
		++opt;
#line 1944 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED_NO_STD; }
#line 2895 "<stdout>"
yy215:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy216;
		default:	goto yy2;
		}
yy216:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy217;
		default:	goto yy2;
		}
yy217:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy218;
		default:	goto yy2;
		}
yy218:
		++opt;
#line 1956 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2918 "<stdout>"
yy220:
		++opt;
#line 1898 "cplus2asp.r2c"
		{ return OPT_NO_ADD_DOMAIN_ENFORCE; }
#line 2923 "<stdout>"
yy222:
		++opt;
#line 1882 "cplus2asp.r2c"
		{ val = opt; return OPT_GRINGO_NONE_HACK; }
#line 2928 "<stdout>"
yy224:
		++opt;
#line 1881 "cplus2asp.r2c"
		{ val = opt; return OPT_GRINGO_NONE_HACK; }
#line 2933 "<stdout>"
yy226:
		++opt;
#line 1901 "cplus2asp.r2c"
		{ val = opt; return OPT_PORT_EXTERNAL; }
#line 2938 "<stdout>"
yy228:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy249;
		default:	goto yy2;
		}
yy229:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy234;
		default:	goto yy2;
		}
yy230:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy231;
		default:	goto yy2;
		}
yy231:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy232;
		default:	goto yy2;
		}
yy232:
		++opt;
#line 1957 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 2967 "<stdout>"
yy234:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy236;
		case 'o':	goto yy238;
		default:	goto yy235;
		}
yy235:
#line 1910 "cplus2asp.r2c"
		{ return OPT_PREPROC; }
#line 2979 "<stdout>"
yy236:
		++opt;
#line 1909 "cplus2asp.r2c"
		{ val = opt; return OPT_PREPROC; }
#line 2984 "<stdout>"
yy238:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy240;
		case 'u':	goto yy239;
		default:	goto yy2;
		}
yy239:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy245;
		default:	goto yy2;
		}
yy240:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy241;
		default:	goto yy2;
		}
yy241:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy243;
		default:	goto yy242;
		}
yy242:
#line 1912 "cplus2asp.r2c"
		{ return OPT_PREPROC_OPTS; }
#line 3013 "<stdout>"
yy243:
		++opt;
#line 1911 "cplus2asp.r2c"
		{ val = opt; return OPT_PREPROC_OPTS; }
#line 3018 "<stdout>"
yy245:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy247;
		default:	goto yy246;
		}
yy246:
#line 1914 "cplus2asp.r2c"
		{ return OPT_PREPROC_OUT; }
#line 3028 "<stdout>"
yy247:
		++opt;
#line 1913 "cplus2asp.r2c"
		{ val = opt; return OPT_PREPROC_OUT; }
#line 3033 "<stdout>"
yy249:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy250;
		default:	goto yy2;
		}
yy250:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy253;
		case 'o':	goto yy252;
		default:	goto yy251;
		}
yy251:
#line 1904 "cplus2asp.r2c"
		{ return OPT_POSTPROC; }
#line 3051 "<stdout>"
yy252:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy255;
		case 'u':	goto yy256;
		default:	goto yy2;
		}
yy253:
		++opt;
#line 1903 "cplus2asp.r2c"
		{ val = opt; return OPT_POSTPROC; }
#line 3063 "<stdout>"
yy255:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy261;
		default:	goto yy2;
		}
yy256:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy257;
		default:	goto yy2;
		}
yy257:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy259;
		default:	goto yy258;
		}
yy258:
#line 1908 "cplus2asp.r2c"
		{ return OPT_POSTPROC_OUT; }
#line 3085 "<stdout>"
yy259:
		++opt;
#line 1907 "cplus2asp.r2c"
		{ val = opt; return OPT_POSTPROC_OUT; }
#line 3090 "<stdout>"
yy261:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy263;
		default:	goto yy262;
		}
yy262:
#line 1906 "cplus2asp.r2c"
		{ return OPT_POSTPROC_OPTS; }
#line 3100 "<stdout>"
yy263:
		++opt;
#line 1905 "cplus2asp.r2c"
		{ val = opt; return OPT_POSTPROC_OPTS; }
#line 3105 "<stdout>"
yy265:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy285;
		case 'g':	goto yy284;
		case 'p':	goto yy288;
		case 's':	goto yy287;
		case 't':	goto yy286;
		default:	goto yy2;
		}
yy266:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy267;
		default:	goto yy2;
		}
yy267:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy268;
		default:	goto yy2;
		}
yy268:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy269;
		default:	goto yy2;
		}
yy269:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case '=':	goto yy271;
		case 'o':	goto yy273;
		default:	goto yy270;
		}
yy270:
#line 1930 "cplus2asp.r2c"
		{ return OPT_TRANS; }
#line 3145 "<stdout>"
yy271:
		++opt;
#line 1929 "cplus2asp.r2c"
		{ val = opt; return OPT_TRANS; }
#line 3150 "<stdout>"
yy273:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy275;
		case 'u':	goto yy274;
		default:	goto yy2;
		}
yy274:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy280;
		default:	goto yy2;
		}
yy275:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy276;
		default:	goto yy2;
		}
yy276:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy278;
		default:	goto yy277;
		}
yy277:
#line 1932 "cplus2asp.r2c"
		{ return OPT_TRANS_OPTS; }
#line 3179 "<stdout>"
yy278:
		++opt;
#line 1931 "cplus2asp.r2c"
		{ val = opt; return OPT_TRANS_OPTS; }
#line 3184 "<stdout>"
yy280:
		++opt;
		switch ((yych = *opt)) {
		case '=':	goto yy282;
		default:	goto yy281;
		}
yy281:
#line 1934 "cplus2asp.r2c"
		{ return OPT_TRANS_OUT; }
#line 3194 "<stdout>"
yy282:
		++opt;
#line 1933 "cplus2asp.r2c"
		{ val = opt; return OPT_TRANS_OUT; }
#line 3199 "<stdout>"
yy284:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy305;
		default:	goto yy2;
		}
yy285:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy303;
		default:	goto yy2;
		}
yy286:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy298;
		default:	goto yy2;
		}
yy287:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy296;
		default:	goto yy2;
		}
yy288:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy290;
		case 'r':	goto yy289;
		default:	goto yy2;
		}
yy289:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy294;
		default:	goto yy2;
		}
yy290:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy291;
		default:	goto yy2;
		}
yy291:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy292;
		default:	goto yy2;
		}
yy292:
		++opt;
#line 1925 "cplus2asp.r2c"
		{ return OPT_TO_POST; }
#line 3253 "<stdout>"
yy294:
		++opt;
#line 1924 "cplus2asp.r2c"
		{ return OPT_TO_PRE; }
#line 3258 "<stdout>"
yy296:
		++opt;
#line 1926 "cplus2asp.r2c"
		{ return OPT_TO_SO; }
#line 3263 "<stdout>"
yy298:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy299;
		default:	goto yy2;
		}
yy299:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy300;
		default:	goto yy2;
		}
yy300:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy301;
		default:	goto yy2;
		}
yy301:
		++opt;
#line 1927 "cplus2asp.r2c"
		{ return OPT_TO_TRANS; }
#line 3286 "<stdout>"
yy303:
		++opt;
#line 1928 "cplus2asp.r2c"
		{ return OPT_TO_BRIDGE;	}
#line 3291 "<stdout>"
yy305:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case 's':	goto yy307;
		default:	goto yy306;
		}
yy306:
#line 1923 "cplus2asp.r2c"
		{ return OPT_TO_GRD; }
#line 3302 "<stdout>"
yy307:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy308;
		default:	goto yy2;
		}
yy308:
		++opt;
#line 1958 "cplus2asp.r2c"
		{ return OPT_UNSUPPORTED; }
#line 3313 "<stdout>"
yy310:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy806;
		case 'u':	goto yy807;
		default:	goto yy2;
		}
yy311:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy803;
		default:	goto yy2;
		}
yy312:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy788;
		default:	goto yy2;
		}
yy313:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy727;
		default:	goto yy2;
		}
yy314:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy700;
		default:	goto yy2;
		}
yy315:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy605;
		default:	goto yy2;
		}
yy316:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy594;
		default:	goto yy2;
		}
yy317:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy538;
		default:	goto yy2;
		}
yy318:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy531;
		default:	goto yy2;
		}
yy319:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy505;
		case 'i':	goto yy506;
		case 'o':	goto yy507;
		default:	goto yy2;
		}
yy320:
		yych = *++opt;
		switch (yych) {
		case 'h':	goto yy473;
		case 'o':	goto yy471;
		case 't':	goto yy472;
		case 'y':	goto yy470;
		default:	goto yy2;
		}
yy321:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy424;
		case 'r':	goto yy423;
		default:	goto yy2;
		}
yy322:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy345;
		case 'r':	goto yy346;
		default:	goto yy2;
		}
yy323:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy340;
		default:	goto yy2;
		}
yy324:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy336;
		default:	goto yy2;
		}
yy325:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy334;
		default:	goto yy2;
		}
yy326:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy327;
		default:	goto yy2;
		}
yy327:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy328;
		default:	goto yy2;
		}
yy328:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy329;
		default:	goto yy2;
		}
yy329:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy330;
		default:	goto yy2;
		}
yy330:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy331;
		default:	goto yy2;
		}
yy331:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy332;
		default:	goto yy2;
		}
yy332:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy333;
		default:	goto yy2;
		}
yy333:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy232;
		default:	goto yy2;
		}
yy334:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy335;
		default:	goto yy2;
		}
yy335:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy30;
		default:	goto yy2;
		}
yy336:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy337;
		default:	goto yy2;
		}
yy337:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy338;
		default:	goto yy2;
		}
yy338:
		yych = *++opt;
		switch (yych) {
		case 'y':	goto yy339;
		default:	goto yy2;
		}
yy339:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy84;
		default:	goto yy33;
		}
yy340:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy341;
		default:	goto yy2;
		}
yy341:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy342;
		default:	goto yy2;
		}
yy342:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy343;
		default:	goto yy2;
		}
yy343:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy344;
		default:	goto yy2;
		}
yy344:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy34;
		default:	goto yy2;
		}
yy345:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy365;
		default:	goto yy2;
		}
yy346:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy347;
		default:	goto yy2;
		}
yy347:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy348;
		default:	goto yy2;
		}
yy348:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy349;
		default:	goto yy2;
		}
yy349:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy350;
		default:	goto yy2;
		}
yy350:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy351;
		default:	goto yy2;
		}
yy351:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy352;
		default:	goto yy2;
		}
yy352:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy353;
		default:	goto yy2;
		}
yy353:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy354;
		default:	goto yy2;
		}
yy354:
		yyaccept = 12;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy355;
		case '=':	goto yy271;
		default:	goto yy270;
		}
yy355:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy356;
		default:	goto yy2;
		}
yy356:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy357;
		case 'u':	goto yy358;
		default:	goto yy2;
		}
yy357:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy363;
		default:	goto yy2;
		}
yy358:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy359;
		default:	goto yy2;
		}
yy359:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy360;
		default:	goto yy2;
		}
yy360:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy361;
		default:	goto yy2;
		}
yy361:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy362;
		default:	goto yy2;
		}
yy362:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy282;
		default:	goto yy281;
		}
yy363:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy364;
		default:	goto yy2;
		}
yy364:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy278;
		default:	goto yy277;
		}
yy365:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy367;
		case 'g':	goto yy366;
		case 'p':	goto yy370;
		case 's':	goto yy369;
		case 't':	goto yy368;
		default:	goto yy2;
		}
yy366:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy410;
		default:	goto yy2;
		}
yy367:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy406;
		default:	goto yy2;
		}
yy368:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy398;
		default:	goto yy2;
		}
yy369:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy394;
		default:	goto yy2;
		}
yy370:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy372;
		case 'r':	goto yy371;
		default:	goto yy2;
		}
yy371:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy384;
		default:	goto yy2;
		}
yy372:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy373;
		default:	goto yy2;
		}
yy373:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy374;
		default:	goto yy2;
		}
yy374:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy375;
		default:	goto yy2;
		}
yy375:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy376;
		default:	goto yy2;
		}
yy376:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy377;
		default:	goto yy2;
		}
yy377:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy378;
		default:	goto yy2;
		}
yy378:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy379;
		default:	goto yy2;
		}
yy379:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy380;
		default:	goto yy2;
		}
yy380:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy381;
		default:	goto yy2;
		}
yy381:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy382;
		default:	goto yy2;
		}
yy382:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy383;
		default:	goto yy2;
		}
yy383:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy292;
		default:	goto yy2;
		}
yy384:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy385;
		default:	goto yy2;
		}
yy385:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy386;
		default:	goto yy2;
		}
yy386:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy387;
		default:	goto yy2;
		}
yy387:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy388;
		default:	goto yy2;
		}
yy388:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy389;
		default:	goto yy2;
		}
yy389:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy390;
		default:	goto yy2;
		}
yy390:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy391;
		default:	goto yy2;
		}
yy391:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy392;
		default:	goto yy2;
		}
yy392:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy393;
		default:	goto yy2;
		}
yy393:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy294;
		default:	goto yy2;
		}
yy394:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy395;
		default:	goto yy2;
		}
yy395:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy396;
		default:	goto yy2;
		}
yy396:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy397;
		default:	goto yy2;
		}
yy397:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy296;
		default:	goto yy2;
		}
yy398:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy399;
		default:	goto yy2;
		}
yy399:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy400;
		default:	goto yy2;
		}
yy400:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy401;
		default:	goto yy2;
		}
yy401:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy402;
		default:	goto yy2;
		}
yy402:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy403;
		default:	goto yy2;
		}
yy403:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy404;
		default:	goto yy2;
		}
yy404:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy405;
		default:	goto yy2;
		}
yy405:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy301;
		default:	goto yy2;
		}
yy406:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy407;
		default:	goto yy2;
		}
yy407:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy408;
		default:	goto yy2;
		}
yy408:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy409;
		default:	goto yy2;
		}
yy409:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy303;
		default:	goto yy2;
		}
yy410:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy411;
		default:	goto yy2;
		}
yy411:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy412;
		default:	goto yy2;
		}
yy412:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy413;
		default:	goto yy2;
		}
yy413:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy414;
		default:	goto yy2;
		}
yy414:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy415;
		default:	goto yy2;
		}
yy415:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy416;
		default:	goto yy2;
		}
yy416:
		yyaccept = 13;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy417;
		default:	goto yy306;
		}
yy417:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy418;
		default:	goto yy2;
		}
yy418:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy419;
		default:	goto yy2;
		}
yy419:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy420;
		default:	goto yy2;
		}
yy420:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy421;
		default:	goto yy2;
		}
yy421:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy422;
		default:	goto yy2;
		}
yy422:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy308;
		default:	goto yy2;
		}
yy423:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy449;
		default:	goto yy2;
		}
yy424:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy425;
		case 's':	goto yy426;
		default:	goto yy2;
		}
yy425:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy448;
		default:	goto yy2;
		}
yy426:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy427;
		default:	goto yy2;
		}
yy427:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy428;
		default:	goto yy2;
		}
yy428:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy429;
		default:	goto yy2;
		}
yy429:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy430;
		default:	goto yy2;
		}
yy430:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy431;
		default:	goto yy2;
		}
yy431:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy432;
		default:	goto yy2;
		}
yy432:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy433;
		default:	goto yy2;
		}
yy433:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy434;
		default:	goto yy2;
		}
yy434:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy435;
		default:	goto yy2;
		}
yy435:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy436;
		default:	goto yy2;
		}
yy436:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy437;
		default:	goto yy2;
		}
yy437:
		yyaccept = 11;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy438;
		case '=':	goto yy253;
		default:	goto yy251;
		}
yy438:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy439;
		default:	goto yy2;
		}
yy439:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy440;
		case 'u':	goto yy441;
		default:	goto yy2;
		}
yy440:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy446;
		default:	goto yy2;
		}
yy441:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy442;
		default:	goto yy2;
		}
yy442:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy443;
		default:	goto yy2;
		}
yy443:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy444;
		default:	goto yy2;
		}
yy444:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy445;
		default:	goto yy2;
		}
yy445:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy259;
		default:	goto yy258;
		}
yy446:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy447;
		default:	goto yy2;
		}
yy447:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy263;
		default:	goto yy262;
		}
yy448:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy226;
		default:	goto yy23;
		}
yy449:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy450;
		default:	goto yy2;
		}
yy450:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy451;
		default:	goto yy2;
		}
yy451:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy452;
		default:	goto yy2;
		}
yy452:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy453;
		default:	goto yy2;
		}
yy453:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy454;
		default:	goto yy2;
		}
yy454:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy455;
		default:	goto yy2;
		}
yy455:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy456;
		default:	goto yy2;
		}
yy456:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy457;
		default:	goto yy2;
		}
yy457:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy458;
		default:	goto yy2;
		}
yy458:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy459;
		default:	goto yy2;
		}
yy459:
		yyaccept = 10;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy460;
		case '=':	goto yy236;
		default:	goto yy235;
		}
yy460:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy461;
		default:	goto yy2;
		}
yy461:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy463;
		case 'u':	goto yy462;
		default:	goto yy2;
		}
yy462:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy466;
		default:	goto yy2;
		}
yy463:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy464;
		default:	goto yy2;
		}
yy464:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy465;
		default:	goto yy2;
		}
yy465:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy243;
		default:	goto yy242;
		}
yy466:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy467;
		default:	goto yy2;
		}
yy467:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy468;
		default:	goto yy2;
		}
yy468:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy469;
		default:	goto yy2;
		}
yy469:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy247;
		default:	goto yy246;
		}
yy470:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy495;
		default:	goto yy2;
		}
yy471:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy481;
		default:	goto yy2;
		}
yy472:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy477;
		default:	goto yy2;
		}
yy473:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy474;
		default:	goto yy2;
		}
yy474:
		yych = *++opt;
		switch (yych) {
		case 'f':	goto yy475;
		default:	goto yy2;
		}
yy475:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy476;
		default:	goto yy2;
		}
yy476:
		yych = *++opt;
		goto yy37;
yy477:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy478;
		default:	goto yy2;
		}
yy478:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy479;
		default:	goto yy2;
		}
yy479:
		++opt;
#line 1900 "cplus2asp.r2c"
		{ return OPT_STATS; }
#line 4353 "<stdout>"
yy481:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy482;
		default:	goto yy2;
		}
yy482:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy483;
		default:	goto yy2;
		}
yy483:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy484;
		default:	goto yy2;
		}
yy484:
		yyaccept = 5;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy485;
		case '=':	goto yy72;
		default:	goto yy62;
		}
yy485:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy486;
		default:	goto yy2;
		}
yy486:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy487;
		case 'u':	goto yy488;
		default:	goto yy2;
		}
yy487:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy493;
		default:	goto yy2;
		}
yy488:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy489;
		default:	goto yy2;
		}
yy489:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy490;
		default:	goto yy2;
		}
yy490:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy491;
		default:	goto yy2;
		}
yy491:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy492;
		default:	goto yy2;
		}
yy492:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy78;
		default:	goto yy77;
		}
yy493:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy494;
		default:	goto yy2;
		}
yy494:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy82;
		default:	goto yy81;
		}
yy495:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy496;
		default:	goto yy2;
		}
yy496:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy497;
		default:	goto yy2;
		}
yy497:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy498;
		default:	goto yy2;
		}
yy498:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy499;
		default:	goto yy2;
		}
yy499:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy500;
		default:	goto yy2;
		}
yy500:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy501;
		default:	goto yy2;
		}
yy501:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy502;
		default:	goto yy2;
		}
yy502:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy503;
		default:	goto yy2;
		}
yy503:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy504;
		default:	goto yy2;
		}
yy504:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy69;
		default:	goto yy68;
		}
yy505:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy516;
		case 'x':	goto yy515;
		default:	goto yy2;
		}
yy506:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy510;
		default:	goto yy2;
		}
yy507:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy508;
		default:	goto yy2;
		}
yy508:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy509;
		default:	goto yy2;
		}
yy509:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy169;
		default:	goto yy11;
		}
yy510:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy511;
		default:	goto yy2;
		}
yy511:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy512;
		default:	goto yy2;
		}
yy512:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy513;
		default:	goto yy2;
		}
yy513:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy514;
		default:	goto yy2;
		}
yy514:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy177;
		default:	goto yy176;
		}
yy515:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy527;
		default:	goto yy2;
		}
yy516:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy517;
		default:	goto yy2;
		}
yy517:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy518;
		default:	goto yy2;
		}
yy518:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy519;
		default:	goto yy2;
		}
yy519:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy520;
		default:	goto yy2;
		}
yy520:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy521;
		default:	goto yy2;
		}
yy521:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy522;
		default:	goto yy2;
		}
yy522:
		yych = *++opt;
		switch (yych) {
		case 'x':	goto yy523;
		default:	goto yy2;
		}
yy523:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy524;
		default:	goto yy2;
		}
yy524:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy525;
		default:	goto yy2;
		}
yy525:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy526;
		default:	goto yy2;
		}
yy526:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy173;
		default:	goto yy2;
		}
yy527:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy528;
		default:	goto yy2;
		}
yy528:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy529;
		default:	goto yy2;
		}
yy529:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy530;
		default:	goto yy2;
		}
yy530:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy181;
		default:	goto yy180;
		}
yy531:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy532;
		default:	goto yy2;
		}
yy532:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy533;
		default:	goto yy2;
		}
yy533:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy534;
		default:	goto yy2;
		}
yy534:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy535;
		default:	goto yy2;
		}
yy535:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy536;
		default:	goto yy2;
		}
yy536:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy537;
		default:	goto yy2;
		}
yy537:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy59;
		default:	goto yy19;
		}
yy538:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy539;
		default:	goto yy2;
		}
yy539:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy540;
		default:	goto yy2;
		}
yy540:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy541;
		default:	goto yy2;
		}
yy541:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy542;
		case 'p':	goto yy545;
		case 's':	goto yy544;
		case 't':	goto yy543;
		default:	goto yy2;
		}
yy542:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy581;
		default:	goto yy2;
		}
yy543:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy573;
		default:	goto yy2;
		}
yy544:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy569;
		default:	goto yy2;
		}
yy545:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy547;
		case 'r':	goto yy546;
		default:	goto yy2;
		}
yy546:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy559;
		default:	goto yy2;
		}
yy547:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy548;
		default:	goto yy2;
		}
yy548:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy549;
		default:	goto yy2;
		}
yy549:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy550;
		default:	goto yy2;
		}
yy550:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy551;
		default:	goto yy2;
		}
yy551:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy552;
		default:	goto yy2;
		}
yy552:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy553;
		default:	goto yy2;
		}
yy553:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy554;
		default:	goto yy2;
		}
yy554:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy555;
		default:	goto yy2;
		}
yy555:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy556;
		default:	goto yy2;
		}
yy556:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy557;
		default:	goto yy2;
		}
yy557:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy558;
		default:	goto yy2;
		}
yy558:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy153;
		default:	goto yy2;
		}
yy559:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy560;
		default:	goto yy2;
		}
yy560:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy561;
		default:	goto yy2;
		}
yy561:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy562;
		default:	goto yy2;
		}
yy562:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy563;
		default:	goto yy2;
		}
yy563:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy564;
		default:	goto yy2;
		}
yy564:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy565;
		default:	goto yy2;
		}
yy565:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy566;
		default:	goto yy2;
		}
yy566:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy567;
		default:	goto yy2;
		}
yy567:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy568;
		default:	goto yy2;
		}
yy568:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy155;
		default:	goto yy2;
		}
yy569:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy570;
		default:	goto yy2;
		}
yy570:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy571;
		default:	goto yy2;
		}
yy571:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy572;
		default:	goto yy2;
		}
yy572:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy157;
		default:	goto yy2;
		}
yy573:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy574;
		default:	goto yy2;
		}
yy574:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy575;
		default:	goto yy2;
		}
yy575:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy576;
		default:	goto yy2;
		}
yy576:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy577;
		default:	goto yy2;
		}
yy577:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy578;
		default:	goto yy2;
		}
yy578:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy579;
		default:	goto yy2;
		}
yy579:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy580;
		default:	goto yy2;
		}
yy580:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy162;
		default:	goto yy2;
		}
yy581:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy582;
		default:	goto yy2;
		}
yy582:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy583;
		default:	goto yy2;
		}
yy583:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy584;
		default:	goto yy2;
		}
yy584:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy585;
		default:	goto yy2;
		}
yy585:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy586;
		default:	goto yy2;
		}
yy586:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy587;
		default:	goto yy2;
		}
yy587:
		yyaccept = 8;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy588;
		default:	goto yy165;
		}
yy588:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy589;
		default:	goto yy2;
		}
yy589:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy590;
		default:	goto yy2;
		}
yy590:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy591;
		default:	goto yy2;
		}
yy591:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy592;
		default:	goto yy2;
		}
yy592:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy593;
		default:	goto yy2;
		}
yy593:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy167;
		default:	goto yy2;
		}
yy594:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy595;
		default:	goto yy2;
		}
yy595:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy596;
		default:	goto yy2;
		}
yy596:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy597;
		default:	goto yy2;
		}
yy597:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy598;
		default:	goto yy2;
		}
yy598:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy599;
		default:	goto yy2;
		}
yy599:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy600;
		default:	goto yy2;
		}
yy600:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy601;
		default:	goto yy2;
		}
yy601:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy602;
		default:	goto yy2;
		}
yy602:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy603;
		default:	goto yy2;
		}
yy603:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy604;
		default:	goto yy2;
		}
yy604:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy39;
		default:	goto yy2;
		}
yy605:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy607;
		case 'n':	goto yy606;
		default:	goto yy2;
		}
yy606:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy689;
		default:	goto yy2;
		}
yy607:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy613;
		case 'd':	goto yy612;
		case 'g':	goto yy611;
		case 'p':	goto yy610;
		case 's':	goto yy609;
		case 't':	goto yy608;
		default:	goto yy2;
		}
yy608:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy681;
		default:	goto yy2;
		}
yy609:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy672;
		case 't':	goto yy671;
		default:	goto yy2;
		}
yy610:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy649;
		case 'r':	goto yy648;
		default:	goto yy2;
		}
yy611:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy635;
		default:	goto yy2;
		}
yy612:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy628;
		case 'o':	goto yy627;
		default:	goto yy2;
		}
yy613:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy614;
		default:	goto yy2;
		}
yy614:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy615;
		default:	goto yy2;
		}
yy615:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy616;
		default:	goto yy2;
		}
yy616:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy617;
		default:	goto yy2;
		}
yy617:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy618;
		default:	goto yy2;
		}
yy618:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy619;
		default:	goto yy2;
		}
yy619:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy620;
		default:	goto yy2;
		}
yy620:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy621;
		default:	goto yy2;
		}
yy621:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy622;
		default:	goto yy2;
		}
yy622:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy623;
		default:	goto yy2;
		}
yy623:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy624;
		default:	goto yy2;
		}
yy624:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy625;
		default:	goto yy2;
		}
yy625:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy626;
		default:	goto yy2;
		}
yy626:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy220;
		default:	goto yy2;
		}
yy627:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy632;
		default:	goto yy2;
		}
yy628:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy629;
		default:	goto yy2;
		}
yy629:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy630;
		default:	goto yy2;
		}
yy630:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy631;
		default:	goto yy2;
		}
yy631:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy196;
		default:	goto yy2;
		}
yy632:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy633;
		default:	goto yy2;
		}
yy633:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy634;
		default:	goto yy2;
		}
yy634:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy187;
		default:	goto yy2;
		}
yy635:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy636;
		default:	goto yy2;
		}
yy636:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy637;
		default:	goto yy2;
		}
yy637:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy638;
		default:	goto yy2;
		}
yy638:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy639;
		default:	goto yy2;
		}
yy639:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy640;
		default:	goto yy2;
		}
yy640:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy641;
		default:	goto yy2;
		}
yy641:
		yyaccept = 9;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy642;
		default:	goto yy199;
		}
yy642:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy643;
		default:	goto yy2;
		}
yy643:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy644;
		default:	goto yy2;
		}
yy644:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy645;
		default:	goto yy2;
		}
yy645:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy646;
		default:	goto yy2;
		}
yy646:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy647;
		default:	goto yy2;
		}
yy647:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy201;
		default:	goto yy2;
		}
yy648:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy661;
		default:	goto yy2;
		}
yy649:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy650;
		default:	goto yy2;
		}
yy650:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy651;
		default:	goto yy2;
		}
yy651:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy652;
		default:	goto yy2;
		}
yy652:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy653;
		default:	goto yy2;
		}
yy653:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy654;
		default:	goto yy2;
		}
yy654:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy655;
		default:	goto yy2;
		}
yy655:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy656;
		default:	goto yy2;
		}
yy656:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy657;
		default:	goto yy2;
		}
yy657:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy658;
		default:	goto yy2;
		}
yy658:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy659;
		default:	goto yy2;
		}
yy659:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy660;
		default:	goto yy2;
		}
yy660:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy206;
		default:	goto yy2;
		}
yy661:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy662;
		default:	goto yy2;
		}
yy662:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy663;
		default:	goto yy2;
		}
yy663:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy664;
		default:	goto yy2;
		}
yy664:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy665;
		default:	goto yy2;
		}
yy665:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy666;
		default:	goto yy2;
		}
yy666:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy667;
		default:	goto yy2;
		}
yy667:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy668;
		default:	goto yy2;
		}
yy668:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy669;
		default:	goto yy2;
		}
yy669:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy670;
		default:	goto yy2;
		}
yy670:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy208;
		default:	goto yy2;
		}
yy671:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy676;
		default:	goto yy2;
		}
yy672:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy673;
		default:	goto yy2;
		}
yy673:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy674;
		default:	goto yy2;
		}
yy674:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy675;
		default:	goto yy2;
		}
yy675:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy211;
		default:	goto yy2;
		}
yy676:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy677;
		default:	goto yy2;
		}
yy677:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy678;
		default:	goto yy2;
		}
yy678:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy679;
		default:	goto yy2;
		}
yy679:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy680;
		default:	goto yy2;
		}
yy680:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy213;
		default:	goto yy2;
		}
yy681:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy682;
		default:	goto yy2;
		}
yy682:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy683;
		default:	goto yy2;
		}
yy683:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy684;
		default:	goto yy2;
		}
yy684:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy685;
		default:	goto yy2;
		}
yy685:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy686;
		default:	goto yy2;
		}
yy686:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy687;
		default:	goto yy2;
		}
yy687:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy688;
		default:	goto yy2;
		}
yy688:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy218;
		default:	goto yy2;
		}
yy689:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy690;
		default:	goto yy2;
		}
yy690:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy691;
		case 'h':	goto yy692;
		default:	goto yy2;
		}
yy691:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy696;
		default:	goto yy2;
		}
yy692:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy693;
		default:	goto yy2;
		}
yy693:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy694;
		default:	goto yy2;
		}
yy694:
		yych = *++opt;
		switch (yych) {
		case 'k':	goto yy695;
		default:	goto yy2;
		}
yy695:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy224;
		default:	goto yy184;
		}
yy696:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy697;
		default:	goto yy2;
		}
yy697:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy698;
		default:	goto yy2;
		}
yy698:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy699;
		default:	goto yy2;
		}
yy699:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy222;
		default:	goto yy186;
		}
yy700:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy701;
		default:	goto yy2;
		}
yy701:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy702;
		default:	goto yy2;
		}
yy702:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy703;
		default:	goto yy2;
		}
yy703:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy704;
		default:	goto yy2;
		}
yy704:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy705;
		default:	goto yy2;
		}
yy705:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy706;
		default:	goto yy2;
		}
yy706:
		yyaccept = 6;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy707;
		case '=':	goto yy125;
		default:	goto yy122;
		}
yy707:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy709;
		case 's':	goto yy708;
		default:	goto yy2;
		}
yy708:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy718;
		default:	goto yy2;
		}
yy709:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy710;
		case 'u':	goto yy711;
		default:	goto yy2;
		}
yy710:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy716;
		default:	goto yy2;
		}
yy711:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy712;
		default:	goto yy2;
		}
yy712:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy713;
		default:	goto yy2;
		}
yy713:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy714;
		default:	goto yy2;
		}
yy714:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy715;
		default:	goto yy2;
		}
yy715:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy131;
		default:	goto yy130;
		}
yy716:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy717;
		default:	goto yy2;
		}
yy717:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy135;
		default:	goto yy134;
		}
yy718:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy719;
		default:	goto yy2;
		}
yy719:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy720;
		default:	goto yy2;
		}
yy720:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy721;
		default:	goto yy2;
		}
yy721:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy722;
		default:	goto yy2;
		}
yy722:
		yyaccept = 7;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy723;
		default:	goto yy138;
		}
yy723:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy724;
		default:	goto yy2;
		}
yy724:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy725;
		default:	goto yy2;
		}
yy725:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy726;
		default:	goto yy2;
		}
yy726:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy141;
		default:	goto yy2;
		}
yy727:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy728;
		default:	goto yy2;
		}
yy728:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy729;
		default:	goto yy2;
		}
yy729:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy730;
		default:	goto yy2;
		}
yy730:
		yych = *++opt;
		switch (yych) {
		case 'b':	goto yy735;
		case 'g':	goto yy731;
		case 'p':	goto yy734;
		case 's':	goto yy733;
		case 't':	goto yy732;
		default:	goto yy2;
		}
yy731:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy775;
		default:	goto yy2;
		}
yy732:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy767;
		default:	goto yy2;
		}
yy733:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy763;
		default:	goto yy2;
		}
yy734:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy741;
		case 'r':	goto yy740;
		default:	goto yy2;
		}
yy735:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy736;
		default:	goto yy2;
		}
yy736:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy737;
		default:	goto yy2;
		}
yy737:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy738;
		default:	goto yy2;
		}
yy738:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy739;
		default:	goto yy2;
		}
yy739:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy101;
		default:	goto yy2;
		}
yy740:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy753;
		default:	goto yy2;
		}
yy741:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy742;
		default:	goto yy2;
		}
yy742:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy743;
		default:	goto yy2;
		}
yy743:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy744;
		default:	goto yy2;
		}
yy744:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy745;
		default:	goto yy2;
		}
yy745:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy746;
		default:	goto yy2;
		}
yy746:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy747;
		default:	goto yy2;
		}
yy747:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy748;
		default:	goto yy2;
		}
yy748:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy749;
		default:	goto yy2;
		}
yy749:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy750;
		default:	goto yy2;
		}
yy750:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy751;
		default:	goto yy2;
		}
yy751:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy752;
		default:	goto yy2;
		}
yy752:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy106;
		default:	goto yy2;
		}
yy753:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy754;
		default:	goto yy2;
		}
yy754:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy755;
		default:	goto yy2;
		}
yy755:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy756;
		default:	goto yy2;
		}
yy756:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy757;
		default:	goto yy2;
		}
yy757:
		yych = *++opt;
		switch (yych) {
		case 'c':	goto yy758;
		default:	goto yy2;
		}
yy758:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy759;
		default:	goto yy2;
		}
yy759:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy760;
		default:	goto yy2;
		}
yy760:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy761;
		default:	goto yy2;
		}
yy761:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy762;
		default:	goto yy2;
		}
yy762:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy108;
		default:	goto yy2;
		}
yy763:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy764;
		default:	goto yy2;
		}
yy764:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy765;
		default:	goto yy2;
		}
yy765:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy766;
		default:	goto yy2;
		}
yy766:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy110;
		default:	goto yy2;
		}
yy767:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy768;
		default:	goto yy2;
		}
yy768:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy769;
		default:	goto yy2;
		}
yy769:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy770;
		default:	goto yy2;
		}
yy770:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy771;
		default:	goto yy2;
		}
yy771:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy772;
		default:	goto yy2;
		}
yy772:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy773;
		default:	goto yy2;
		}
yy773:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy774;
		default:	goto yy2;
		}
yy774:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy115;
		default:	goto yy2;
		}
yy775:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy776;
		default:	goto yy2;
		}
yy776:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy777;
		default:	goto yy2;
		}
yy777:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy778;
		default:	goto yy2;
		}
yy778:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy779;
		default:	goto yy2;
		}
yy779:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy780;
		default:	goto yy2;
		}
yy780:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy781;
		default:	goto yy2;
		}
yy781:
		yych = *++opt;
		switch (yych) {
		case '-':	goto yy782;
		default:	goto yy2;
		}
yy782:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy783;
		default:	goto yy2;
		}
yy783:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy784;
		default:	goto yy2;
		}
yy784:
		yych = *++opt;
		switch (yych) {
		case 'l':	goto yy785;
		default:	goto yy2;
		}
yy785:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy786;
		default:	goto yy2;
		}
yy786:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy787;
		default:	goto yy2;
		}
yy787:
		yych = *++opt;
		switch (yych) {
		case 'r':	goto yy119;
		default:	goto yy2;
		}
yy788:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy789;
		default:	goto yy2;
		}
yy789:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy790;
		default:	goto yy2;
		}
yy790:
		yych = *++opt;
		switch (yych) {
		case 'g':	goto yy791;
		default:	goto yy2;
		}
yy791:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy792;
		default:	goto yy2;
		}
yy792:
		yyaccept = 4;
		yych = *(marker = ++opt);
		switch (yych) {
		case '-':	goto yy793;
		case '=':	goto yy47;
		default:	goto yy45;
		}
yy793:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy794;
		default:	goto yy2;
		}
yy794:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy795;
		case 'u':	goto yy796;
		default:	goto yy2;
		}
yy795:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy801;
		default:	goto yy2;
		}
yy796:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy797;
		default:	goto yy2;
		}
yy797:
		yych = *++opt;
		switch (yych) {
		case 'p':	goto yy798;
		default:	goto yy2;
		}
yy798:
		yych = *++opt;
		switch (yych) {
		case 'u':	goto yy799;
		default:	goto yy2;
		}
yy799:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy800;
		default:	goto yy2;
		}
yy800:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy53;
		default:	goto yy52;
		}
yy801:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy802;
		default:	goto yy2;
		}
yy802:
		yych = *++opt;
		switch (yych) {
		case '=':	goto yy57;
		default:	goto yy56;
		}
yy803:
		yych = *++opt;
		switch (yych) {
		case 'n':	goto yy804;
		default:	goto yy2;
		}
yy804:
		yych = *++opt;
		switch (yych) {
		case 's':	goto yy805;
		default:	goto yy2;
		}
yy805:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy42;
		default:	goto yy2;
		}
yy806:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy814;
		default:	goto yy2;
		}
yy807:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy808;
		default:	goto yy2;
		}
yy808:
		yych = *++opt;
		switch (yych) {
		case 'o':	goto yy809;
		default:	goto yy2;
		}
yy809:
		yych = *++opt;
		switch (yych) {
		case 'm':	goto yy810;
		default:	goto yy2;
		}
yy810:
		yych = *++opt;
		switch (yych) {
		case 'a':	goto yy811;
		default:	goto yy2;
		}
yy811:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy812;
		default:	goto yy2;
		}
yy812:
		yych = *++opt;
		switch (yych) {
		case 'e':	goto yy813;
		default:	goto yy2;
		}
yy813:
		yych = *++opt;
		switch (yych) {
		case 'd':	goto yy91;
		default:	goto yy2;
		}
yy814:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy815;
		default:	goto yy2;
		}
yy815:
		yych = *++opt;
		switch (yych) {
		case 't':	goto yy816;
		default:	goto yy2;
		}
yy816:
		yych = *++opt;
		switch (yych) {
		case 'i':	goto yy817;
		default:	goto yy2;
		}
yy817:
		yych = *++opt;
		switch (yych) {
		case 'v':	goto yy818;
		default:	goto yy2;
		}
yy818:
		++opt;
		switch ((yych = *opt)) {
		case 'e':	goto yy88;
		default:	goto yy2;
		}
	}
#line 1960 "cplus2asp.r2c"

}

OptionStatus parseConfigOptions(Config& outConf){


	namespace btree = boost::property_tree;

	try{
		const char *homedir;
		Config::Mode mode;
		bool tmpBool;

		if ((homedir = getenv("HOME")) == NULL) {
		    homedir = getpwuid(getuid())->pw_dir;
		}

		std::string dir (homedir);
		btree::ptree pt;

		read_ini(dir.append("/.cplus2asp.config"),pt);	

		for (auto& section:pt){
			//Check for cplus2asp section
			if(boost::iequals(section.first, "cplus2asp")){
				for (auto& key : section.second){
					char const* tmpptr = key.second.get_value<std::string>().c_str();	

					switch(parseOption(key.first.c_str(), tmpptr)){
						case OPT_LANG:
							Config::Language l;
							tmpptr = key.second.get_value<std::string>().c_str();	
							if (!outConf.parseLang(tmpptr, l)) {
								utils::error("'%s' is not a supported language specification.", 0, true, tmpptr);
								return OPT_STAT_BAD_ARG;
							}
							if (outConf.lang(l)) {
								utils::warning("Detected a redefition of the input language.",true,tmpptr);
							}
							break;

						case OPT_MODE_SELECT:
							tmpBool = false;

							tmpptr = key.second.get_value<std::string>().c_str();	
							if (!strcmp(tmpptr,ARG_MODE_STATIC_MANUAL)) {
								mode = Config::MODE_STATIC_MANUAL;
							} else if (!strcmp(tmpptr,ARG_MODE_STATIC_AUTO)) {
								mode = Config::MODE_STATIC_AUTO;
							} else if (!strcmp(tmpptr,ARG_MODE_INCREMENTAL)) {
								mode = Config::MODE_INCREMENTAL;
							} else if (!strcmp(tmpptr,ARG_MODE_REACTIVE)) {
								mode = Config::MODE_INCREMENTAL;
							} else {
								utils::error("Unexpected value '%s'. Expected a mode option (one of '%s', '%s', '%s', or '%s'). Exiting.",true,0,
										tmpptr, ARG_MODE_STATIC_AUTO, ARG_MODE_STATIC_MANUAL, ARG_MODE_INCREMENTAL, OPT_MODE_REACTIVE);
								return OPT_STAT_BAD_ARG;
							}

							if (outConf.mode(mode)) {
								utils::warning("Detected a redefinition of the program's running mode. Continuing with value '%s'.", true, tmpptr);
							}

							break;
						
						case OPT_MODE_STATIC_AUTO:
							tmpptr = key.second.get_value<std::string>().c_str();	
							if (outConf.mode(Config::MODE_STATIC_AUTO)) {
								utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'static-auto'.", true);
							}
							break;
						
						case OPT_MODE_STATIC_MANUAL:
							tmpptr = key.second.get_value<std::string>().c_str();	
							if (outConf.mode(Config::MODE_STATIC_MANUAL)) {
								utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'static-manual'.", true);
							}
							break;
						
						case OPT_MODE_INCREMENTAL:
							tmpptr = key.second.get_value<std::string>().c_str();	
							if (outConf.mode(Config::MODE_INCREMENTAL)) {
								utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'incremental'", true);
							}
							break;
						
						case OPT_MODE_REACTIVE:
							tmpptr = key.second.get_value<std::string>().c_str();	
							if (outConf.mode(Config::MODE_REACTIVE)) {
								utils::warning("Detected a redefinition of the program's running mode. Continuing with value 'reactive'.", true);
							}
							break;
					}
				}
			}
			if(boost::iequals(section.first, "clingo")){
				for (auto& key : section.second){
					char const* tmpptr = key.second.get_value<std::string>().c_str();	
					//TODO
				}
			}
		}
	}

	catch(const btree::ptree_error &e){
        std::cout << e.what() << std::endl;
        return OPT_STAT_BAD_ARG;
    }

    return OPT_STAT_OK;

    

}

/**
 * Shows the help dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showHelp(std::string const& execName, std::ostream& out) {
	out   << "Usage: " << execName << " <INPUT_FILES> [<OPTIONS>] [<CONSTANTS>] [<NUM_SOLUTIONS>]" << std::endl
		  << std::endl
		  << "Calls cplus2asp.bin (translator), f2lp (pre-processor), gringo (grounder)," << std::endl
		  << "clasp (solver), and as2transition (post-processor) on the input files" << std::endl
		  << "(CCalc-style files that have been translated to ASP/f2lp syntax), adding " << std::endl
		  << "\"standard\" CCalc to ASP translation support files and outputting the results " << std::endl
		  << "from as2transition." << std::endl
		  << std::endl
		  << "  <INPUT_FILES> --------- A series of files in CCalc, ASP, or f2lp syntax." << std::endl
		  << "                          At least one input file is required." << std::endl
		  << "                          Any input files that have extensions \".f2lp\" or \".lp\"" << std::endl
		  << "                          will automatically not be passed to the translator." << std::endl
		  << std::endl
		  << "  <OPTIONS> ------------- Optional arguments that change the program's behavior." << std::endl
		  << std::endl
		  << "  <CONSTANTS> ----------- Constant definitions that are passed to the grounder." << std::endl
		  << "                          There are three special constants that are often seen in" << std::endl
		  << "                          CCalc programs, and so can be useful to manually set." << std::endl
		  << "                          These are not required to be defined if special \"hint\"" << std::endl
		  << "                          comments are placed in the output from the translator." << std::endl
		  << "                          * maxAdditive - The maximum additive integer (only needed if" << std::endl
		  << "                                          using additive fluents/actions)." << std::endl
		  << "                          * maxstep ----- The maximum time step to consider." << std::endl
		  << "                          * minstep ----- The minimum time step to consider." << std::endl
		  << "                          * query   ----- The query number (i.e., label) to select." << std::endl
		  << std::endl
		  << "  <NUM_SOLUTIONS> ------- The desired number of solutions for the solver to find, or 'all'." << std::endl
		  << "                          This should be a non-negative integer (0 or greater)." << std::endl
		  << "                          If not specified, defaults to 1." << std::endl
		  << std::endl
		  << "Normal Program Options:" << std::endl
		  << "  -auto" << std::endl
		  << "  --automated ----------- Makes the program run in automated mode, so it won't prompt" << std::endl
		  << "                          or ask for any information from the user." << std::endl
		  << std::endl
		  << "  <CONST>=<VALUE>, -c <CONST>=<VALUE>" << std::endl
		  << "  --const <CONST>=<VALUE> Declares a constant & value pair to pass to gringo." << std::endl
		  << "                          You will probably need to at least declare values for" << std::endl
		  << "                          the constants maxstep, query, and possibly maxAdditive." << std::endl
		  << std::endl
		  << "  --help ---------------- Shows this usage message." << std::endl
		  << "  -v" << std::endl
		  << "  --version ------------- Outputs version information." << std::endl
		  << std::endl
		  << "  -m <MODE, -m=<MODE>, --mode <MODE>" << std::endl
		  << "  --mode=<MODE> --------- Sets the program to run in the specified running mode." << std::endl
		  << "                          <MODE> can be one of the following: " << std::endl
		  << "                          * static-auto --- uses a static translation and automatically " << std::endl
		  << "                                            advances the queries maximum time step." << std::endl
		  << "                          * static-manual - uses a static translation and queries the " << std::endl
		  << "                                            user each time a solution isn't found for a " << std::endl
		  << "                                            new time step." << std::endl
		  << "                          * incremental --- [default] uses an incremental translation " << std::endl
		  << "                                            and solver for better efficiency while " << std::endl
		  << "                                            ranging over maxsteps in a query." << std::endl
		  << "                          * reactive ------ uses a incremental translation and reactive " << std::endl
		  << "                                            solver in order to dynamically adding abnormality " << std::endl
		  << "                                            constants during execution."  << std::endl
		  << std::endl
		  << " -q <QUERY>, -q=<QUERY>, --query <QUERY>, query=<QUERY>"  << std::endl
		  << " --query=<QUERY> -------- Sets the query to use from those available in the C+ domain. " << std::endl
		  << "                          <QUERY> should be a positive integer and should be defined in " << std::endl
		  << "                          the domain file." << std::endl
		  << std::endl
		  << " -max <STEP>, -max=<STEP>, --maxstep <STEP>, maxstep=<STEP>" << std::endl
		  << " --maxstep=<STEP> ------- Sets the maximum step to solve for to <STEP>. <STEP> must be a " << std::endl
		  << "                          positive integer or a finite positive range (i.e. '1..5')." << std::endl
		  << "                          A range is seen as shorthand for a combined minimum and maximum " << std::endl
		  << "                          step definition." << std::endl
		  << std::endl
		  << " -min <STEP>, -min=<STEP>, --minstep <STEP>, minstep=<STEP>" << std::endl
		  << " --minstep=<STEP> ------- Sets the minimum step to solve for to <STEP>. <STEP> must be a " << std::endl
		  << "                          positive integer." << std::endl
		  << std::endl
		  << " -nd, --no-domain ------- Suppresses the generation of domain-enforcing rules for each " << std::endl
		  << "                          non-additive constant." << std::endl
		  << std::endl
		  << " -nad, " << std::endl
		  << " --no-additive-domain --- Suppresses the generation of domain-enforcing rules for each " << std::endl
		  << "                          additive constants." << std::endl
		  << std::endl

// TODO: Uncomment this when we have the reactive bridge complete w/ remote program support.
#ifndef NO_REACTIVE_BRIDGE
#if 0
		  << " -p <PORT]" << std::endl
		  << " --port [PORT] ---------- Sets the port used to connect with external client programs instead " << std::endl
		  << "                          of using the console to gather online input. This option is only " << std::endl
		  << "                          valid in reactive mode." << std::endl
#endif
		  << " -i <PORT>, -i=<PORT>, --internal-port <PORT>" << std::endl
		  << " --internal-port=<PORT> - Sets the port used for internal communication between the " << std::endl
		  << "                          reactive solver and bridge. This option is only valid in " << std::endl
		  << "                          reactive mode." << std::endl
#else
		  << " -p <PORT>, -p=<PORT>, --port <PORT>" << std::endl
		  << " --port=<PORT> ---------- Sets the port used to connect with external client programs." << std::endl
#endif
		  << std::endl
		  << " -na[=<VALUE>]" << std::endl
		  << " --none-alias[=<VALUE>]   Indicates that we should simulate 'none' with <VALUE> [default: '" << DEF_NONE_HACK_VAL << "']" << std::endl
		  << "                          This is helpful for circumventing a bug in Gringo 3.0.4 that " << std::endl
		  << "                          sometimes prevents domains from properly grounding due to " << std::endl
		  << "                          unification issues." << std::endl
		  << std::endl
		  << " -s[=<BOOLEAN>]" << std::endl
		  << " --shift[=<BOOLEAN>] ---- Sets whether to allow the solver to shift disjunction in the head of a rule " << std::endl
		  << "                          generated by the pre-processor into the body. This is useful when " << std::endl
		  << "                          the preprocessor generate disjunctive rules and a disjunctive " << std::endl
		  << "                          solver isn't available. May not be guaranteed to preserve stable " << std::endl
		  << "                          models." << std::endl
		  << std::endl
		  << " --stats ---------------- Indicates additional solving statistics should be requested from" << std::endl
		  << "                          the solver and displayed after each solver run." << std::endl
		  << std::endl
		  << " --language=<LANG> ------ Sets the input language that will be accepted for translation/running." << std::endl
		  << "                          <LANG> can be one of the following:" << std::endl
		  << "                          * c+, C+ ---------- [default] The action language C+." << std::endl
 		  << "                          * bc, BC ---------- The action language BC." << std::endl
		  << "                          * bc+, BC+ -------- An experimental extension to language BC." << std::endl
		  << "                          * mvpf, MVPF ------ Multi-valued propositional formulas." << std::endl
		  << std::endl
		  << "Extra Program Options:" << std::endl
		  << "  Options with <PROG> or <PROGRAM> in their name affect individual" << std::endl
		  << "  programs in the tool chain, depending on <PROG> or <PROGRAM>'s value." << std::endl
		  << "  Any option with <PROG> in its name should have <PROG> replaced with one of:" << std::endl
		  << "    gr (grounder), pre (pre-processor), post (post-processor), so (solver)," << std::endl
		  << "    trans (translator), or br (reactive bridge)." << std::endl
		  << "  Replace <PROGRAM> in the applicable options with one of the following:" << std::endl
		  << "    grounder, pre-processor, post-processor, solver, translator, or bridge." << std::endl
		  << std::endl
		  << "  -<PROG> <PATH>, -<PROG>=<PATH>, --<PROGRAM> <PATH> " << std::endl
		  << "  --<PROGRAM>=<PATH> ------ Gives a new path to the desired tool chain program." << std::endl
		  << std::endl
		  << "  -<PROG>opt <OPTS>, -<PROG>opt=<OPTS>, --<PROGRAM>-opts <OPTS>" << std::endl
		  << "  --<PROGRAM>-opts=<OPTS> -- Passes <OPTS> to the given tool chain program." << std::endl
		  << std::endl
		  << "  -<PROG>out <FILE>, -<PROG>out=<FILE>, --<PROGRAM>-output <FILE>" << std::endl
		  << "  --[PROGRAM]-output=<FILE> Write the output of the specified tool to <FILE>." << std::endl
		  << std::endl
		  << "  -from<PROG> " << std::endl
		  << "  --from-<PROGRAM> -------- Starts running the tool chain from the given program." << std::endl
		  << std::endl
		  << "  -just<PROG>" << std::endl
		  << "  --just-<PROGRAM> -------- Removes all but the given program from the tool chain." << std::endl
		  << std::endl
		  << "  -to<PROG>" << std::endl
		  << "  --to-<PROGRAM> ---------- Stops running the tool chain after the given program." << std::endl
		  << std::endl
		  << " -symtab <FILE>, -symtab=<FILE>, --symbol-table=<FILE> " << std::endl
		  << " --symbol-table=<FILE> -- Writes the program's symbol table to <FILE> for use in other programs." << std::endl
		  << std::endl
		  << "  Example: " << execName << " myProgram.cp" << std::endl
		  << "           would translate and process the file \"myProgram.cp\"," << std::endl
		  << "           interactively asking which query from the file to run, returning" << std::endl
		  << "           the first solution found (if any)." << std::endl
		  << "  Example: " << execName << " myProgram.cp query=1 2" << std::endl
		  << "           does the same as above, except it automatically runs Query 1" << std::endl
		  << "           (assuming it can find or derive maxstep), and tries to find two" << std::endl
		  << "           solutions to the query." << std::endl
		  << "  Example: " << execName << " myProgram.cp query=1 maxstep=3 -so cmodels 2" << std::endl
		  << "           would do the same as above, but it changes the solver to cmodels" << std::endl
		  << "           and forces maxstep to be 3." << std::endl
		  << "  Example: " << execName << " myProgram.f2lp --just-pre-processor" << std::endl
		  << "           skips running the translator because the input file has" << std::endl
		  << "           the .f2lp extension, just running f2lp (the pre-processor)" << std::endl
		  << "           on the contents of \"myProgram.f2lp\", outputting the results." << std::endl;
	return out;
}

/**
 * Shows the version dialog.
 * @param execName - The name of the executable we are running.
 * @param out - The output stream to send the help message to.
 * @return out.
 */
std::ostream& showVersion(std::string const& execName, std::ostream& out) {
	// Show version information and quit.
	out << execName << " version " << VERSION_MAJOR;
	out << "." << VERSION_MINOR;
	if(VERSION_REV > 0) { out << "." << VERSION_REV; }
	out << std::endl;
	return out;
}




// [interactive] Queries the user to select an appropriate query number (and optional solution count) among the defined queries.
bool queryUserForQuery(Config const& config, Config::RunConfig& runconfig, bool first)
{
	std::string line, value;
	Config::Query const* query;
	Interpreter::Action action;
	bool goodInput = false;
	std::pair<unsigned int, unsigned int> steps;


	if (first) {
		showQueries(config, std::cout);
		std::cout << std::endl;
		Interpreter::showHelp(std::cout);
	}

	while (!goodInput) {

		// Get user input
		goodInput = true;
		query = NULL;

		do {
			std::cout << "$- ";
			std::getline(std::cin,line);

			if (std::cin.eof()) {
				// gracefully handle ctrl-d
				return false;
			}


			// Interpret the command.
			action = Interpreter::interpret(line, value);
			switch (action) {
			case Interpreter::SHOW_QUERIES:
				showQueries(config, std::cout);
				break;
			case Interpreter::SHOW_CONFIG:
				showConfig(config, runconfig, std::cout);
				break;
			case Interpreter::SET_QUERY:

				// Scan through the queries and try to find the one they (hopefully) selected.
				for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries() && !query; it++) {
					if (it->second.cmd == value) {
						query = &(it->second);
					}
				}

				// make sure we got a query...
				if (!query) {
					goodInput = false;
					std::cout << "Invalid query selection.";
				}

				break;

			case Interpreter::SET_NUMSOLN:
				if (value == CONST_DEFAULT) runconfig.numSoln = Config::UNDEFINED;
				else goodInput = utils::from_string(runconfig.numSoln, value);
				break;

			case Interpreter::SET_MAXSTEP:
				if (value == CONST_DEFAULT) runconfig.maxstep = Config::UNDEFINED;
				else {
					steps = Config::parseMaxstep(value);
					if (steps.second == Config::UNDEFINED) goodInput = false;
					else {
						if (steps.first != Config::UNDEFINED) runconfig.minstep = steps.first;
						runconfig.maxstep = steps.second;
	
						if (runconfig.minstep == Config::UNDEFINED) {
							std::cout << "Autosetting minstep to 0." << std::endl;
							runconfig.minstep = 0;
						}
					}
				}

				break;

			case Interpreter::SET_MINSTEP:
				if (value == CONST_DEFAULT) runconfig.minstep = Config::UNDEFINED;
				else goodInput = utils::from_string(runconfig.minstep, value);
				break;
		
	
			case Interpreter::SHOW_HELP:
				Interpreter::showHelp(std::cout);
				break;

			case Interpreter::EXIT:
				// signal the exit.
				return false;
			default:
				// bad input
				goodInput = false;
				break;
			}

		} while ( goodInput && !query );

		if (!goodInput) {
			std::cout << "Error: Invalid choice.\n";
			std::cout << "Type 'help' to list the available commands.\n";
		}
	} while (!goodInput && !query);

	runconfig.query = query->cmd;
	return true;
}

// Displays the queries which have been found.
void showQueries(Config const& config, std::ostream& output) {

	output << "The following queries are available to run:" << std::endl << std::endl;


	for (Config::QueryMap::const_iterator it = config.beginQueries(); it != config.endQueries(); it++) {
		output << '\t' << std::setw(15) << std::right << it->second.cmd << ": " << std::setw(20) << std::left << it->second.name;

		if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)
				|| (!config.customConfigOpt(Config::OPT_MAXSTEP) && it->second.maxstep != Config::UNDEFINED) ) {
			output << " [ ";
	
			if ((!config.customConfigOpt(Config::OPT_MINSTEP) && it->second.minstep != Config::UNDEFINED)) {
				output << it->second.minstep;
			} else {
				output << "0";
			}


			if (it->second.maxstep == Config::UNDEFINED)
				output << "...";
			else if ((it->second.minstep == Config::UNDEFINED && it->second.maxstep != 0)
					|| it->second.minstep != it->second.maxstep)
				output << ".." << it->second.maxstep;

			output << " ]";
		}
		output << std::endl;
	}

}

// Displays the current run-time configuration for the system.
void showConfig(Config const& config, Config::RunConfig const& runconfig, std::ostream& output) {
	unsigned int tmp, tmp2;

	// TODO: This REALLY needs to be cleaned up.

	output << "Current configuration:\n\n";

	// translation mode
	output << "\t\t" << std::setw(30) << std::left << "Translation Mode:";

	output << std::setw(20) << std::left;
	switch (config.mode()) {
	case Config::MODE_INCREMENTAL:
		output << "Incremental";
		break;

	case Config::MODE_REACTIVE:
		output << "Reactive";
		break;

	case Config::MODE_STATIC_AUTO:
		output << "Static (auto)";
		break;

	case Config::MODE_STATIC_MANUAL:
		output << "Static (manual)";
		break;
	default:
		output << "Unknown";
		break;
	}
 	output << std::endl;

	// number of solutions
	tmp2 = (config.intConfigOpt(Config::OPT_NUM_SOLN) != Config::UNDEFINED) ? config.intConfigOpt(Config::OPT_NUM_SOLN) : 1;
	tmp = (runconfig.numSoln != Config::UNDEFINED) ? runconfig.numSoln : tmp2;

	output << "\t\t" << std::setw(30) << std::left << "Number of solutions:";

	output << std::setw(20) << std::left;
	if (tmp) output << tmp;
	else output << "all";

	output << "[default: ";
 	if (tmp2) output << tmp2;
	else output << "all";
	output << " ]\n";

	// maximum soln step
	tmp2 = config.intConfigOpt(Config::OPT_MAXSTEP);
	tmp = (runconfig.maxstep != Config::UNDEFINED) ? runconfig.maxstep : tmp2;

	output << "\t\t" << std::setw(30) << std::left << "Maximum solution step:";
	
	output << std::setw(20) << std::left;
	if (tmp == Config::INF) output << CONST_MAXSTEP_INFINITE;
	else if (tmp != Config::UNDEFINED) output << tmp;
	else output << "query selected";
	
	output << "[default: ";
	if (tmp2 == Config::INF) output << CONST_MAXSTEP_INFINITE;
	else if (tmp2 != Config::UNDEFINED) output << tmp2;
	else output << "query selected";
	output << " ]\n";


	// minimum soln step	
	tmp2 = config.intConfigOpt(Config::OPT_MINSTEP);
	tmp = (runconfig.minstep != Config::UNDEFINED) ? runconfig.minstep : tmp2;
	
	output << "\t\t" << std::setw(30) << std::left << "Minimum solution step:";
	
	output << std::setw(20) << std::left;
	if (tmp != Config::UNDEFINED) output << tmp;
	else output << "query selected";
	
	output << "[default: ";
	if (tmp2 != Config::UNDEFINED) output << tmp2;
	else output << "query selected";
	output << " ]\n";
	 
}

// Asks the user to select a max step.
unsigned int queryUserForConstant(Config const& config, std::string const& constant, unsigned int defVal) {
	unsigned int ret = Config::UNDEFINED;
	std::string line;
	bool goodInput = false;

	while (!goodInput) {

		// Prompt user input
		std::cout << "Please select a (non-negative) value for the " << constant << ". You may input 'exit' to exit the program." << std::endl;
		std::cout << "Selected value";
		if (defVal != Config::UNDEFINED) std::cout << " [" << defVal << "]";
		std::cout << ": ";



		std::getline(std::cin,line);
		line = utils::trimWhitespace(line);

		// Make sure they don't want to exit.
		if (line == EXIT_CMD) {
			// crap, they do. returning UNDEFINED will indicate this.
			goodInput = true;
			ret = Config::UNDEFINED;
		}
		// Check if they want to go for a default value
		else if (defVal != Config::UNDEFINED && line == "") {
			ret = defVal;
			goodInput = true;
		}
		// Check if they have provided any other valid input...
		else if (utils::from_string(ret, line)) {
			goodInput = true;
		}

		if (!goodInput) {
			std::cout << "Error: Invalid selection." << std::endl;
		}

	}

	return ret;
}

int runTool(Config const& config, Config::Toolchain tool, std::string const& name, Config::RunConfig const* subconfig) {
	
	int ret = TC_STAT_TOOLSKIPPED;
	
	if (!config.run(tool)) {
		utils::debug("Skipping %s execution.", true, name.c_str());
	} 
	else if (!config.cumulativeInputCount(tool) && tool != Config::TC_REACTIVE_BRIDGE) {
		utils::pragma("No input files for the %s have been specified. Skipping it.", true, name.c_str());
	} 
	else {
	// Run the translator...
	//		std::string tmpCmd = config.compileCommandLine(tool, subconfig);
		std::list<std::string> arglist;
		config.compileArgs(tool, arglist, subconfig);

		std::vector<std::string> tempVec (arglist.size());
		int i = 0;
		for (std::list<std::string>::iterator it=arglist.begin(); it != arglist.end(); ++it)
    		tempVec.at(i++) = *it;

		utils::debug("Running the '%s' (program: '%s') with command: '%s'",true,name.c_str(), config.command(tool).c_str(), config.compileCommandLine(tool, subconfig).c_str());


		bp::context ctx;
		ctx.environment = bp::self::get_environment();
		if (tool == Config::TC_REACTIVE_BRIDGE) {
			ctx.stdin_behavior  = bp::inherit_stream();
			ctx.stdout_behavior = bp::inherit_stream();
			ctx.stderr_behavior = bp::inherit_stream();
		} 
		else if (config.mode() != Config::MODE_REACTIVE || tool != Config::TC_SOLVER) {
			ctx.stdin_behavior  = bp::close_stream();
			ctx.stdout_behavior = bp::capture_stream();
			ctx.stderr_behavior = bp::capture_stream();
		}
		else {
			ctx.stdin_behavior  = bp::inherit_stream();
			ctx.stdout_behavior = bp::silence_stream();
			ctx.stderr_behavior = bp::inherit_stream();

		}
		
		
		bp::child c = bp::launch(bp::find_executable_in_path(config.command(tool)), arglist, ctx);

		if (tool == Config::TC_REACTIVE_BRIDGE) {
			bp::status s = c.wait();
			if (s.exited()) ret = s.exit_status();
			else ret = TC_STAT_EXEC_ERR;
		} 
		else if (config.mode() != Config::MODE_REACTIVE || tool != Config::TC_SOLVER) {
			
			std::ofstream outstream(config.output(tool));
			std::ofstream errstream(config.errFile());



			if (!outstream.good()) {
				if (config.customOut(tool))
					utils::error("Unable to open '%s' for writing.", true, 0, config.output(tool).c_str());
				else
					utils::error("Unable to open temporary file '%s' for writing.", true, 0, config.output(tool).c_str());
				return TC_STAT_IO_ERR;
			}


			if (!errstream.good()) {
				utils::error("Unable to open temporary file '%s' for writing.", true, 0, config.errFile().c_str());
				return TC_STAT_IO_ERR;
			}


			// write out data
			copy(std::istreambuf_iterator<char>(c.get_stdout()), std::istreambuf_iterator<char>(),
				std::ostreambuf_iterator<char>(outstream));
			copy(std::istreambuf_iterator<char>(c.get_stderr()), std::istreambuf_iterator<char>(),
				std::ostreambuf_iterator<char>(errstream));

			bp::status s = c.wait();
			if (s.exited()) ret = s.exit_status();
			else ret = TC_STAT_EXEC_ERR;


	/*					try {
					int tmp = bp::wait_for_exit(c);
					ret = BOOST_PROCESS_EXITSTATUS(tmp);
				} catch (boost::system::system_error& e) {
					utils::debug("Caught exception '%s'.", true, e.what());
					ret = TC_STAT_EXEC_ERR;
				} */

			outstream.close();
			errstream.close();


		} 
		else 
			ret = TC_STAT_BG;
}


// TODO: Do I need to close the sink?



utils::debug("Command exited with status '%d'.", true, ret);

if (!processErrors(config, tool, config.errFile())) {
	utils::warning("Could not read from the error stream file.", true);
}

//		int stat = system(tmpCmd.c_str());
//		ret = WEXITSTATUS(stat);

	return ret;
}

/**
 * @brief Processes the provided error file applying any error filters and printing the rest.
 * @param config The system configuration.
 * @param tool The tool that generated the error file.
 * @param file The error file.
 * @return True if the file exists and was successfully opened, false otherwise.
 */
bool processErrors(Config const& config, Config::Toolchain tool, std::string const& file) {
	std::ifstream in(file.c_str());
	std::string line;
	bool show, unificationError = false;

	if (in.fail()) {
		return false;
	}

	while (std::getline(in, line)) {
		show = true;

		switch (tool) {
		case Config::TC_TRANSLATOR:
			
			break;
		case Config::TC_PREPROC:

			break;
		// case Config::TC_GROUNDER:

		// 	break;
		case Config::TC_SOLVER:

			// Filter the usual warnings.
			if (line.find("never defined") != std::string::npos) {
				if (
					line.find("constant_sort/2") != std::string::npos
					|| line.find("rigid/1") != std::string::npos
					|| line.find("inertialFluent/1") != std::string::npos
					|| line.find("abFluent/1") != std::string::npos
					|| line.find("exogenousAction/1") != std::string::npos
					|| line.find("abAction/1") != std::string::npos
					|| line.find("attribute/1") != std::string::npos
					|| line.find("additiveAction/1") != std::string::npos
					|| line.find("staticAbnormality/1") != std::string::npos
					|| line.find("dynamicAbnormality/1") != std::string::npos
					|| line.find("action_attribute/2") != std::string::npos
					|| line.find("staticAbnormality/1") != std::string::npos
					|| line.find("noconcurrency/0") != std::string::npos
					|| line.find("strong_noconcurrency/0") != std::string::npos
					|| line.find("false/0") != std::string::npos
					|| line.find("computed/1") != std::string::npos
					)
					show = false;
			}
			else if (line.find("convert") != std::string::npos
					&& line.find("none") != std::string::npos) {
				unificationError = true;

			}

			break;
		case Config::TC_POSTPROC:

			break;
		case Config::TC_REACTIVE_BRIDGE:

			break;
		default:
			break;
		}

		if (show) std::cerr << line << std::endl;
	}

	if (unificationError) {
		utils::error("Detected an error that appears to be caused by a bug in Gringo 3.0.5 which prevents", true, 0);
		utils::error("  certain programs from being grounded properly. Adding '--none-alias[=VALUE]' to", true, 0);
		utils::error("  the command-line arguments may fix this problem.", true, 0); 
	}

	in.close();

	return true;
}


#ifdef DEBUG

void cleanup(Config config, bool const* ran, bfs::path selfpath){
	utils::debug("Deleting appropriate temporary files.", true);
	
	if (config.boolConfigOpt(Config::OPT_DISCARD_F2LP)) {
		// Discard F2LP intermediates...
		if (ran[Config::TC_PREPROC]) {
			bfs::copy_file(F2LP_INPUT_FILE,selfpath.remove_filename().string() + "F2LP_INPUT_FILE",bfs::copy_option::overwrite_if_exists);
			bfs::copy_file(F2LP_OUTPUT_FILE,selfpath.remove_filename().string() + "F2LP_OUTPUT_FILE",bfs::copy_option::overwrite_if_exists);
			bfs::remove(F2LP_INPUT_FILE);
			bfs::remove(F2LP_OUTPUT_FILE);
		}
	}

	bfs::remove(config.errFile());

	for (int i = 0; i < (int)Config::_TC_LENGTH_; i++) {
		if (!config.customOut((Config::Toolchain)i)) {
			utils::debug("Deleting '%s'.", true, config.output((Config::Toolchain)i).c_str());
			try{
				bfs::copy_file(config.output((Config::Toolchain)i),selfpath.remove_filename().string() + config.getTextForEnum(i) + std::to_string(i),bfs::copy_option::overwrite_if_exists);
			}
			catch(const bfs::filesystem_error& ex){
				std::cout<<ex.what()<<'\n';
			}
			bfs::remove(config.output((Config::Toolchain)i));	
		}
	}
}


#else

void cleanup(Config const& config, bool const* ran) {
	utils::debug("Deleting appropriate temporary files.", true);

	if (config.boolConfigOpt(Config::OPT_DISCARD_F2LP)) {
		// Discard F2LP intermediates...
		if (ran[Config::TC_PREPROC]) {
			bfs::remove(F2LP_INPUT_FILE);
			bfs::remove(F2LP_OUTPUT_FILE);
		}
	}

	bfs::remove(config.errFile());

	for (int i = 0; i < (int)Config::_TC_LENGTH_; i++) {
		if (!config.customOut((Config::Toolchain)i)) {
			utils::debug("Deleting '%s'.", true, config.output((Config::Toolchain)i).c_str());
			bfs::remove(config.output((Config::Toolchain)i));	
		}
	}
}

#endif



// Attempts to echo the specified file to the specified output stream.
bool echoFile(std::ostream& out, std::string const& filename) {
	std::ifstream file(filename.c_str());
	char buf[4096];

	if (file.fail()) {
		return false;
	}

	while (!file.eof()) {
		file.read(buf, 4096);
		out.write(buf, file.gcount());
	}

	return true;
}

// Attempts to echo the solver stats from the specified file.
bool echoStats(std::ostream& out, std::string const& filename) {
	std::string tmp;
	bool found = false;
	

	std::ifstream file(filename.c_str());

	if (file.fail()) {
		return false;
	}

	while (std::getline(file, tmp)) {
		if (!strncmp("Models", tmp.c_str(), strlen("Models"))) {
			found = true;
			break;
		}
	}

	if (!found) return false;
	do {
		out << tmp << std::endl;
	} while (std::getline(file, tmp));

	return true;
}

