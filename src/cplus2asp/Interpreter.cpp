/* Generated by re2c 0.13.5 on Tue Mar 19 20:27:38 2013 */
#line 1 "Interpreter.re2c"
/*
 * Copyright (c) 2010-2013 <Joseph Babb, Michael Cassollary, Joohyung Lee>
 *
 * For information on how to contact the authors, please visit
 *      http://reasoning.eas.asu.edu/cplus2asp
 *
 * This file is part of the cplus2asp system.
 *
 * cplus2asp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * cplus2asp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */



#include <iostream>
#include <string>
#include <iomanip>

#include "Interpreter.h"
#include "utils.h"
#include "Config.h"

// Shows the help dialog.
void Interpreter::showHelp(std::ostream& output) {
	std::cout 
		<< "You may specify one or more of the following options, each followed by a return.\n"
		<< std::endl
		<< '\t' << std::setw(15) << std::left << "query=ID " << "- Selects and runs the query ID listed above.\n"
		<< '\t' << std::setw(15) << std::left << "sol=#" << "- Sets the number of solutions to find to #.\n"
		<< '\t' << std::setw(15) << std::left << "maxstep=#" << "- Overrides the maximum step on the next query, setting it to # (or '" << CONST_MAXSTEP_INFINITE << "' for no maxstep).\n"
		<< '\t' << std::setw(15) << std::left << "minstep=#" << "- Overrides the minimum step on the next query, setting it to #.\n"
		<< '\t' << std::setw(15) << std::left << "help" << "- Displays this dialog.\n"
		<< '\t' << std::setw(15) << std::left << "exit" << "- Exits the program.\n";	
}



// Interprets an action and provides the action requested an any additional value provided.
Interpreter::Action Interpreter::interpret(std::string const& command, std::string& outVal) {
	size_t pos;
	Action action;


	// Figure out the action.
	if ((pos = command.find("=")) != std::string::npos) {
		action = lex(trimWhitespace(command.substr(0,pos)));
	} else {
		action = lex(trimWhitespace(command));
	}

	// get the associated value if applicable.
	if (action != INVALID && pos != std::string::npos && pos + 1 <= command.size()) {
		outVal = trimWhitespace(command.substr(pos+1));
	} else {
		outVal = "";
	}


	return action;
}


// Determines the action requested based on its name
Interpreter::Action Interpreter::lex(std::string const& commandName) {
	char const* cstr = commandName.c_str();
	char const* marker;

	
#line 82 "<stdout>"
	{
		char yych;

		yych = *cstr;
		switch (yych) {
		case '\n':	goto yy2;
		case 'E':
		case 'e':	goto yy8;
		case 'H':
		case 'h':	goto yy7;
		case 'M':
		case 'm':	goto yy6;
		case 'Q':
		case 'q':	goto yy3;
		case 'S':
		case 's':	goto yy5;
		default:	goto yy9;
		}
yy2:
		cstr = marker;
		goto yy4;
yy3:
		yych = *(marker = ++cstr);
		switch (yych) {
		case 'U':
		case 'u':	goto yy35;
		default:	goto yy4;
		}
yy4:
#line 91 "Interpreter.re2c"
		{ return INVALID; }
#line 114 "<stdout>"
yy5:
		yych = *(marker = ++cstr);
		switch (yych) {
		case 'O':
		case 'o':	goto yy32;
		default:	goto yy4;
		}
yy6:
		yych = *(marker = ++cstr);
		switch (yych) {
		case 'A':
		case 'a':	goto yy19;
		case 'I':
		case 'i':	goto yy18;
		default:	goto yy4;
		}
yy7:
		yych = *(marker = ++cstr);
		switch (yych) {
		case 'E':
		case 'e':	goto yy14;
		default:	goto yy4;
		}
yy8:
		yych = *(marker = ++cstr);
		switch (yych) {
		case 'X':
		case 'x':	goto yy10;
		default:	goto yy4;
		}
yy9:
		yych = *++cstr;
		goto yy4;
yy10:
		yych = *++cstr;
		switch (yych) {
		case 'I':
		case 'i':	goto yy11;
		default:	goto yy2;
		}
yy11:
		yych = *++cstr;
		switch (yych) {
		case 'T':
		case 't':	goto yy12;
		default:	goto yy2;
		}
yy12:
		++cstr;
#line 90 "Interpreter.re2c"
		{ return EXIT; }
#line 166 "<stdout>"
yy14:
		yych = *++cstr;
		switch (yych) {
		case 'L':
		case 'l':	goto yy15;
		default:	goto yy2;
		}
yy15:
		yych = *++cstr;
		switch (yych) {
		case 'P':
		case 'p':	goto yy16;
		default:	goto yy2;
		}
yy16:
		++cstr;
#line 89 "Interpreter.re2c"
		{ return SHOW_HELP; }
#line 185 "<stdout>"
yy18:
		yych = *++cstr;
		switch (yych) {
		case 'N':
		case 'n':	goto yy26;
		default:	goto yy2;
		}
yy19:
		yych = *++cstr;
		switch (yych) {
		case 'X':
		case 'x':	goto yy20;
		default:	goto yy2;
		}
yy20:
		yych = *++cstr;
		switch (yych) {
		case 'S':
		case 's':	goto yy21;
		default:	goto yy2;
		}
yy21:
		yych = *++cstr;
		switch (yych) {
		case 'T':
		case 't':	goto yy22;
		default:	goto yy2;
		}
yy22:
		yych = *++cstr;
		switch (yych) {
		case 'E':
		case 'e':	goto yy23;
		default:	goto yy2;
		}
yy23:
		yych = *++cstr;
		switch (yych) {
		case 'P':
		case 'p':	goto yy24;
		default:	goto yy2;
		}
yy24:
		++cstr;
#line 87 "Interpreter.re2c"
		{ return SET_MAXSTEP; }
#line 232 "<stdout>"
yy26:
		yych = *++cstr;
		switch (yych) {
		case 'S':
		case 's':	goto yy27;
		default:	goto yy2;
		}
yy27:
		yych = *++cstr;
		switch (yych) {
		case 'T':
		case 't':	goto yy28;
		default:	goto yy2;
		}
yy28:
		yych = *++cstr;
		switch (yych) {
		case 'E':
		case 'e':	goto yy29;
		default:	goto yy2;
		}
yy29:
		yych = *++cstr;
		switch (yych) {
		case 'P':
		case 'p':	goto yy30;
		default:	goto yy2;
		}
yy30:
		++cstr;
#line 88 "Interpreter.re2c"
		{ return SET_MINSTEP; }
#line 265 "<stdout>"
yy32:
		yych = *++cstr;
		switch (yych) {
		case 'L':
		case 'l':	goto yy33;
		default:	goto yy2;
		}
yy33:
		++cstr;
#line 86 "Interpreter.re2c"
		{ return SET_NUMSOLN; }
#line 277 "<stdout>"
yy35:
		yych = *++cstr;
		switch (yych) {
		case 'E':
		case 'e':	goto yy36;
		default:	goto yy2;
		}
yy36:
		yych = *++cstr;
		switch (yych) {
		case 'R':
		case 'r':	goto yy37;
		default:	goto yy2;
		}
yy37:
		yych = *++cstr;
		switch (yych) {
		case 'Y':
		case 'y':	goto yy38;
		default:	goto yy2;
		}
yy38:
		++cstr;
#line 85 "Interpreter.re2c"
		{ return SET_QUERY; }
#line 303 "<stdout>"
	}
#line 92 "Interpreter.re2c"

}

