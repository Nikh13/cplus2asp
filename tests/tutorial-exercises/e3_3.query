:- include 'coins4.cplus'.

:- objects
	penny, nickle, dime :: coins.

:- variables
	CX1, CX2, CX3 :: coins.

:- macros
	has2 -> [\/CX1  \/CX2 | CX1 \= CX2 & owner(CX1)=john & owner(CX2)=john ];
	has3 -> [\/CX1  \/CX2 \/CX3 | CX1 \= CX2 & CX2 \= CX3 & CX1 \= CX3 & owner(CX1)=john & owner(CX2)=john & owner(CX3)=john];
	exactly2 -> [\/CX1 \/ CX2 | CX1 \= CX2 & owner(CX1)=john & owner(CX2)=john & [/\ CX3 | (CX1 \= CX3 && CX2 \= CX3) ->> -owner(CX3)=john] ].

% Exercise 3.3
% Assume that mary has all three coins initially. Create a plan to ensure that john has exactly 2 coins in the final state and mary has none.
% Command: cplus2asp e3_3.query -q 0
:- query
	0: owner(CX1)=mary;
	maxstep: has2 & -has3 & -owner(CX1)=mary.


% Alternative query for exercise 3.3 using complex nesting.
:- query
	label :: 1;
	0 : owner(CX1)=mary;
	maxstep: exactly2 & -owner(CX1)=mary.

