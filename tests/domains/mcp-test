% File 'mcp-test'

:- maxAdditive :: 3.

:- include 'domains/mcp'.

:- query
maxstep :: 6..7;
0: (num(mi,bank1) = 3 && num(ca,bank1) = 3);
0: (num(mi,bank2) = 0 && num(ca,bank2) = 0);
0: [/\V | loc(V) = bank1];
maxstep: (num(mi,bank1) = 0 && num(ca,bank1) = 0).

:- show loc(V); num(G,L); cross(V); to(V); howmany(V,G); departing(G,C).


/*
| ?- loadf 'mcp-test'.
% loading file macros.std
% loading file /stage/projects3/tag/ccalc/examples/mcp-test
% loading file /stage/projects3/tag/ccalc/examples/mcp
% loading file /projects/tag/ccalc/additive
% loading file /projects/tag/ccalc/arithmetic
% in transition mode...
% 316 atoms, 790 rules, 3008 clauses (360 new atoms)
% Grounding time: 2.23 seconds
% Completion time: 1.82 seconds
yes
| ?- query 0.
% After shifting: 3916 atoms (including new atoms), 17818 clauses
% Shifting time: 0.35 seconds
% Calling mChaff... 
% Solution time: 0.6 seconds (prep 0.2 seconds, search 0.4 seconds)  

No solution with maxstep 6.

% After shifting: 4564 atoms (including new atoms), 20780 clauses
% Shifting time: 0.41 seconds
% Calling mChaff... 
% Solution time: 1.03 seconds (prep 0.22 seconds, search 0.81 seconds)  

0:  num(mi,bank1)=3  num(mi,bank2)=0  num(ca,bank1)=3  num(ca,bank2)=0  loc(boat1)=bank1  loc(boat2)=bank1 

ACTIONS:  cross(boat1,howmany(mi):0,howmany(ca):1,to:bank2)  cross(boat2,howmany(mi):0,howmany(ca):2,to:bank2)  departed(mi,bank1)eq 0  departed(mi,bank2)eq 0  departed(ca,bank1)eq 3  departed(ca,bank2)eq 0  

1:  num(mi,bank1)=3  num(mi,bank2)=0  num(ca,bank1)=0  num(ca,bank2)=3  loc(boat1)=bank2  loc(boat2)=bank2 

ACTIONS:  cross(boat1,howmany(mi):0,howmany(ca):1,to:bank1)  cross(boat2,howmany(mi):0,howmany(ca):1,to:bank1)  departed(mi,bank1)eq 0  departed(mi,bank2)eq 0  departed(ca,bank1)eq 0  departed(ca,bank2)eq 2  

2:  num(mi,bank1)=3  num(mi,bank2)=0  num(ca,bank1)=2  num(ca,bank2)=1  loc(boat1)=bank1  loc(boat2)=bank1 

ACTIONS:  cross(boat1,howmany(mi):1,howmany(ca):0,to:bank2)  cross(boat2,howmany(mi):1,howmany(ca):1,to:bank2)  departed(mi,bank1)eq 2  departed(mi,bank2)eq 0  departed(ca,bank1)eq 1  departed(ca,bank2)eq 0  

3:  num(mi,bank1)=1  num(mi,bank2)=2  num(ca,bank1)=1  num(ca,bank2)=2  loc(boat1)=bank2  loc(boat2)=bank2 

ACTIONS:  cross(boat1,howmany(mi):1,howmany(ca):0,to:bank1)  cross(boat2,howmany(mi):0,howmany(ca):1,to:bank1)  departed(mi,bank1)eq 0  departed(mi,bank2)eq 1  departed(ca,bank1)eq 0  departed(ca,bank2)eq 1  

4:  num(mi,bank1)=2  num(mi,bank2)=1  num(ca,bank1)=2  num(ca,bank2)=1  loc(boat1)=bank1  loc(boat2)=bank1 

ACTIONS:  cross(boat1,howmany(mi):0,howmany(ca):1,to:bank2)  cross(boat2,howmany(mi):2,howmany(ca):0,to:bank2)  departed(mi,bank1)eq 2  departed(mi,bank2)eq 0  departed(ca,bank1)eq 1  departed(ca,bank2)eq 0  

5:  num(mi,bank1)=0  num(mi,bank2)=3  num(ca,bank1)=1  num(ca,bank2)=2  loc(boat1)=bank2  loc(boat2)=bank2 

ACTIONS:  cross(boat1,howmany(mi):0,howmany(ca):1,to:bank1)  cross(boat2,howmany(mi):0,howmany(ca):1,to:bank1)  departed(mi,bank1)eq 0  departed(mi,bank2)eq 0  departed(ca,bank1)eq 0  departed(ca,bank2)eq 2  

6:  num(mi,bank1)=0  num(mi,bank2)=3  num(ca,bank1)=3  num(ca,bank2)=0  loc(boat1)=bank1  loc(boat2)=bank1 

ACTIONS:  cross(boat1,howmany(mi):0,howmany(ca):1,to:bank2)  cross(boat2,howmany(mi):0,howmany(ca):2,to:bank2)  departed(mi,bank1)eq 0  departed(mi,bank2)eq 0  departed(ca,bank1)eq 3  departed(ca,bank2)eq 0  

7:  num(mi,bank1)=0  num(mi,bank2)=3  num(ca,bank1)=0  num(ca,bank2)=3  loc(boat1)=bank2  loc(boat2)=bank2 
yes
| ?- 
*/
