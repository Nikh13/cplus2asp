:- sorts
  snack;
  person.

:- variables
  S                         :: snack;
  P, P1                     :: person.

:- constants
  possible_owner(person,snack)   ::  inertialFluent;

  fight(person,person,snack)     ::  exogenousAction.

caused possible_owner(P,S)
     after fight(P,P1,S) && possible_owner(P1,S).

% one can't fight oneself
nonexecutable fight(P,P,S).

:- objects
  left, me, right           :: person;
  apple, carrot, banana     :: snack.

:- nmquery
label :: 1;
maxstep :: 2;
anyFluentValues;
cwaActions;
constraint 0:
  [/\S | possible_owner(me,S)],
  [/\S | -possible_owner(left,S)],
  [/\S | -possible_owner(right,S)];
0: fight(left, me, apple);
1: fight(right, me, banana).


:- sorts
   truth.

:- constants
  has(person,snack)		:: sdFluent(truth).

caused has(P,S)=no if -possible_owner(P,S).
caused has(P,S)=yes if possible_owner(P,S)
	                && [/\P1 | -possible_owner(P1,S) ++ P=P1].
caused has(P,S)=maybe if possible_owner(P,S)
			&& possible_owner(P1,S) && P\=P1.

:- objects
  yes, no, maybe            :: truth.
