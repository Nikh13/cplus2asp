% File: multiple-monkey

:- sorts
  thing >> monkey;
  location.

:- objects
  bananas,box               :: thing;
  l1,l2,l3                  :: location.

:- variables
  M,M1                      :: monkey;
  L,L1                      :: location.

:- constants
  loc(thing)                :: inertialFluent(location);
  onBox(monkey),
  hasBananas(monkey)        :: inertialFluent;

  walk(monkey,location),
  pushBox(monkey,location),
  climbOn(monkey),
  climbOff(monkey),
  graspBananas(monkey)      :: exogenousAction.

% monkey takes the bananas with him wherever he goes
caused loc(bananas)=L if hasBananas(M) & loc(M)=L.
% if the monkey is on the box then both are at the same location
caused loc(M)=L if loc(box)=L & onBox(M).

% bananas belong to only one monkey
constraint hasBananas(M) & hasBananas(M1) ->> M=M1.

% the box is big enough to have only one monkey on top of it
constraint onBox(M) & onBox(M1) ->> M=M1 unless ab1(M,M1).

% walking
walk(M,L) causes loc(M)=L.
nonexecutable walk(M,L) if loc(M)=L.
nonexecutable walk(M,L) if onBox(M).

% pushing the box
pushBox(M,L) causes loc(box)=L unless ab2(M).
pushBox(M,L) causes loc(M)=L unless ab2(M).
nonexecutable pushBox(M,L) if loc(M)=L.
nonexecutable pushBox(M,L) if onBox(M).
nonexecutable pushBox(M,L) if loc(M)\=loc(box).

% climbing on the box
climbOn(M) causes onBox(M).
nonexecutable climbOn(M) if loc(M)\=loc(box).
nonexecutable climbOn(M) if onBox(M).

% climbing off the box
climbOff(M) causes -onBox(M).
nonexecutable climbOff(M) if -onBox(M).

% grasping the bananas
graspBananas(M) causes hasBananas(M).
nonexecutable graspBananas(M) if hasBananas(M).
nonexecutable graspBananas(M) if loc(M)\=loc(bananas).
nonexecutable graspBananas(M) if -onBox(M).

% prohibit certain concurrent actions
nonexecutable walk(M,L) & pushBox(M,L1).
%nonexecutable walk(M,L) & climbOn(M).
nonexecutable pushBox(M,L) & climbOn(M).
nonexecutable climbOff(M) & graspBananas(M).


