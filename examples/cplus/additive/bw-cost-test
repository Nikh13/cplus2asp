:- maxAdditive :: 19.

:- macros
  length  -> 8;
  length_small -> 7;
  maxCost -> 18.

:- include 'bw-cost'.

:- variables
  N                              :: 0..maxAdditive.

:- objects
  a,b,c,d,e,f,g,h,i,j,k,l,m,n,o  :: block.

:- show cost; move(B); destination(L).

:- query
maxstep :: length_small..length;
0:      (cost = 0  &  loc(m) = table  &  loc(l) = m
        &  loc(a) = l  &  loc(b) = a  &  loc(c) = b
        &  loc(o) = table  &  loc(n) = o  &  loc(d) = n
        &  loc(e) = d  &  loc(j) = e  &  loc(k) = j
        &  loc(f) = table  &  loc(g) = f  &  loc(h) = g
        &  loc(i) = h);
maxstep: ([\/N| cost = N & N=<maxCost]
        &  loc(e) = j  &  loc(a) = e  &  loc(n) = a
        &  loc(i) = d  &  loc(h) = i  &  loc(m) = h
        &  loc(o) = m  &  loc(k) = g  &  loc(c) = k
        &  loc(b) = c  &  loc(l) = b).


/*
| ?- loadf 'bw-cost-test'.
% loading file macros.std
% loading file /stage/projects3/tag/ccalc/examples/bw-cost-test
% loading file /stage/projects3/tag/ccalc/examples/bw-cost
% loading file /projects/tag/ccalc/additive
% loading file /projects/tag/ccalc/arithmetic
% loading file /stage/projects3/tag/ccalc/examples/bw-serializable
% in transition mode...
% 1390 atoms, 11695 rules, 32657 clauses (3060 new atoms)
% Grounding time: 152.21 seconds
% Completion time: 65.85 seconds
yes
| ?- query 0.
% After shifting: 29590 atoms (including new atoms), 207113 clauses
% Shifting time: 4.55 seconds
% Calling mChaff... 
% Solution time: 2.61 seconds (prep 2.3 seconds, search 0.31 seconds)  

No solution with maxstep 7.

% After shifting: 33780 atoms (including new atoms), 236189 clauses
% Shifting time: 5.23 seconds
% Calling mChaff... 
% Solution time: 9.23 seconds (prep 2.51 seconds, search 6.72 seconds)  

0:  cost=0 

ACTIONS:  move(c,destination:table)  move(i,destination:table)  move(k,destination:table)  

1:  cost=3 

ACTIONS:  move(b,destination:table)  move(h,destination:table)  move(j,destination:table)  

2:  cost=6 

ACTIONS:  move(e,destination:j)  move(k,destination:g)  

3:  cost=8 

ACTIONS:  move(a,destination:e)  move(c,destination:k)  move(d,destination:table)  

4:  cost=11 

ACTIONS:  move(b,destination:c)  move(i,destination:d)  

5:  cost=13 

ACTIONS:  move(h,destination:i)  move(l,destination:b)  move(n,destination:a)  

6:  cost=16 

ACTIONS:  move(m,destination:h)  

7:  cost=17 

ACTIONS:  move(o,destination:m)  

8:  cost=18 
yes
| ?- 
*/
